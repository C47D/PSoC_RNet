ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB43:
  26              		.file 1 "..\\FreeRTOS\\tasks.c"
   1:..\FreeRTOS/tasks.c **** /*
   2:..\FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.0.0
   3:..\FreeRTOS/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS/tasks.c ****  *
   5:..\FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS/tasks.c ****  * subject to the following conditions:
  11:..\FreeRTOS/tasks.c ****  *
  12:..\FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS/tasks.c ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:..\FreeRTOS/tasks.c ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15:..\FreeRTOS/tasks.c ****  *
  16:..\FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:..\FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:..\FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:..\FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:..\FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:..\FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:..\FreeRTOS/tasks.c ****  *
  23:..\FreeRTOS/tasks.c ****  * http://www.FreeRTOS.org
  24:..\FreeRTOS/tasks.c ****  * http://aws.amazon.com/freertos
  25:..\FreeRTOS/tasks.c ****  *
  26:..\FreeRTOS/tasks.c ****  * 1 tab == 4 spaces!
  27:..\FreeRTOS/tasks.c ****  */
  28:..\FreeRTOS/tasks.c **** 
  29:..\FreeRTOS/tasks.c **** /* Standard includes. */
  30:..\FreeRTOS/tasks.c **** #include <stdlib.h>
  31:..\FreeRTOS/tasks.c **** #include <string.h>
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 2


  32:..\FreeRTOS/tasks.c **** 
  33:..\FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:..\FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  35:..\FreeRTOS/tasks.c **** task.h is included from an application file. */
  36:..\FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:..\FreeRTOS/tasks.c **** 
  38:..\FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  39:..\FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  40:..\FreeRTOS/tasks.c **** #include "task.h"
  41:..\FreeRTOS/tasks.c **** #include "timers.h"
  42:..\FreeRTOS/tasks.c **** #include "stack_macros.h"
  43:..\FreeRTOS/tasks.c **** 
  44:..\FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:..\FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:..\FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  47:..\FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  48:..\FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:..\FreeRTOS/tasks.c **** 
  50:..\FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:..\FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  52:..\FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:..\FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  54:..\FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  55:..\FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  56:..\FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  57:..\FreeRTOS/tasks.c **** 	#include <stdio.h>
  58:..\FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  59:..\FreeRTOS/tasks.c **** 
  60:..\FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  61:..\FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  62:..\FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
  63:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  64:..\FreeRTOS/tasks.c **** #else
  65:..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  66:..\FreeRTOS/tasks.c **** #endif
  67:..\FreeRTOS/tasks.c **** 
  68:..\FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:..\FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  70:..\FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  71:..\FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  72:..\FreeRTOS/tasks.c **** 
  73:..\FreeRTOS/tasks.c **** /*
  74:..\FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:..\FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:..\FreeRTOS/tasks.c ****  */
  77:..\FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  78:..\FreeRTOS/tasks.c **** 
  79:..\FreeRTOS/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  80:..\FreeRTOS/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  81:..\FreeRTOS/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  82:..\FreeRTOS/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  83:..\FreeRTOS/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  84:..\FreeRTOS/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  85:..\FreeRTOS/tasks.c **** settings allow a task to be created using either statically or dynamically
  86:..\FreeRTOS/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  87:..\FreeRTOS/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  88:..\FreeRTOS/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 3


  89:..\FreeRTOS/tasks.c **** made to free the RAM that was allocated statically.
  90:..\FreeRTOS/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  91:..\FreeRTOS/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  92:..\FreeRTOS/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  93:..\FreeRTOS/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  94:..\FreeRTOS/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  95:..\FreeRTOS/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  96:..\FreeRTOS/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  97:..\FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  98:..\FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  99:..\FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 100:..\FreeRTOS/tasks.c **** 
 101:..\FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 102:..\FreeRTOS/tasks.c **** value so the high water mark can be determined.  If none of the following are
 103:..\FreeRTOS/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 104:..\FreeRTOS/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 105:..\FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 106:..\FreeRTOS/tasks.c **** #else
 107:..\FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 108:..\FreeRTOS/tasks.c **** #endif
 109:..\FreeRTOS/tasks.c **** 
 110:..\FreeRTOS/tasks.c **** /*
 111:..\FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 112:..\FreeRTOS/tasks.c ****  */
 113:..\FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:..\FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:..\FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:..\FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:..\FreeRTOS/tasks.c **** 
 118:..\FreeRTOS/tasks.c **** /*
 119:..\FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:..\FreeRTOS/tasks.c ****  * global, rather than file scope.
 121:..\FreeRTOS/tasks.c ****  */
 122:..\FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:..\FreeRTOS/tasks.c **** 	#define static
 124:..\FreeRTOS/tasks.c **** #endif
 125:..\FreeRTOS/tasks.c **** 
 126:..\FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:..\FreeRTOS/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:..\FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:..\FreeRTOS/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:..\FreeRTOS/tasks.c **** #endif
 131:..\FreeRTOS/tasks.c **** 
 132:..\FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:..\FreeRTOS/tasks.c **** 
 134:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:..\FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:..\FreeRTOS/tasks.c **** 	microcontroller architecture. */
 137:..\FreeRTOS/tasks.c **** 
 138:..\FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:..\FreeRTOS/tasks.c **** 	state task. */
 140:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:..\FreeRTOS/tasks.c **** 	{																									\
 142:..\FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:..\FreeRTOS/tasks.c **** 		{																								\
 144:..\FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:..\FreeRTOS/tasks.c **** 		}																								\
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 4


 146:..\FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:..\FreeRTOS/tasks.c **** 
 148:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 149:..\FreeRTOS/tasks.c **** 
 150:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:..\FreeRTOS/tasks.c **** 	{																									\
 152:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:..\FreeRTOS/tasks.c **** 																										\
 154:..\FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:..\FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:..\FreeRTOS/tasks.c **** 		{																								\
 157:..\FreeRTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:..\FreeRTOS/tasks.c **** 			--uxTopPriority;																			\
 159:..\FreeRTOS/tasks.c **** 		}																								\
 160:..\FreeRTOS/tasks.c **** 																										\
 161:..\FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:..\FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:..\FreeRTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:..\FreeRTOS/tasks.c **** 
 167:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\FreeRTOS/tasks.c **** 
 169:..\FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:..\FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:..\FreeRTOS/tasks.c **** 	being used. */
 172:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:..\FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:..\FreeRTOS/tasks.c **** 
 175:..\FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:..\FreeRTOS/tasks.c **** 
 177:..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:..\FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:..\FreeRTOS/tasks.c **** 	architecture being used. */
 180:..\FreeRTOS/tasks.c **** 
 181:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:..\FreeRTOS/tasks.c **** 
 184:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 185:..\FreeRTOS/tasks.c **** 
 186:..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:..\FreeRTOS/tasks.c **** 	{																								\
 188:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:..\FreeRTOS/tasks.c **** 																									\
 190:..\FreeRTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:..\FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:..\FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:..\FreeRTOS/tasks.c **** 
 196:..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 197:..\FreeRTOS/tasks.c **** 
 198:..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:..\FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:..\FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:..\FreeRTOS/tasks.c **** 	{																									\
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 5


 203:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:..\FreeRTOS/tasks.c **** 		{																								\
 205:..\FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:..\FreeRTOS/tasks.c **** 		}																								\
 207:..\FreeRTOS/tasks.c **** 	}
 208:..\FreeRTOS/tasks.c **** 
 209:..\FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:..\FreeRTOS/tasks.c **** 
 211:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 212:..\FreeRTOS/tasks.c **** 
 213:..\FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:..\FreeRTOS/tasks.c **** count overflows. */
 215:..\FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:..\FreeRTOS/tasks.c **** {																									\
 217:..\FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 218:..\FreeRTOS/tasks.c **** 																									\
 219:..\FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:..\FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:..\FreeRTOS/tasks.c **** 																									\
 222:..\FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:..\FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 226:..\FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:..\FreeRTOS/tasks.c **** }
 228:..\FreeRTOS/tasks.c **** 
 229:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 230:..\FreeRTOS/tasks.c **** 
 231:..\FreeRTOS/tasks.c **** /*
 232:..\FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:..\FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:..\FreeRTOS/tasks.c ****  */
 235:..\FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:..\FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:..\FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:..\FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:..\FreeRTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 241:..\FreeRTOS/tasks.c **** 
 242:..\FreeRTOS/tasks.c **** /*
 243:..\FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:..\FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:..\FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:..\FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:..\FreeRTOS/tasks.c ****  */
 248:..\FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:..\FreeRTOS/tasks.c **** 
 250:..\FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:..\FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:..\FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:..\FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:..\FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:..\FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:..\FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:..\FreeRTOS/tasks.c **** to its original value when it is released. */
 258:..\FreeRTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 6


 260:..\FreeRTOS/tasks.c **** #else
 261:..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:..\FreeRTOS/tasks.c **** #endif
 263:..\FreeRTOS/tasks.c **** 
 264:..\FreeRTOS/tasks.c **** /*
 265:..\FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:..\FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:..\FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 268:..\FreeRTOS/tasks.c ****  */
 269:..\FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 270:..\FreeRTOS/tasks.c **** {
 271:..\FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:..\FreeRTOS/tasks.c **** 
 273:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:..\FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:..\FreeRTOS/tasks.c **** 	#endif
 276:..\FreeRTOS/tasks.c **** 
 277:..\FreeRTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:..\FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:..\FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:..\FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:..\FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:..\FreeRTOS/tasks.c **** 
 283:..\FreeRTOS/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:..\FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:..\FreeRTOS/tasks.c **** 	#endif
 286:..\FreeRTOS/tasks.c **** 
 287:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:..\FreeRTOS/tasks.c **** 	#endif
 290:..\FreeRTOS/tasks.c **** 
 291:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:..\FreeRTOS/tasks.c **** 	#endif
 295:..\FreeRTOS/tasks.c **** 
 296:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:..\FreeRTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:..\FreeRTOS/tasks.c **** 	#endif
 300:..\FreeRTOS/tasks.c **** 
 301:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:..\FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:..\FreeRTOS/tasks.c **** 	#endif
 304:..\FreeRTOS/tasks.c **** 
 305:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:..\FreeRTOS/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:..\FreeRTOS/tasks.c **** 	#endif
 308:..\FreeRTOS/tasks.c **** 
 309:..\FreeRTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:..\FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:..\FreeRTOS/tasks.c **** 	#endif
 312:..\FreeRTOS/tasks.c **** 
 313:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:..\FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:..\FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:..\FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 7


 317:..\FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:..\FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:..\FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:..\FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:..\FreeRTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 322:..\FreeRTOS/tasks.c **** 	#endif
 323:..\FreeRTOS/tasks.c **** 
 324:..\FreeRTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:..\FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:..\FreeRTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:..\FreeRTOS/tasks.c **** 	#endif
 328:..\FreeRTOS/tasks.c **** 
 329:..\FreeRTOS/tasks.c **** 	/* See the comments above the definition of
 330:..\FreeRTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:..\FreeRTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:..\FreeRTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:..\FreeRTOS/tasks.c **** 	#endif
 334:..\FreeRTOS/tasks.c **** 
 335:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:..\FreeRTOS/tasks.c **** 		uint8_t ucDelayAborted;
 337:..\FreeRTOS/tasks.c **** 	#endif
 338:..\FreeRTOS/tasks.c **** 
 339:..\FreeRTOS/tasks.c **** } tskTCB;
 340:..\FreeRTOS/tasks.c **** 
 341:..\FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:..\FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:..\FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 344:..\FreeRTOS/tasks.c **** 
 345:..\FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:..\FreeRTOS/tasks.c **** which static variables must be declared volatile. */
 347:..\FreeRTOS/tasks.c **** 
 348:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:..\FreeRTOS/tasks.c **** 
 350:..\FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:..\FreeRTOS/tasks.c **** 
 358:..\FreeRTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:..\FreeRTOS/tasks.c **** 
 360:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:..\FreeRTOS/tasks.c **** 
 363:..\FreeRTOS/tasks.c **** #endif
 364:..\FreeRTOS/tasks.c **** 
 365:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:..\FreeRTOS/tasks.c **** 
 367:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:..\FreeRTOS/tasks.c **** 
 369:..\FreeRTOS/tasks.c **** #endif
 370:..\FreeRTOS/tasks.c **** 
 371:..\FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 372:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 8


 374:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:..\FreeRTOS/tasks.c **** 
 383:..\FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:..\FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:..\FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:..\FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:..\FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:..\FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:..\FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:..\FreeRTOS/tasks.c **** accessed from a critical section. */
 391:..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:..\FreeRTOS/tasks.c **** 
 393:..\FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:..\FreeRTOS/tasks.c **** 
 395:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:..\FreeRTOS/tasks.c **** 
 398:..\FreeRTOS/tasks.c **** #endif
 399:..\FreeRTOS/tasks.c **** 
 400:..\FreeRTOS/tasks.c **** /*lint -restore */
 401:..\FreeRTOS/tasks.c **** 
 402:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 403:..\FreeRTOS/tasks.c **** 
 404:..\FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:..\FreeRTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:..\FreeRTOS/tasks.c **** 
 407:..\FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:..\FreeRTOS/tasks.c **** 
 409:..\FreeRTOS/tasks.c **** #endif
 410:..\FreeRTOS/tasks.c **** 
 411:..\FreeRTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:..\FreeRTOS/tasks.c **** 
 413:..\FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 414:..\FreeRTOS/tasks.c **** 
 415:..\FreeRTOS/tasks.c **** #endif
 416:..\FreeRTOS/tasks.c **** 
 417:..\FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:..\FreeRTOS/tasks.c **** 
 419:..\FreeRTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:..\FreeRTOS/tasks.c **** 
 421:..\FreeRTOS/tasks.c **** #endif
 422:..\FreeRTOS/tasks.c **** 
 423:..\FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 424:..\FreeRTOS/tasks.c **** 
 425:..\FreeRTOS/tasks.c **** /**
 426:..\FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:..\FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:..\FreeRTOS/tasks.c ****  * is in any other state.
 429:..\FreeRTOS/tasks.c ****  */
 430:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 9


 431:..\FreeRTOS/tasks.c **** 
 432:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:..\FreeRTOS/tasks.c **** 
 434:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:..\FreeRTOS/tasks.c **** 
 436:..\FreeRTOS/tasks.c **** /*
 437:..\FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:..\FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 439:..\FreeRTOS/tasks.c ****  */
 440:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:..\FreeRTOS/tasks.c **** 
 442:..\FreeRTOS/tasks.c **** /*
 443:..\FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:..\FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:..\FreeRTOS/tasks.c ****  * creation of the first user task.
 446:..\FreeRTOS/tasks.c ****  *
 447:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:..\FreeRTOS/tasks.c ****  *
 450:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:..\FreeRTOS/tasks.c ****  *
 452:..\FreeRTOS/tasks.c ****  */
 453:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:..\FreeRTOS/tasks.c **** 
 455:..\FreeRTOS/tasks.c **** /*
 456:..\FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:..\FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 458:..\FreeRTOS/tasks.c ****  *
 459:..\FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:..\FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:..\FreeRTOS/tasks.c ****  */
 462:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:..\FreeRTOS/tasks.c **** 
 464:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:..\FreeRTOS/tasks.c **** 
 466:..\FreeRTOS/tasks.c **** #endif
 467:..\FreeRTOS/tasks.c **** 
 468:..\FreeRTOS/tasks.c **** /*
 469:..\FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:..\FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:..\FreeRTOS/tasks.c ****  * and its TCB deleted.
 472:..\FreeRTOS/tasks.c ****  */
 473:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:..\FreeRTOS/tasks.c **** 
 475:..\FreeRTOS/tasks.c **** /*
 476:..\FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:..\FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 478:..\FreeRTOS/tasks.c ****  */
 479:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:..\FreeRTOS/tasks.c **** 
 481:..\FreeRTOS/tasks.c **** /*
 482:..\FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:..\FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:..\FreeRTOS/tasks.c ****  * a suspended list, etc.).
 485:..\FreeRTOS/tasks.c ****  *
 486:..\FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:..\FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 10


 488:..\FreeRTOS/tasks.c ****  */
 489:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:..\FreeRTOS/tasks.c **** 
 491:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:..\FreeRTOS/tasks.c **** 
 493:..\FreeRTOS/tasks.c **** #endif
 494:..\FreeRTOS/tasks.c **** 
 495:..\FreeRTOS/tasks.c **** /*
 496:..\FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:..\FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:..\FreeRTOS/tasks.c ****  */
 499:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:..\FreeRTOS/tasks.c **** 
 501:..\FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:..\FreeRTOS/tasks.c **** 
 503:..\FreeRTOS/tasks.c **** #endif
 504:..\FreeRTOS/tasks.c **** 
 505:..\FreeRTOS/tasks.c **** /*
 506:..\FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:..\FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:..\FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:..\FreeRTOS/tasks.c ****  */
 510:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:..\FreeRTOS/tasks.c **** 
 512:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:..\FreeRTOS/tasks.c **** 
 514:..\FreeRTOS/tasks.c **** #endif
 515:..\FreeRTOS/tasks.c **** 
 516:..\FreeRTOS/tasks.c **** /*
 517:..\FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:..\FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:..\FreeRTOS/tasks.c ****  *
 520:..\FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:..\FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:..\FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:..\FreeRTOS/tasks.c ****  * set to a value other than 1.
 524:..\FreeRTOS/tasks.c ****  */
 525:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:..\FreeRTOS/tasks.c **** 
 527:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:..\FreeRTOS/tasks.c **** 
 529:..\FreeRTOS/tasks.c **** #endif
 530:..\FreeRTOS/tasks.c **** 
 531:..\FreeRTOS/tasks.c **** /*
 532:..\FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:..\FreeRTOS/tasks.c ****  * will exit the Blocked state.
 534:..\FreeRTOS/tasks.c ****  */
 535:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:..\FreeRTOS/tasks.c **** 
 537:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:..\FreeRTOS/tasks.c **** 
 539:..\FreeRTOS/tasks.c **** 	/*
 540:..\FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:..\FreeRTOS/tasks.c **** 	 * human readable tables of task information.
 542:..\FreeRTOS/tasks.c **** 	 */
 543:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 11


 545:..\FreeRTOS/tasks.c **** #endif
 546:..\FreeRTOS/tasks.c **** 
 547:..\FreeRTOS/tasks.c **** /*
 548:..\FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:..\FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 550:..\FreeRTOS/tasks.c ****  */
 551:..\FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:..\FreeRTOS/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 554:..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 555:..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 556:..\FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:..\FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 558:..\FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:..\FreeRTOS/tasks.c **** 
 560:..\FreeRTOS/tasks.c **** /*
 561:..\FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:..\FreeRTOS/tasks.c ****  * under the control of the scheduler.
 563:..\FreeRTOS/tasks.c ****  */
 564:..\FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:..\FreeRTOS/tasks.c **** 
 566:..\FreeRTOS/tasks.c **** /*
 567:..\FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:..\FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:..\FreeRTOS/tasks.c ****  * called by the function.
 570:..\FreeRTOS/tasks.c ****  */
 571:..\FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:..\FreeRTOS/tasks.c **** 
 573:..\FreeRTOS/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:..\FreeRTOS/tasks.c **** 
 575:..\FreeRTOS/tasks.c **** #endif
 576:..\FreeRTOS/tasks.c **** 
 577:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 578:..\FreeRTOS/tasks.c **** 
 579:..\FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:..\FreeRTOS/tasks.c **** 
 581:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:..\FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 584:..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 585:..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 586:..\FreeRTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:..\FreeRTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:..\FreeRTOS/tasks.c **** 	{
 589:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 590:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 591:..\FreeRTOS/tasks.c **** 
 592:..\FreeRTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:..\FreeRTOS/tasks.c **** 
 595:..\FreeRTOS/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:..\FreeRTOS/tasks.c **** 		{
 597:..\FreeRTOS/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:..\FreeRTOS/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:..\FreeRTOS/tasks.c **** 			structure. */
 600:..\FreeRTOS/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:..\FreeRTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 12


 602:..\FreeRTOS/tasks.c **** 		}
 603:..\FreeRTOS/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:..\FreeRTOS/tasks.c **** 
 605:..\FreeRTOS/tasks.c **** 
 606:..\FreeRTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:..\FreeRTOS/tasks.c **** 		{
 608:..\FreeRTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:..\FreeRTOS/tasks.c **** 			function - use them. */
 610:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:..\FreeRTOS/tasks.c **** 
 613:..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:..\FreeRTOS/tasks.c **** 			{
 615:..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:..\FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:..\FreeRTOS/tasks.c **** 			}
 619:..\FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:..\FreeRTOS/tasks.c **** 
 621:..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:..\FreeRTOS/tasks.c **** 		}
 624:..\FreeRTOS/tasks.c **** 		else
 625:..\FreeRTOS/tasks.c **** 		{
 626:..\FreeRTOS/tasks.c **** 			xReturn = NULL;
 627:..\FreeRTOS/tasks.c **** 		}
 628:..\FreeRTOS/tasks.c **** 
 629:..\FreeRTOS/tasks.c **** 		return xReturn;
 630:..\FreeRTOS/tasks.c **** 	}
 631:..\FreeRTOS/tasks.c **** 
 632:..\FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 634:..\FreeRTOS/tasks.c **** 
 635:..\FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:..\FreeRTOS/tasks.c **** 
 637:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:..\FreeRTOS/tasks.c **** 	{
 639:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 640:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:..\FreeRTOS/tasks.c **** 
 642:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:..\FreeRTOS/tasks.c **** 
 645:..\FreeRTOS/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:..\FreeRTOS/tasks.c **** 		{
 647:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:..\FreeRTOS/tasks.c **** 			not static allocation is being used. */
 650:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:..\FreeRTOS/tasks.c **** 
 652:..\FreeRTOS/tasks.c **** 			/* Store the stack location in the TCB. */
 653:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:..\FreeRTOS/tasks.c **** 
 655:..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:..\FreeRTOS/tasks.c **** 			{
 657:..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:..\FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 13


 659:..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:..\FreeRTOS/tasks.c **** 			}
 661:..\FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:..\FreeRTOS/tasks.c **** 
 663:..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->pcName,
 665:..\FreeRTOS/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:..\FreeRTOS/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:..\FreeRTOS/tasks.c **** 									pxTaskDefinition->xRegions );
 670:..\FreeRTOS/tasks.c **** 
 671:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 673:..\FreeRTOS/tasks.c **** 		}
 674:..\FreeRTOS/tasks.c **** 
 675:..\FreeRTOS/tasks.c **** 		return xReturn;
 676:..\FreeRTOS/tasks.c **** 	}
 677:..\FreeRTOS/tasks.c **** 
 678:..\FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 680:..\FreeRTOS/tasks.c **** 
 681:..\FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:..\FreeRTOS/tasks.c **** 
 683:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:..\FreeRTOS/tasks.c **** 	{
 685:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 686:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:..\FreeRTOS/tasks.c **** 
 688:..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:..\FreeRTOS/tasks.c **** 
 690:..\FreeRTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:..\FreeRTOS/tasks.c **** 		{
 692:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:..\FreeRTOS/tasks.c **** 			not static allocation is being used. */
 695:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:..\FreeRTOS/tasks.c **** 
 697:..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 698:..\FreeRTOS/tasks.c **** 			{
 699:..\FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 700:..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:..\FreeRTOS/tasks.c **** 
 702:..\FreeRTOS/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:..\FreeRTOS/tasks.c **** 				{
 704:..\FreeRTOS/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:..\FreeRTOS/tasks.c **** 					this task had a statically allocated stack in case it is
 706:..\FreeRTOS/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:..\FreeRTOS/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:..\FreeRTOS/tasks.c **** 				}
 709:..\FreeRTOS/tasks.c **** 				#endif
 710:..\FreeRTOS/tasks.c **** 
 711:..\FreeRTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->pcName,
 713:..\FreeRTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 14


 716:..\FreeRTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:..\FreeRTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 718:..\FreeRTOS/tasks.c **** 
 719:..\FreeRTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 721:..\FreeRTOS/tasks.c **** 			}
 722:..\FreeRTOS/tasks.c **** 		}
 723:..\FreeRTOS/tasks.c **** 
 724:..\FreeRTOS/tasks.c **** 		return xReturn;
 725:..\FreeRTOS/tasks.c **** 	}
 726:..\FreeRTOS/tasks.c **** 
 727:..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 729:..\FreeRTOS/tasks.c **** 
 730:..\FreeRTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:..\FreeRTOS/tasks.c **** 
 732:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:..\FreeRTOS/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:..\FreeRTOS/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:..\FreeRTOS/tasks.c **** 							void * const pvParameters,
 736:..\FreeRTOS/tasks.c **** 							UBaseType_t uxPriority,
 737:..\FreeRTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:..\FreeRTOS/tasks.c **** 	{
 739:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 740:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 741:..\FreeRTOS/tasks.c **** 
 742:..\FreeRTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:..\FreeRTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:..\FreeRTOS/tasks.c **** 		the TCB then the stack. */
 745:..\FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:..\FreeRTOS/tasks.c **** 		{
 747:..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:..\FreeRTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:..\FreeRTOS/tasks.c **** 			allocation is being used. */
 750:..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:..\FreeRTOS/tasks.c **** 
 752:..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 753:..\FreeRTOS/tasks.c **** 			{
 754:..\FreeRTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:..\FreeRTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:..\FreeRTOS/tasks.c **** 				be deleted later if required. */
 757:..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:..\FreeRTOS/tasks.c **** 
 759:..\FreeRTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:..\FreeRTOS/tasks.c **** 				{
 761:..\FreeRTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:..\FreeRTOS/tasks.c **** 					vPortFree( pxNewTCB );
 763:..\FreeRTOS/tasks.c **** 					pxNewTCB = NULL;
 764:..\FreeRTOS/tasks.c **** 				}
 765:..\FreeRTOS/tasks.c **** 			}
 766:..\FreeRTOS/tasks.c **** 		}
 767:..\FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:..\FreeRTOS/tasks.c **** 		{
 769:..\FreeRTOS/tasks.c **** 		StackType_t *pxStack;
 770:..\FreeRTOS/tasks.c **** 
 771:..\FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:..\FreeRTOS/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 15


 773:..\FreeRTOS/tasks.c **** 
 774:..\FreeRTOS/tasks.c **** 			if( pxStack != NULL )
 775:..\FreeRTOS/tasks.c **** 			{
 776:..\FreeRTOS/tasks.c **** 				/* Allocate space for the TCB. */
 777:..\FreeRTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 778:..\FreeRTOS/tasks.c **** 
 779:..\FreeRTOS/tasks.c **** 				if( pxNewTCB != NULL )
 780:..\FreeRTOS/tasks.c **** 				{
 781:..\FreeRTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 782:..\FreeRTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 783:..\FreeRTOS/tasks.c **** 				}
 784:..\FreeRTOS/tasks.c **** 				else
 785:..\FreeRTOS/tasks.c **** 				{
 786:..\FreeRTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:..\FreeRTOS/tasks.c **** 					it again. */
 788:..\FreeRTOS/tasks.c **** 					vPortFree( pxStack );
 789:..\FreeRTOS/tasks.c **** 				}
 790:..\FreeRTOS/tasks.c **** 			}
 791:..\FreeRTOS/tasks.c **** 			else
 792:..\FreeRTOS/tasks.c **** 			{
 793:..\FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
 794:..\FreeRTOS/tasks.c **** 			}
 795:..\FreeRTOS/tasks.c **** 		}
 796:..\FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:..\FreeRTOS/tasks.c **** 
 798:..\FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
 799:..\FreeRTOS/tasks.c **** 		{
 800:..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:..\FreeRTOS/tasks.c **** 			{
 802:..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:..\FreeRTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:..\FreeRTOS/tasks.c **** 			}
 806:..\FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:..\FreeRTOS/tasks.c **** 
 808:..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 809:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 811:..\FreeRTOS/tasks.c **** 		}
 812:..\FreeRTOS/tasks.c **** 		else
 813:..\FreeRTOS/tasks.c **** 		{
 814:..\FreeRTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 815:..\FreeRTOS/tasks.c **** 		}
 816:..\FreeRTOS/tasks.c **** 
 817:..\FreeRTOS/tasks.c **** 		return xReturn;
 818:..\FreeRTOS/tasks.c **** 	}
 819:..\FreeRTOS/tasks.c **** 
 820:..\FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 822:..\FreeRTOS/tasks.c **** 
 823:..\FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:..\FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 826:..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 827:..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 828:..\FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:..\FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 16


 830:..\FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:..\FreeRTOS/tasks.c **** {
 832:..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 833:..\FreeRTOS/tasks.c **** UBaseType_t x;
 834:..\FreeRTOS/tasks.c **** 
 835:..\FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:..\FreeRTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:..\FreeRTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 838:..\FreeRTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:..\FreeRTOS/tasks.c **** 		{
 840:..\FreeRTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:..\FreeRTOS/tasks.c **** 		}
 842:..\FreeRTOS/tasks.c **** 		else
 843:..\FreeRTOS/tasks.c **** 		{
 844:..\FreeRTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:..\FreeRTOS/tasks.c **** 		}
 846:..\FreeRTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:..\FreeRTOS/tasks.c **** 
 849:..\FreeRTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:..\FreeRTOS/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:..\FreeRTOS/tasks.c **** 	{
 852:..\FreeRTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:..\FreeRTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 854:..\FreeRTOS/tasks.c **** 	}
 855:..\FreeRTOS/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:..\FreeRTOS/tasks.c **** 
 857:..\FreeRTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:..\FreeRTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:..\FreeRTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:..\FreeRTOS/tasks.c **** 	by the port. */
 861:..\FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:..\FreeRTOS/tasks.c **** 	{
 863:..\FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 864:..\FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 865:..\FreeRTOS/tasks.c **** 
 866:..\FreeRTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:..\FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 868:..\FreeRTOS/tasks.c **** 
 869:..\FreeRTOS/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:..\FreeRTOS/tasks.c **** 		{
 871:..\FreeRTOS/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:..\FreeRTOS/tasks.c **** 			debugging. */
 873:..\FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:..\FreeRTOS/tasks.c **** 		}
 875:..\FreeRTOS/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:..\FreeRTOS/tasks.c **** 	}
 877:..\FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:..\FreeRTOS/tasks.c **** 	{
 879:..\FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:..\FreeRTOS/tasks.c **** 
 881:..\FreeRTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:..\FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:..\FreeRTOS/tasks.c **** 
 884:..\FreeRTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:..\FreeRTOS/tasks.c **** 		performed. */
 886:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 17


 887:..\FreeRTOS/tasks.c **** 	}
 888:..\FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:..\FreeRTOS/tasks.c **** 
 890:..\FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
 891:..\FreeRTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:..\FreeRTOS/tasks.c **** 	{
 893:..\FreeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:..\FreeRTOS/tasks.c **** 
 895:..\FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:..\FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:..\FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:..\FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 899:..\FreeRTOS/tasks.c **** 		{
 900:..\FreeRTOS/tasks.c **** 			break;
 901:..\FreeRTOS/tasks.c **** 		}
 902:..\FreeRTOS/tasks.c **** 		else
 903:..\FreeRTOS/tasks.c **** 		{
 904:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:..\FreeRTOS/tasks.c **** 		}
 906:..\FreeRTOS/tasks.c **** 	}
 907:..\FreeRTOS/tasks.c **** 
 908:..\FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:..\FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:..\FreeRTOS/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:..\FreeRTOS/tasks.c **** 
 912:..\FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:..\FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
 914:..\FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915:..\FreeRTOS/tasks.c **** 	{
 916:..\FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 917:..\FreeRTOS/tasks.c **** 	}
 918:..\FreeRTOS/tasks.c **** 	else
 919:..\FreeRTOS/tasks.c **** 	{
 920:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:..\FreeRTOS/tasks.c **** 	}
 922:..\FreeRTOS/tasks.c **** 
 923:..\FreeRTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 924:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:..\FreeRTOS/tasks.c **** 	{
 926:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:..\FreeRTOS/tasks.c **** 	}
 929:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:..\FreeRTOS/tasks.c **** 
 931:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 932:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 933:..\FreeRTOS/tasks.c **** 
 934:..\FreeRTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:..\FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 937:..\FreeRTOS/tasks.c **** 
 938:..\FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
 939:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 940:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 941:..\FreeRTOS/tasks.c **** 
 942:..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 18


 944:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:..\FreeRTOS/tasks.c **** 	}
 946:..\FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:..\FreeRTOS/tasks.c **** 
 948:..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:..\FreeRTOS/tasks.c **** 	{
 950:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:..\FreeRTOS/tasks.c **** 	}
 952:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:..\FreeRTOS/tasks.c **** 
 954:..\FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:..\FreeRTOS/tasks.c **** 	{
 956:..\FreeRTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:..\FreeRTOS/tasks.c **** 	}
 958:..\FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:..\FreeRTOS/tasks.c **** 
 960:..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:..\FreeRTOS/tasks.c **** 	{
 962:..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:..\FreeRTOS/tasks.c **** 	}
 964:..\FreeRTOS/tasks.c **** 	#else
 965:..\FreeRTOS/tasks.c **** 	{
 966:..\FreeRTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:..\FreeRTOS/tasks.c **** 		( void ) xRegions;
 968:..\FreeRTOS/tasks.c **** 	}
 969:..\FreeRTOS/tasks.c **** 	#endif
 970:..\FreeRTOS/tasks.c **** 
 971:..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:..\FreeRTOS/tasks.c **** 	{
 973:..\FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 974:..\FreeRTOS/tasks.c **** 		{
 975:..\FreeRTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 976:..\FreeRTOS/tasks.c **** 		}
 977:..\FreeRTOS/tasks.c **** 	}
 978:..\FreeRTOS/tasks.c **** 	#endif
 979:..\FreeRTOS/tasks.c **** 
 980:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:..\FreeRTOS/tasks.c **** 	{
 982:..\FreeRTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 983:..\FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 984:..\FreeRTOS/tasks.c **** 	}
 985:..\FreeRTOS/tasks.c **** 	#endif
 986:..\FreeRTOS/tasks.c **** 
 987:..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:..\FreeRTOS/tasks.c **** 	{
 989:..\FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:..\FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:..\FreeRTOS/tasks.c **** 	}
 992:..\FreeRTOS/tasks.c **** 	#endif
 993:..\FreeRTOS/tasks.c **** 
 994:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:..\FreeRTOS/tasks.c **** 	{
 996:..\FreeRTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:..\FreeRTOS/tasks.c **** 	}
 998:..\FreeRTOS/tasks.c **** 	#endif
 999:..\FreeRTOS/tasks.c **** 
1000:..\FreeRTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 19


1001:..\FreeRTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:..\FreeRTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:..\FreeRTOS/tasks.c **** 	the top of stack variable is updated. */
1004:..\FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:..\FreeRTOS/tasks.c **** 	{
1006:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:..\FreeRTOS/tasks.c **** 	}
1008:..\FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:..\FreeRTOS/tasks.c **** 	{
1010:..\FreeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1011:..\FreeRTOS/tasks.c **** 	}
1012:..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:..\FreeRTOS/tasks.c **** 
1014:..\FreeRTOS/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1015:..\FreeRTOS/tasks.c **** 	{
1016:..\FreeRTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:..\FreeRTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:..\FreeRTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1019:..\FreeRTOS/tasks.c **** 	}
1020:..\FreeRTOS/tasks.c **** 	else
1021:..\FreeRTOS/tasks.c **** 	{
1022:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:..\FreeRTOS/tasks.c **** 	}
1024:..\FreeRTOS/tasks.c **** }
1025:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1026:..\FreeRTOS/tasks.c **** 
1027:..\FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:..\FreeRTOS/tasks.c **** {
1029:..\FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:..\FreeRTOS/tasks.c **** 	updated. */
1031:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
1032:..\FreeRTOS/tasks.c **** 	{
1033:..\FreeRTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
1034:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
1035:..\FreeRTOS/tasks.c **** 		{
1036:..\FreeRTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:..\FreeRTOS/tasks.c **** 			the suspended state - make this the current task. */
1038:..\FreeRTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1039:..\FreeRTOS/tasks.c **** 
1040:..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:..\FreeRTOS/tasks.c **** 			{
1042:..\FreeRTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:..\FreeRTOS/tasks.c **** 				initialisation required.  We will not recover if this call
1044:..\FreeRTOS/tasks.c **** 				fails, but we will report the failure. */
1045:..\FreeRTOS/tasks.c **** 				prvInitialiseTaskLists();
1046:..\FreeRTOS/tasks.c **** 			}
1047:..\FreeRTOS/tasks.c **** 			else
1048:..\FreeRTOS/tasks.c **** 			{
1049:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:..\FreeRTOS/tasks.c **** 			}
1051:..\FreeRTOS/tasks.c **** 		}
1052:..\FreeRTOS/tasks.c **** 		else
1053:..\FreeRTOS/tasks.c **** 		{
1054:..\FreeRTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:..\FreeRTOS/tasks.c **** 			current task if it is the highest priority task to be created
1056:..\FreeRTOS/tasks.c **** 			so far. */
1057:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 20


1058:..\FreeRTOS/tasks.c **** 			{
1059:..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:..\FreeRTOS/tasks.c **** 				{
1061:..\FreeRTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1062:..\FreeRTOS/tasks.c **** 				}
1063:..\FreeRTOS/tasks.c **** 				else
1064:..\FreeRTOS/tasks.c **** 				{
1065:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:..\FreeRTOS/tasks.c **** 				}
1067:..\FreeRTOS/tasks.c **** 			}
1068:..\FreeRTOS/tasks.c **** 			else
1069:..\FreeRTOS/tasks.c **** 			{
1070:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:..\FreeRTOS/tasks.c **** 			}
1072:..\FreeRTOS/tasks.c **** 		}
1073:..\FreeRTOS/tasks.c **** 
1074:..\FreeRTOS/tasks.c **** 		uxTaskNumber++;
1075:..\FreeRTOS/tasks.c **** 
1076:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:..\FreeRTOS/tasks.c **** 		{
1078:..\FreeRTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:..\FreeRTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:..\FreeRTOS/tasks.c **** 		}
1081:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:..\FreeRTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:..\FreeRTOS/tasks.c **** 
1084:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1085:..\FreeRTOS/tasks.c **** 
1086:..\FreeRTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:..\FreeRTOS/tasks.c **** 	}
1088:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1089:..\FreeRTOS/tasks.c **** 
1090:..\FreeRTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1091:..\FreeRTOS/tasks.c **** 	{
1092:..\FreeRTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:..\FreeRTOS/tasks.c **** 		then it should run now. */
1094:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:..\FreeRTOS/tasks.c **** 		{
1096:..\FreeRTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1097:..\FreeRTOS/tasks.c **** 		}
1098:..\FreeRTOS/tasks.c **** 		else
1099:..\FreeRTOS/tasks.c **** 		{
1100:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:..\FreeRTOS/tasks.c **** 		}
1102:..\FreeRTOS/tasks.c **** 	}
1103:..\FreeRTOS/tasks.c **** 	else
1104:..\FreeRTOS/tasks.c **** 	{
1105:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:..\FreeRTOS/tasks.c **** 	}
1107:..\FreeRTOS/tasks.c **** }
1108:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1109:..\FreeRTOS/tasks.c **** 
1110:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:..\FreeRTOS/tasks.c **** 
1112:..\FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:..\FreeRTOS/tasks.c **** 	{
1114:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 21


1115:..\FreeRTOS/tasks.c **** 
1116:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1117:..\FreeRTOS/tasks.c **** 		{
1118:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:..\FreeRTOS/tasks.c **** 			being deleted. */
1120:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:..\FreeRTOS/tasks.c **** 
1122:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready list. */
1123:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:..\FreeRTOS/tasks.c **** 			{
1125:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:..\FreeRTOS/tasks.c **** 			}
1127:..\FreeRTOS/tasks.c **** 			else
1128:..\FreeRTOS/tasks.c **** 			{
1129:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:..\FreeRTOS/tasks.c **** 			}
1131:..\FreeRTOS/tasks.c **** 
1132:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1133:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:..\FreeRTOS/tasks.c **** 			{
1135:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:..\FreeRTOS/tasks.c **** 			}
1137:..\FreeRTOS/tasks.c **** 			else
1138:..\FreeRTOS/tasks.c **** 			{
1139:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:..\FreeRTOS/tasks.c **** 			}
1141:..\FreeRTOS/tasks.c **** 
1142:..\FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:..\FreeRTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:..\FreeRTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:..\FreeRTOS/tasks.c **** 			not return. */
1146:..\FreeRTOS/tasks.c **** 			uxTaskNumber++;
1147:..\FreeRTOS/tasks.c **** 
1148:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1149:..\FreeRTOS/tasks.c **** 			{
1150:..\FreeRTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:..\FreeRTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1152:..\FreeRTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:..\FreeRTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1154:..\FreeRTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:..\FreeRTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:..\FreeRTOS/tasks.c **** 
1157:..\FreeRTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:..\FreeRTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:..\FreeRTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:..\FreeRTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1161:..\FreeRTOS/tasks.c **** 
1162:..\FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:..\FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:..\FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1165:..\FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:..\FreeRTOS/tasks.c **** 				required. */
1167:..\FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:..\FreeRTOS/tasks.c **** 			}
1169:..\FreeRTOS/tasks.c **** 			else
1170:..\FreeRTOS/tasks.c **** 			{
1171:..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 22


1172:..\FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1173:..\FreeRTOS/tasks.c **** 
1174:..\FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:..\FreeRTOS/tasks.c **** 				the task that has just been deleted. */
1176:..\FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1177:..\FreeRTOS/tasks.c **** 			}
1178:..\FreeRTOS/tasks.c **** 
1179:..\FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:..\FreeRTOS/tasks.c **** 		}
1181:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1182:..\FreeRTOS/tasks.c **** 
1183:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:..\FreeRTOS/tasks.c **** 		been deleted. */
1185:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1186:..\FreeRTOS/tasks.c **** 		{
1187:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1188:..\FreeRTOS/tasks.c **** 			{
1189:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1190:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1191:..\FreeRTOS/tasks.c **** 			}
1192:..\FreeRTOS/tasks.c **** 			else
1193:..\FreeRTOS/tasks.c **** 			{
1194:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:..\FreeRTOS/tasks.c **** 			}
1196:..\FreeRTOS/tasks.c **** 		}
1197:..\FreeRTOS/tasks.c **** 	}
1198:..\FreeRTOS/tasks.c **** 
1199:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1201:..\FreeRTOS/tasks.c **** 
1202:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:..\FreeRTOS/tasks.c **** 
1204:..\FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:..\FreeRTOS/tasks.c **** 	{
1206:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
1207:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1208:..\FreeRTOS/tasks.c **** 
1209:..\FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1210:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1211:..\FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1212:..\FreeRTOS/tasks.c **** 
1213:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1214:..\FreeRTOS/tasks.c **** 		{
1215:..\FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:..\FreeRTOS/tasks.c **** 			block. */
1217:..\FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1218:..\FreeRTOS/tasks.c **** 
1219:..\FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:..\FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1221:..\FreeRTOS/tasks.c **** 
1222:..\FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1223:..\FreeRTOS/tasks.c **** 			{
1224:..\FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1225:..\FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:..\FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:..\FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:..\FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 23


1229:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1230:..\FreeRTOS/tasks.c **** 				{
1231:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1232:..\FreeRTOS/tasks.c **** 				}
1233:..\FreeRTOS/tasks.c **** 				else
1234:..\FreeRTOS/tasks.c **** 				{
1235:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:..\FreeRTOS/tasks.c **** 				}
1237:..\FreeRTOS/tasks.c **** 			}
1238:..\FreeRTOS/tasks.c **** 			else
1239:..\FreeRTOS/tasks.c **** 			{
1240:..\FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:..\FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:..\FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
1243:..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1244:..\FreeRTOS/tasks.c **** 				{
1245:..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1246:..\FreeRTOS/tasks.c **** 				}
1247:..\FreeRTOS/tasks.c **** 				else
1248:..\FreeRTOS/tasks.c **** 				{
1249:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:..\FreeRTOS/tasks.c **** 				}
1251:..\FreeRTOS/tasks.c **** 			}
1252:..\FreeRTOS/tasks.c **** 
1253:..\FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:..\FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1255:..\FreeRTOS/tasks.c **** 
1256:..\FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
1257:..\FreeRTOS/tasks.c **** 			{
1258:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:..\FreeRTOS/tasks.c **** 
1260:..\FreeRTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:..\FreeRTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1263:..\FreeRTOS/tasks.c **** 			}
1264:..\FreeRTOS/tasks.c **** 			else
1265:..\FreeRTOS/tasks.c **** 			{
1266:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:..\FreeRTOS/tasks.c **** 			}
1268:..\FreeRTOS/tasks.c **** 		}
1269:..\FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1270:..\FreeRTOS/tasks.c **** 
1271:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1273:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1274:..\FreeRTOS/tasks.c **** 		{
1275:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1276:..\FreeRTOS/tasks.c **** 		}
1277:..\FreeRTOS/tasks.c **** 		else
1278:..\FreeRTOS/tasks.c **** 		{
1279:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:..\FreeRTOS/tasks.c **** 		}
1281:..\FreeRTOS/tasks.c **** 	}
1282:..\FreeRTOS/tasks.c **** 
1283:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1285:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 24


1286:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:..\FreeRTOS/tasks.c **** 
1288:..\FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:..\FreeRTOS/tasks.c **** 	{
1290:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1291:..\FreeRTOS/tasks.c **** 
1292:..\FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:..\FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1294:..\FreeRTOS/tasks.c **** 		{
1295:..\FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1296:..\FreeRTOS/tasks.c **** 			vTaskSuspendAll();
1297:..\FreeRTOS/tasks.c **** 			{
1298:..\FreeRTOS/tasks.c **** 				traceTASK_DELAY();
1299:..\FreeRTOS/tasks.c **** 
1300:..\FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
1301:..\FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:..\FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:..\FreeRTOS/tasks.c **** 				is resumed.
1304:..\FreeRTOS/tasks.c **** 
1305:..\FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:..\FreeRTOS/tasks.c **** 				executing task. */
1307:..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1308:..\FreeRTOS/tasks.c **** 			}
1309:..\FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1310:..\FreeRTOS/tasks.c **** 		}
1311:..\FreeRTOS/tasks.c **** 		else
1312:..\FreeRTOS/tasks.c **** 		{
1313:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:..\FreeRTOS/tasks.c **** 		}
1315:..\FreeRTOS/tasks.c **** 
1316:..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1318:..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:..\FreeRTOS/tasks.c **** 		{
1320:..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1321:..\FreeRTOS/tasks.c **** 		}
1322:..\FreeRTOS/tasks.c **** 		else
1323:..\FreeRTOS/tasks.c **** 		{
1324:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:..\FreeRTOS/tasks.c **** 		}
1326:..\FreeRTOS/tasks.c **** 	}
1327:..\FreeRTOS/tasks.c **** 
1328:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1330:..\FreeRTOS/tasks.c **** 
1331:..\FreeRTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:..\FreeRTOS/tasks.c **** 
1333:..\FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:..\FreeRTOS/tasks.c **** 	{
1335:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
1336:..\FreeRTOS/tasks.c **** 	List_t *pxStateList;
1337:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:..\FreeRTOS/tasks.c **** 
1339:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1340:..\FreeRTOS/tasks.c **** 
1341:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 25


1343:..\FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:..\FreeRTOS/tasks.c **** 			eReturn = eRunning;
1345:..\FreeRTOS/tasks.c **** 		}
1346:..\FreeRTOS/tasks.c **** 		else
1347:..\FreeRTOS/tasks.c **** 		{
1348:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1349:..\FreeRTOS/tasks.c **** 			{
1350:..\FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:..\FreeRTOS/tasks.c **** 			}
1352:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1353:..\FreeRTOS/tasks.c **** 
1354:..\FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:..\FreeRTOS/tasks.c **** 			{
1356:..\FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:..\FreeRTOS/tasks.c **** 				lists. */
1358:..\FreeRTOS/tasks.c **** 				eReturn = eBlocked;
1359:..\FreeRTOS/tasks.c **** 			}
1360:..\FreeRTOS/tasks.c **** 
1361:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:..\FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:..\FreeRTOS/tasks.c **** 				{
1364:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:..\FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:..\FreeRTOS/tasks.c **** 					indefinitely? */
1367:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:..\FreeRTOS/tasks.c **** 					{
1369:..\FreeRTOS/tasks.c **** 						eReturn = eSuspended;
1370:..\FreeRTOS/tasks.c **** 					}
1371:..\FreeRTOS/tasks.c **** 					else
1372:..\FreeRTOS/tasks.c **** 					{
1373:..\FreeRTOS/tasks.c **** 						eReturn = eBlocked;
1374:..\FreeRTOS/tasks.c **** 					}
1375:..\FreeRTOS/tasks.c **** 				}
1376:..\FreeRTOS/tasks.c **** 			#endif
1377:..\FreeRTOS/tasks.c **** 
1378:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:..\FreeRTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:..\FreeRTOS/tasks.c **** 				{
1381:..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:..\FreeRTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:..\FreeRTOS/tasks.c **** 					all. */
1384:..\FreeRTOS/tasks.c **** 					eReturn = eDeleted;
1385:..\FreeRTOS/tasks.c **** 				}
1386:..\FreeRTOS/tasks.c **** 			#endif
1387:..\FreeRTOS/tasks.c **** 
1388:..\FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:..\FreeRTOS/tasks.c **** 			{
1390:..\FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:..\FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1392:..\FreeRTOS/tasks.c **** 				eReturn = eReady;
1393:..\FreeRTOS/tasks.c **** 			}
1394:..\FreeRTOS/tasks.c **** 		}
1395:..\FreeRTOS/tasks.c **** 
1396:..\FreeRTOS/tasks.c **** 		return eReturn;
1397:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:..\FreeRTOS/tasks.c **** 
1399:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 26


1400:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1401:..\FreeRTOS/tasks.c **** 
1402:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:..\FreeRTOS/tasks.c **** 
1404:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:..\FreeRTOS/tasks.c **** 	{
1406:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1407:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1408:..\FreeRTOS/tasks.c **** 
1409:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1410:..\FreeRTOS/tasks.c **** 		{
1411:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:..\FreeRTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1414:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1415:..\FreeRTOS/tasks.c **** 		}
1416:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1417:..\FreeRTOS/tasks.c **** 
1418:..\FreeRTOS/tasks.c **** 		return uxReturn;
1419:..\FreeRTOS/tasks.c **** 	}
1420:..\FreeRTOS/tasks.c **** 
1421:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1423:..\FreeRTOS/tasks.c **** 
1424:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:..\FreeRTOS/tasks.c **** 
1426:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:..\FreeRTOS/tasks.c **** 	{
1428:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1429:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:..\FreeRTOS/tasks.c **** 
1431:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:..\FreeRTOS/tasks.c **** 		provided on the following link:
1446:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1448:..\FreeRTOS/tasks.c **** 
1449:..\FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1450:..\FreeRTOS/tasks.c **** 		{
1451:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:..\FreeRTOS/tasks.c **** 			task that is being queried. */
1453:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1454:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1455:..\FreeRTOS/tasks.c **** 		}
1456:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 27


1457:..\FreeRTOS/tasks.c **** 
1458:..\FreeRTOS/tasks.c **** 		return uxReturn;
1459:..\FreeRTOS/tasks.c **** 	}
1460:..\FreeRTOS/tasks.c **** 
1461:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1463:..\FreeRTOS/tasks.c **** 
1464:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:..\FreeRTOS/tasks.c **** 
1466:..\FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:..\FreeRTOS/tasks.c **** 	{
1468:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1469:..\FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1471:..\FreeRTOS/tasks.c **** 
1472:..\FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1473:..\FreeRTOS/tasks.c **** 
1474:..\FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1475:..\FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1476:..\FreeRTOS/tasks.c **** 		{
1477:..\FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1478:..\FreeRTOS/tasks.c **** 		}
1479:..\FreeRTOS/tasks.c **** 		else
1480:..\FreeRTOS/tasks.c **** 		{
1481:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:..\FreeRTOS/tasks.c **** 		}
1483:..\FreeRTOS/tasks.c **** 
1484:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1485:..\FreeRTOS/tasks.c **** 		{
1486:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:..\FreeRTOS/tasks.c **** 			task that is being changed. */
1488:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1489:..\FreeRTOS/tasks.c **** 
1490:..\FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:..\FreeRTOS/tasks.c **** 
1492:..\FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:..\FreeRTOS/tasks.c **** 			{
1494:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:..\FreeRTOS/tasks.c **** 			}
1496:..\FreeRTOS/tasks.c **** 			#else
1497:..\FreeRTOS/tasks.c **** 			{
1498:..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:..\FreeRTOS/tasks.c **** 			}
1500:..\FreeRTOS/tasks.c **** 			#endif
1501:..\FreeRTOS/tasks.c **** 
1502:..\FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1503:..\FreeRTOS/tasks.c **** 			{
1504:..\FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1505:..\FreeRTOS/tasks.c **** 				priority than the calling task. */
1506:..\FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1507:..\FreeRTOS/tasks.c **** 				{
1508:..\FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1509:..\FreeRTOS/tasks.c **** 					{
1510:..\FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1511:..\FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1512:..\FreeRTOS/tasks.c **** 						raised above that of the running task? */
1513:..\FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 28


1514:..\FreeRTOS/tasks.c **** 						{
1515:..\FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1516:..\FreeRTOS/tasks.c **** 						}
1517:..\FreeRTOS/tasks.c **** 						else
1518:..\FreeRTOS/tasks.c **** 						{
1519:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:..\FreeRTOS/tasks.c **** 						}
1521:..\FreeRTOS/tasks.c **** 					}
1522:..\FreeRTOS/tasks.c **** 					else
1523:..\FreeRTOS/tasks.c **** 					{
1524:..\FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1525:..\FreeRTOS/tasks.c **** 						but the running task must already be the highest
1526:..\FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1527:..\FreeRTOS/tasks.c **** 					}
1528:..\FreeRTOS/tasks.c **** 				}
1529:..\FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1530:..\FreeRTOS/tasks.c **** 				{
1531:..\FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1532:..\FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1533:..\FreeRTOS/tasks.c **** 					is ready to execute. */
1534:..\FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1535:..\FreeRTOS/tasks.c **** 				}
1536:..\FreeRTOS/tasks.c **** 				else
1537:..\FreeRTOS/tasks.c **** 				{
1538:..\FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1539:..\FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1540:..\FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1541:..\FreeRTOS/tasks.c **** 				}
1542:..\FreeRTOS/tasks.c **** 
1543:..\FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:..\FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1545:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:..\FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1547:..\FreeRTOS/tasks.c **** 
1548:..\FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:..\FreeRTOS/tasks.c **** 				{
1550:..\FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1551:..\FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1552:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:..\FreeRTOS/tasks.c **** 					{
1554:..\FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:..\FreeRTOS/tasks.c **** 					}
1556:..\FreeRTOS/tasks.c **** 					else
1557:..\FreeRTOS/tasks.c **** 					{
1558:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:..\FreeRTOS/tasks.c **** 					}
1560:..\FreeRTOS/tasks.c **** 
1561:..\FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1562:..\FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:..\FreeRTOS/tasks.c **** 				}
1564:..\FreeRTOS/tasks.c **** 				#else
1565:..\FreeRTOS/tasks.c **** 				{
1566:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:..\FreeRTOS/tasks.c **** 				}
1568:..\FreeRTOS/tasks.c **** 				#endif
1569:..\FreeRTOS/tasks.c **** 
1570:..\FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 29


1571:..\FreeRTOS/tasks.c **** 				being used for anything else. */
1572:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1573:..\FreeRTOS/tasks.c **** 				{
1574:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1575:..\FreeRTOS/tasks.c **** 				}
1576:..\FreeRTOS/tasks.c **** 				else
1577:..\FreeRTOS/tasks.c **** 				{
1578:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:..\FreeRTOS/tasks.c **** 				}
1580:..\FreeRTOS/tasks.c **** 
1581:..\FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:..\FreeRTOS/tasks.c **** 				nothing more than change its priority variable. However, if
1583:..\FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:..\FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1585:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1586:..\FreeRTOS/tasks.c **** 				{
1587:..\FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:..\FreeRTOS/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:..\FreeRTOS/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1591:..\FreeRTOS/tasks.c **** 					{
1592:..\FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1593:..\FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1594:..\FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1595:..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:..\FreeRTOS/tasks.c **** 					}
1597:..\FreeRTOS/tasks.c **** 					else
1598:..\FreeRTOS/tasks.c **** 					{
1599:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:..\FreeRTOS/tasks.c **** 					}
1601:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1602:..\FreeRTOS/tasks.c **** 				}
1603:..\FreeRTOS/tasks.c **** 				else
1604:..\FreeRTOS/tasks.c **** 				{
1605:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:..\FreeRTOS/tasks.c **** 				}
1607:..\FreeRTOS/tasks.c **** 
1608:..\FreeRTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
1609:..\FreeRTOS/tasks.c **** 				{
1610:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1611:..\FreeRTOS/tasks.c **** 				}
1612:..\FreeRTOS/tasks.c **** 				else
1613:..\FreeRTOS/tasks.c **** 				{
1614:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:..\FreeRTOS/tasks.c **** 				}
1616:..\FreeRTOS/tasks.c **** 
1617:..\FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:..\FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1619:..\FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:..\FreeRTOS/tasks.c **** 			}
1621:..\FreeRTOS/tasks.c **** 		}
1622:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1623:..\FreeRTOS/tasks.c **** 	}
1624:..\FreeRTOS/tasks.c **** 
1625:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1627:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 30


1628:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:..\FreeRTOS/tasks.c **** 
1630:..\FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:..\FreeRTOS/tasks.c **** 	{
1632:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1633:..\FreeRTOS/tasks.c **** 
1634:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1635:..\FreeRTOS/tasks.c **** 		{
1636:..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:..\FreeRTOS/tasks.c **** 			being suspended. */
1638:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1639:..\FreeRTOS/tasks.c **** 
1640:..\FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:..\FreeRTOS/tasks.c **** 
1642:..\FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:..\FreeRTOS/tasks.c **** 			suspended list. */
1644:..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1645:..\FreeRTOS/tasks.c **** 			{
1646:..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:..\FreeRTOS/tasks.c **** 			}
1648:..\FreeRTOS/tasks.c **** 			else
1649:..\FreeRTOS/tasks.c **** 			{
1650:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:..\FreeRTOS/tasks.c **** 			}
1652:..\FreeRTOS/tasks.c **** 
1653:..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1654:..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1655:..\FreeRTOS/tasks.c **** 			{
1656:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1657:..\FreeRTOS/tasks.c **** 			}
1658:..\FreeRTOS/tasks.c **** 			else
1659:..\FreeRTOS/tasks.c **** 			{
1660:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:..\FreeRTOS/tasks.c **** 			}
1662:..\FreeRTOS/tasks.c **** 
1663:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1664:..\FreeRTOS/tasks.c **** 
1665:..\FreeRTOS/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:..\FreeRTOS/tasks.c **** 			{
1667:..\FreeRTOS/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1668:..\FreeRTOS/tasks.c **** 				{
1669:..\FreeRTOS/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:..\FreeRTOS/tasks.c **** 					now suspended, so no notification was received. */
1671:..\FreeRTOS/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1672:..\FreeRTOS/tasks.c **** 				}
1673:..\FreeRTOS/tasks.c **** 			}
1674:..\FreeRTOS/tasks.c **** 			#endif
1675:..\FreeRTOS/tasks.c **** 		}
1676:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1677:..\FreeRTOS/tasks.c **** 
1678:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1679:..\FreeRTOS/tasks.c **** 		{
1680:..\FreeRTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:..\FreeRTOS/tasks.c **** 			task that is now in the Suspended state. */
1682:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1683:..\FreeRTOS/tasks.c **** 			{
1684:..\FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 31


1685:..\FreeRTOS/tasks.c **** 			}
1686:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1687:..\FreeRTOS/tasks.c **** 		}
1688:..\FreeRTOS/tasks.c **** 		else
1689:..\FreeRTOS/tasks.c **** 		{
1690:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:..\FreeRTOS/tasks.c **** 		}
1692:..\FreeRTOS/tasks.c **** 
1693:..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1694:..\FreeRTOS/tasks.c **** 		{
1695:..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1696:..\FreeRTOS/tasks.c **** 			{
1697:..\FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1698:..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1699:..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1700:..\FreeRTOS/tasks.c **** 			}
1701:..\FreeRTOS/tasks.c **** 			else
1702:..\FreeRTOS/tasks.c **** 			{
1703:..\FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:..\FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:..\FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1706:..\FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:..\FreeRTOS/tasks.c **** 				{
1708:..\FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:..\FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:..\FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1711:..\FreeRTOS/tasks.c **** 					is. */
1712:..\FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1713:..\FreeRTOS/tasks.c **** 				}
1714:..\FreeRTOS/tasks.c **** 				else
1715:..\FreeRTOS/tasks.c **** 				{
1716:..\FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1717:..\FreeRTOS/tasks.c **** 				}
1718:..\FreeRTOS/tasks.c **** 			}
1719:..\FreeRTOS/tasks.c **** 		}
1720:..\FreeRTOS/tasks.c **** 		else
1721:..\FreeRTOS/tasks.c **** 		{
1722:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:..\FreeRTOS/tasks.c **** 		}
1724:..\FreeRTOS/tasks.c **** 	}
1725:..\FreeRTOS/tasks.c **** 
1726:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:..\FreeRTOS/tasks.c **** 
1729:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:..\FreeRTOS/tasks.c **** 
1731:..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:..\FreeRTOS/tasks.c **** 	{
  27              		.loc 1 1732 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1733:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1734:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1735:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 32


1736:..\FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:..\FreeRTOS/tasks.c **** 		section. */
1738:..\FreeRTOS/tasks.c **** 
1739:..\FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:..\FreeRTOS/tasks.c **** 		configASSERT( xTask );
1741:..\FreeRTOS/tasks.c **** 
1742:..\FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:..\FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1743 0
  34 0000 0D4B     		ldr	r3, .L10
  35 0002 4269     		ldr	r2, [r0, #20]
  36 0004 9A42     		cmp	r2, r3
  37 0006 01D1     		bne	.L5
  38 0008 0123     		movs	r3, #1
  39 000a 00E0     		b	.L2
  40              	.L5:
  41 000c 0023     		movs	r3, #0
  42              	.L2:
  43              		.loc 1 1743 0 is_stmt 0 discriminator 4
  44 000e 002B     		cmp	r3, #0
  45 0010 0BD0     		beq	.L6
1744:..\FreeRTOS/tasks.c **** 		{
1745:..\FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:..\FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  46              		.loc 1 1746 0 is_stmt 1
  47 0012 816A     		ldr	r1, [r0, #40]
  48 0014 084A     		ldr	r2, .L10
  49 0016 1432     		adds	r2, r2, #20
  50 0018 9142     		cmp	r1, r2
  51 001a 08D0     		beq	.L7
1747:..\FreeRTOS/tasks.c **** 			{
1748:..\FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:..\FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  52              		.loc 1 1750 0
  53 001c 0029     		cmp	r1, #0
  54 001e 00D0     		beq	.L4
  55 0020 0023     		movs	r3, #0
  56              	.L4:
  57              		.loc 1 1750 0 is_stmt 0 discriminator 4
  58 0022 002B     		cmp	r3, #0
  59 0024 05D1     		bne	.L9
1733:..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  60              		.loc 1 1733 0 is_stmt 1
  61 0026 0020     		movs	r0, #0
  62              	.LVL1:
  63 0028 04E0     		b	.L3
  64              	.LVL2:
  65              	.L6:
  66 002a 0020     		movs	r0, #0
  67              	.LVL3:
  68 002c 02E0     		b	.L3
  69              	.LVL4:
  70              	.L7:
  71 002e 0020     		movs	r0, #0
  72              	.LVL5:
  73 0030 00E0     		b	.L3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 33


  74              	.LVL6:
  75              	.L9:
1751:..\FreeRTOS/tasks.c **** 				{
1752:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
  76              		.loc 1 1752 0
  77 0032 0120     		movs	r0, #1
  78              	.LVL7:
  79              	.L3:
1753:..\FreeRTOS/tasks.c **** 				}
1754:..\FreeRTOS/tasks.c **** 				else
1755:..\FreeRTOS/tasks.c **** 				{
1756:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:..\FreeRTOS/tasks.c **** 				}
1758:..\FreeRTOS/tasks.c **** 			}
1759:..\FreeRTOS/tasks.c **** 			else
1760:..\FreeRTOS/tasks.c **** 			{
1761:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:..\FreeRTOS/tasks.c **** 			}
1763:..\FreeRTOS/tasks.c **** 		}
1764:..\FreeRTOS/tasks.c **** 		else
1765:..\FreeRTOS/tasks.c **** 		{
1766:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:..\FreeRTOS/tasks.c **** 		}
1768:..\FreeRTOS/tasks.c **** 
1769:..\FreeRTOS/tasks.c **** 		return xReturn;
1770:..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  80              		.loc 1 1770 0
  81              		@ sp needed
  82 0034 7047     		bx	lr
  83              	.L11:
  84 0036 C046     		.align	2
  85              	.L10:
  86 0038 00000000 		.word	.LANCHOR0
  87              		.cfi_endproc
  88              	.LFE43:
  89              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  90              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  91              		.align	2
  92              		.code	16
  93              		.thumb_func
  94              		.type	prvTaskCheckFreeStackSpace, %function
  95              	prvTaskCheckFreeStackSpace:
  96              	.LFB69:
1771:..\FreeRTOS/tasks.c **** 
1772:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1774:..\FreeRTOS/tasks.c **** 
1775:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:..\FreeRTOS/tasks.c **** 
1777:..\FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:..\FreeRTOS/tasks.c **** 	{
1779:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1780:..\FreeRTOS/tasks.c **** 
1781:..\FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1783:..\FreeRTOS/tasks.c **** 
1784:..\FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 34


1785:..\FreeRTOS/tasks.c **** 		currently executing task. */
1786:..\FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1787:..\FreeRTOS/tasks.c **** 		{
1788:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1789:..\FreeRTOS/tasks.c **** 			{
1790:..\FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1791:..\FreeRTOS/tasks.c **** 				{
1792:..\FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:..\FreeRTOS/tasks.c **** 
1794:..\FreeRTOS/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:..\FreeRTOS/tasks.c **** 					suspended because this is inside a critical section. */
1796:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1797:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1798:..\FreeRTOS/tasks.c **** 
1799:..\FreeRTOS/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1801:..\FreeRTOS/tasks.c **** 					{
1802:..\FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:..\FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1804:..\FreeRTOS/tasks.c **** 						next yield. */
1805:..\FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1806:..\FreeRTOS/tasks.c **** 					}
1807:..\FreeRTOS/tasks.c **** 					else
1808:..\FreeRTOS/tasks.c **** 					{
1809:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:..\FreeRTOS/tasks.c **** 					}
1811:..\FreeRTOS/tasks.c **** 				}
1812:..\FreeRTOS/tasks.c **** 				else
1813:..\FreeRTOS/tasks.c **** 				{
1814:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:..\FreeRTOS/tasks.c **** 				}
1816:..\FreeRTOS/tasks.c **** 			}
1817:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1818:..\FreeRTOS/tasks.c **** 		}
1819:..\FreeRTOS/tasks.c **** 		else
1820:..\FreeRTOS/tasks.c **** 		{
1821:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:..\FreeRTOS/tasks.c **** 		}
1823:..\FreeRTOS/tasks.c **** 	}
1824:..\FreeRTOS/tasks.c **** 
1825:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:..\FreeRTOS/tasks.c **** 
1827:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1828:..\FreeRTOS/tasks.c **** 
1829:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:..\FreeRTOS/tasks.c **** 
1831:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:..\FreeRTOS/tasks.c **** 	{
1833:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1834:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1835:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:..\FreeRTOS/tasks.c **** 
1837:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1838:..\FreeRTOS/tasks.c **** 
1839:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 35


1842:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:..\FreeRTOS/tasks.c **** 		provided on the following link:
1854:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1856:..\FreeRTOS/tasks.c **** 
1857:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1858:..\FreeRTOS/tasks.c **** 		{
1859:..\FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1860:..\FreeRTOS/tasks.c **** 			{
1861:..\FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:..\FreeRTOS/tasks.c **** 
1863:..\FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1865:..\FreeRTOS/tasks.c **** 				{
1866:..\FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:..\FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1868:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1869:..\FreeRTOS/tasks.c **** 					{
1870:..\FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1871:..\FreeRTOS/tasks.c **** 					}
1872:..\FreeRTOS/tasks.c **** 					else
1873:..\FreeRTOS/tasks.c **** 					{
1874:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:..\FreeRTOS/tasks.c **** 					}
1876:..\FreeRTOS/tasks.c **** 
1877:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:..\FreeRTOS/tasks.c **** 				}
1880:..\FreeRTOS/tasks.c **** 				else
1881:..\FreeRTOS/tasks.c **** 				{
1882:..\FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:..\FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:..\FreeRTOS/tasks.c **** 					unsuspended. */
1885:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1886:..\FreeRTOS/tasks.c **** 				}
1887:..\FreeRTOS/tasks.c **** 			}
1888:..\FreeRTOS/tasks.c **** 			else
1889:..\FreeRTOS/tasks.c **** 			{
1890:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:..\FreeRTOS/tasks.c **** 			}
1892:..\FreeRTOS/tasks.c **** 		}
1893:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:..\FreeRTOS/tasks.c **** 
1895:..\FreeRTOS/tasks.c **** 		return xYieldRequired;
1896:..\FreeRTOS/tasks.c **** 	}
1897:..\FreeRTOS/tasks.c **** 
1898:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 36


1899:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1900:..\FreeRTOS/tasks.c **** 
1901:..\FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1902:..\FreeRTOS/tasks.c **** {
1903:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
1904:..\FreeRTOS/tasks.c **** 
1905:..\FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:..\FreeRTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:..\FreeRTOS/tasks.c **** 	{
1908:..\FreeRTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:..\FreeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:..\FreeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:..\FreeRTOS/tasks.c **** 
1912:..\FreeRTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:..\FreeRTOS/tasks.c **** 		address of the RAM then create the idle task. */
1914:..\FreeRTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:..\FreeRTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:..\FreeRTOS/tasks.c **** 												configIDLE_TASK_NAME,
1917:..\FreeRTOS/tasks.c **** 												ulIdleTaskStackSize,
1918:..\FreeRTOS/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:..\FreeRTOS/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:..\FreeRTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1921:..\FreeRTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:..\FreeRTOS/tasks.c **** 
1923:..\FreeRTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:..\FreeRTOS/tasks.c **** 		{
1925:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
1926:..\FreeRTOS/tasks.c **** 		}
1927:..\FreeRTOS/tasks.c **** 		else
1928:..\FreeRTOS/tasks.c **** 		{
1929:..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
1930:..\FreeRTOS/tasks.c **** 		}
1931:..\FreeRTOS/tasks.c **** 	}
1932:..\FreeRTOS/tasks.c **** 	#else
1933:..\FreeRTOS/tasks.c **** 	{
1934:..\FreeRTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:..\FreeRTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1936:..\FreeRTOS/tasks.c **** 								configIDLE_TASK_NAME,
1937:..\FreeRTOS/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:..\FreeRTOS/tasks.c **** 								( void * ) NULL,
1939:..\FreeRTOS/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:..\FreeRTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:..\FreeRTOS/tasks.c **** 	}
1942:..\FreeRTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:..\FreeRTOS/tasks.c **** 
1944:..\FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:..\FreeRTOS/tasks.c **** 	{
1946:..\FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1947:..\FreeRTOS/tasks.c **** 		{
1948:..\FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1949:..\FreeRTOS/tasks.c **** 		}
1950:..\FreeRTOS/tasks.c **** 		else
1951:..\FreeRTOS/tasks.c **** 		{
1952:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:..\FreeRTOS/tasks.c **** 		}
1954:..\FreeRTOS/tasks.c **** 	}
1955:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 37


1956:..\FreeRTOS/tasks.c **** 
1957:..\FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
1958:..\FreeRTOS/tasks.c **** 	{
1959:..\FreeRTOS/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:..\FreeRTOS/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:..\FreeRTOS/tasks.c **** 		the only macro called by the function. */
1962:..\FreeRTOS/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:..\FreeRTOS/tasks.c **** 		{
1964:..\FreeRTOS/tasks.c **** 			freertos_tasks_c_additions_init();
1965:..\FreeRTOS/tasks.c **** 		}
1966:..\FreeRTOS/tasks.c **** 		#endif
1967:..\FreeRTOS/tasks.c **** 
1968:..\FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:..\FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:..\FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:..\FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:..\FreeRTOS/tasks.c **** 		starts to run. */
1973:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:..\FreeRTOS/tasks.c **** 
1975:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:..\FreeRTOS/tasks.c **** 		{
1977:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:..\FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1979:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:..\FreeRTOS/tasks.c **** 		}
1981:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:..\FreeRTOS/tasks.c **** 
1983:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1984:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
1985:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1986:..\FreeRTOS/tasks.c **** 
1987:..\FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:..\FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:..\FreeRTOS/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:..\FreeRTOS/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:..\FreeRTOS/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:..\FreeRTOS/tasks.c **** 		FreeRTOSConfig.h file. */
1993:..\FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:..\FreeRTOS/tasks.c **** 
1995:..\FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:..\FreeRTOS/tasks.c **** 		portable interface. */
1997:..\FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1998:..\FreeRTOS/tasks.c **** 		{
1999:..\FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:..\FreeRTOS/tasks.c **** 			function will not return. */
2001:..\FreeRTOS/tasks.c **** 		}
2002:..\FreeRTOS/tasks.c **** 		else
2003:..\FreeRTOS/tasks.c **** 		{
2004:..\FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:..\FreeRTOS/tasks.c **** 		}
2006:..\FreeRTOS/tasks.c **** 	}
2007:..\FreeRTOS/tasks.c **** 	else
2008:..\FreeRTOS/tasks.c **** 	{
2009:..\FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:..\FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:..\FreeRTOS/tasks.c **** 		or the timer task. */
2012:..\FreeRTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 38


2013:..\FreeRTOS/tasks.c **** 	}
2014:..\FreeRTOS/tasks.c **** 
2015:..\FreeRTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:..\FreeRTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:..\FreeRTOS/tasks.c **** 	( void ) xIdleTaskHandle;
2018:..\FreeRTOS/tasks.c **** }
2019:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2020:..\FreeRTOS/tasks.c **** 
2021:..\FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2022:..\FreeRTOS/tasks.c **** {
2023:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:..\FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:..\FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:..\FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
2028:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
2029:..\FreeRTOS/tasks.c **** }
2030:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2031:..\FreeRTOS/tasks.c **** 
2032:..\FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2033:..\FreeRTOS/tasks.c **** {
2034:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:..\FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:..\FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:..\FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
2038:..\FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
2039:..\FreeRTOS/tasks.c **** }
2040:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2041:..\FreeRTOS/tasks.c **** 
2042:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:..\FreeRTOS/tasks.c **** 
2044:..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:..\FreeRTOS/tasks.c **** 	{
2046:..\FreeRTOS/tasks.c **** 	TickType_t xReturn;
2047:..\FreeRTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:..\FreeRTOS/tasks.c **** 
2049:..\FreeRTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:..\FreeRTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:..\FreeRTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:..\FreeRTOS/tasks.c **** 		running. */
2053:..\FreeRTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:..\FreeRTOS/tasks.c **** 		{
2055:..\FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:..\FreeRTOS/tasks.c **** 			{
2057:..\FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:..\FreeRTOS/tasks.c **** 			}
2059:..\FreeRTOS/tasks.c **** 		}
2060:..\FreeRTOS/tasks.c **** 		#else
2061:..\FreeRTOS/tasks.c **** 		{
2062:..\FreeRTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:..\FreeRTOS/tasks.c **** 
2064:..\FreeRTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:..\FreeRTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:..\FreeRTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:..\FreeRTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:..\FreeRTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:..\FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 39


2070:..\FreeRTOS/tasks.c **** 			{
2071:..\FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:..\FreeRTOS/tasks.c **** 			}
2073:..\FreeRTOS/tasks.c **** 		}
2074:..\FreeRTOS/tasks.c **** 		#endif
2075:..\FreeRTOS/tasks.c **** 
2076:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:..\FreeRTOS/tasks.c **** 		{
2078:..\FreeRTOS/tasks.c **** 			xReturn = 0;
2079:..\FreeRTOS/tasks.c **** 		}
2080:..\FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:..\FreeRTOS/tasks.c **** 		{
2082:..\FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:..\FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:..\FreeRTOS/tasks.c **** 			processed. */
2085:..\FreeRTOS/tasks.c **** 			xReturn = 0;
2086:..\FreeRTOS/tasks.c **** 		}
2087:..\FreeRTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:..\FreeRTOS/tasks.c **** 		{
2089:..\FreeRTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:..\FreeRTOS/tasks.c **** 			idle priority.  This path can only be reached if
2091:..\FreeRTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:..\FreeRTOS/tasks.c **** 			xReturn = 0;
2093:..\FreeRTOS/tasks.c **** 		}
2094:..\FreeRTOS/tasks.c **** 		else
2095:..\FreeRTOS/tasks.c **** 		{
2096:..\FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:..\FreeRTOS/tasks.c **** 		}
2098:..\FreeRTOS/tasks.c **** 
2099:..\FreeRTOS/tasks.c **** 		return xReturn;
2100:..\FreeRTOS/tasks.c **** 	}
2101:..\FreeRTOS/tasks.c **** 
2102:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2104:..\FreeRTOS/tasks.c **** 
2105:..\FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:..\FreeRTOS/tasks.c **** {
2107:..\FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
2108:..\FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2109:..\FreeRTOS/tasks.c **** 
2110:..\FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:..\FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2113:..\FreeRTOS/tasks.c **** 
2114:..\FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:..\FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:..\FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:..\FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:..\FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2120:..\FreeRTOS/tasks.c **** 	{
2121:..\FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
2122:..\FreeRTOS/tasks.c **** 
2123:..\FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2124:..\FreeRTOS/tasks.c **** 		{
2125:..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2126:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 40


2127:..\FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:..\FreeRTOS/tasks.c **** 				appropriate ready list. */
2129:..\FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2130:..\FreeRTOS/tasks.c **** 				{
2131:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2132:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2133:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2134:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2135:..\FreeRTOS/tasks.c **** 
2136:..\FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:..\FreeRTOS/tasks.c **** 					task then a yield must be performed. */
2138:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2139:..\FreeRTOS/tasks.c **** 					{
2140:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2141:..\FreeRTOS/tasks.c **** 					}
2142:..\FreeRTOS/tasks.c **** 					else
2143:..\FreeRTOS/tasks.c **** 					{
2144:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:..\FreeRTOS/tasks.c **** 					}
2146:..\FreeRTOS/tasks.c **** 				}
2147:..\FreeRTOS/tasks.c **** 
2148:..\FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2149:..\FreeRTOS/tasks.c **** 				{
2150:..\FreeRTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:..\FreeRTOS/tasks.c **** 					which may have prevented the next unblock time from being
2152:..\FreeRTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:..\FreeRTOS/tasks.c **** 					important for low power tickless implementations, where
2154:..\FreeRTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:..\FreeRTOS/tasks.c **** 					state. */
2156:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
2157:..\FreeRTOS/tasks.c **** 				}
2158:..\FreeRTOS/tasks.c **** 
2159:..\FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:..\FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:..\FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:..\FreeRTOS/tasks.c **** 				time. */
2163:..\FreeRTOS/tasks.c **** 				{
2164:..\FreeRTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2165:..\FreeRTOS/tasks.c **** 
2166:..\FreeRTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2167:..\FreeRTOS/tasks.c **** 					{
2168:..\FreeRTOS/tasks.c **** 						do
2169:..\FreeRTOS/tasks.c **** 						{
2170:..\FreeRTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2171:..\FreeRTOS/tasks.c **** 							{
2172:..\FreeRTOS/tasks.c **** 								xYieldPending = pdTRUE;
2173:..\FreeRTOS/tasks.c **** 							}
2174:..\FreeRTOS/tasks.c **** 							else
2175:..\FreeRTOS/tasks.c **** 							{
2176:..\FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:..\FreeRTOS/tasks.c **** 							}
2178:..\FreeRTOS/tasks.c **** 							--uxPendedCounts;
2179:..\FreeRTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2180:..\FreeRTOS/tasks.c **** 
2181:..\FreeRTOS/tasks.c **** 						uxPendedTicks = 0;
2182:..\FreeRTOS/tasks.c **** 					}
2183:..\FreeRTOS/tasks.c **** 					else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 41


2184:..\FreeRTOS/tasks.c **** 					{
2185:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:..\FreeRTOS/tasks.c **** 					}
2187:..\FreeRTOS/tasks.c **** 				}
2188:..\FreeRTOS/tasks.c **** 
2189:..\FreeRTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
2190:..\FreeRTOS/tasks.c **** 				{
2191:..\FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:..\FreeRTOS/tasks.c **** 					{
2193:..\FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
2194:..\FreeRTOS/tasks.c **** 					}
2195:..\FreeRTOS/tasks.c **** 					#endif
2196:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2197:..\FreeRTOS/tasks.c **** 				}
2198:..\FreeRTOS/tasks.c **** 				else
2199:..\FreeRTOS/tasks.c **** 				{
2200:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:..\FreeRTOS/tasks.c **** 				}
2202:..\FreeRTOS/tasks.c **** 			}
2203:..\FreeRTOS/tasks.c **** 		}
2204:..\FreeRTOS/tasks.c **** 		else
2205:..\FreeRTOS/tasks.c **** 		{
2206:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:..\FreeRTOS/tasks.c **** 		}
2208:..\FreeRTOS/tasks.c **** 	}
2209:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
2210:..\FreeRTOS/tasks.c **** 
2211:..\FreeRTOS/tasks.c **** 	return xAlreadyYielded;
2212:..\FreeRTOS/tasks.c **** }
2213:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2214:..\FreeRTOS/tasks.c **** 
2215:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:..\FreeRTOS/tasks.c **** {
2217:..\FreeRTOS/tasks.c **** TickType_t xTicks;
2218:..\FreeRTOS/tasks.c **** 
2219:..\FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:..\FreeRTOS/tasks.c **** 	{
2222:..\FreeRTOS/tasks.c **** 		xTicks = xTickCount;
2223:..\FreeRTOS/tasks.c **** 	}
2224:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:..\FreeRTOS/tasks.c **** 
2226:..\FreeRTOS/tasks.c **** 	return xTicks;
2227:..\FreeRTOS/tasks.c **** }
2228:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2229:..\FreeRTOS/tasks.c **** 
2230:..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:..\FreeRTOS/tasks.c **** {
2232:..\FreeRTOS/tasks.c **** TickType_t xReturn;
2233:..\FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:..\FreeRTOS/tasks.c **** 
2235:..\FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:..\FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:..\FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:..\FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:..\FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:..\FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 42


2241:..\FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:..\FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:..\FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:..\FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:..\FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:..\FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:..\FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:..\FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:..\FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2250:..\FreeRTOS/tasks.c **** 
2251:..\FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2252:..\FreeRTOS/tasks.c **** 	{
2253:..\FreeRTOS/tasks.c **** 		xReturn = xTickCount;
2254:..\FreeRTOS/tasks.c **** 	}
2255:..\FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:..\FreeRTOS/tasks.c **** 
2257:..\FreeRTOS/tasks.c **** 	return xReturn;
2258:..\FreeRTOS/tasks.c **** }
2259:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2260:..\FreeRTOS/tasks.c **** 
2261:..\FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:..\FreeRTOS/tasks.c **** {
2263:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:..\FreeRTOS/tasks.c **** 	BaseType_t. */
2265:..\FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
2266:..\FreeRTOS/tasks.c **** }
2267:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2268:..\FreeRTOS/tasks.c **** 
2269:..\FreeRTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:..\FreeRTOS/tasks.c **** {
2271:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
2272:..\FreeRTOS/tasks.c **** 
2273:..\FreeRTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:..\FreeRTOS/tasks.c **** 	queried. */
2275:..\FreeRTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2276:..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
2277:..\FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2278:..\FreeRTOS/tasks.c **** }
2279:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2280:..\FreeRTOS/tasks.c **** 
2281:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:..\FreeRTOS/tasks.c **** 
2283:..\FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:..\FreeRTOS/tasks.c **** 	{
2285:..\FreeRTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:..\FreeRTOS/tasks.c **** 	UBaseType_t x;
2287:..\FreeRTOS/tasks.c **** 	char cNextChar;
2288:..\FreeRTOS/tasks.c **** 
2289:..\FreeRTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:..\FreeRTOS/tasks.c **** 
2291:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:..\FreeRTOS/tasks.c **** 		{
2293:..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:..\FreeRTOS/tasks.c **** 
2295:..\FreeRTOS/tasks.c **** 			do
2296:..\FreeRTOS/tasks.c **** 			{
2297:..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 43


2298:..\FreeRTOS/tasks.c **** 
2299:..\FreeRTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2300:..\FreeRTOS/tasks.c **** 				mismatch. */
2301:..\FreeRTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:..\FreeRTOS/tasks.c **** 				{
2303:..\FreeRTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:..\FreeRTOS/tasks.c **** 
2305:..\FreeRTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:..\FreeRTOS/tasks.c **** 					{
2307:..\FreeRTOS/tasks.c **** 						/* Characters didn't match. */
2308:..\FreeRTOS/tasks.c **** 						break;
2309:..\FreeRTOS/tasks.c **** 					}
2310:..\FreeRTOS/tasks.c **** 					else if( cNextChar == 0x00 )
2311:..\FreeRTOS/tasks.c **** 					{
2312:..\FreeRTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2313:..\FreeRTOS/tasks.c **** 						found. */
2314:..\FreeRTOS/tasks.c **** 						pxReturn = pxNextTCB;
2315:..\FreeRTOS/tasks.c **** 						break;
2316:..\FreeRTOS/tasks.c **** 					}
2317:..\FreeRTOS/tasks.c **** 					else
2318:..\FreeRTOS/tasks.c **** 					{
2319:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:..\FreeRTOS/tasks.c **** 					}
2321:..\FreeRTOS/tasks.c **** 				}
2322:..\FreeRTOS/tasks.c **** 
2323:..\FreeRTOS/tasks.c **** 				if( pxReturn != NULL )
2324:..\FreeRTOS/tasks.c **** 				{
2325:..\FreeRTOS/tasks.c **** 					/* The handle has been found. */
2326:..\FreeRTOS/tasks.c **** 					break;
2327:..\FreeRTOS/tasks.c **** 				}
2328:..\FreeRTOS/tasks.c **** 
2329:..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:..\FreeRTOS/tasks.c **** 		}
2331:..\FreeRTOS/tasks.c **** 		else
2332:..\FreeRTOS/tasks.c **** 		{
2333:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:..\FreeRTOS/tasks.c **** 		}
2335:..\FreeRTOS/tasks.c **** 
2336:..\FreeRTOS/tasks.c **** 		return pxReturn;
2337:..\FreeRTOS/tasks.c **** 	}
2338:..\FreeRTOS/tasks.c **** 
2339:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2341:..\FreeRTOS/tasks.c **** 
2342:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:..\FreeRTOS/tasks.c **** 
2344:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:..\FreeRTOS/tasks.c **** 	{
2346:..\FreeRTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:..\FreeRTOS/tasks.c **** 	TCB_t* pxTCB;
2348:..\FreeRTOS/tasks.c **** 
2349:..\FreeRTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:..\FreeRTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:..\FreeRTOS/tasks.c **** 
2352:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2353:..\FreeRTOS/tasks.c **** 		{
2354:..\FreeRTOS/tasks.c **** 			/* Search the ready lists. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 44


2355:..\FreeRTOS/tasks.c **** 			do
2356:..\FreeRTOS/tasks.c **** 			{
2357:..\FreeRTOS/tasks.c **** 				uxQueue--;
2358:..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:..\FreeRTOS/tasks.c **** 
2360:..\FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2361:..\FreeRTOS/tasks.c **** 				{
2362:..\FreeRTOS/tasks.c **** 					/* Found the handle. */
2363:..\FreeRTOS/tasks.c **** 					break;
2364:..\FreeRTOS/tasks.c **** 				}
2365:..\FreeRTOS/tasks.c **** 
2366:..\FreeRTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:..\FreeRTOS/tasks.c **** 
2368:..\FreeRTOS/tasks.c **** 			/* Search the delayed lists. */
2369:..\FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2370:..\FreeRTOS/tasks.c **** 			{
2371:..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:..\FreeRTOS/tasks.c **** 			}
2373:..\FreeRTOS/tasks.c **** 
2374:..\FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2375:..\FreeRTOS/tasks.c **** 			{
2376:..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:..\FreeRTOS/tasks.c **** 			}
2378:..\FreeRTOS/tasks.c **** 
2379:..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:..\FreeRTOS/tasks.c **** 			{
2381:..\FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2382:..\FreeRTOS/tasks.c **** 				{
2383:..\FreeRTOS/tasks.c **** 					/* Search the suspended list. */
2384:..\FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:..\FreeRTOS/tasks.c **** 				}
2386:..\FreeRTOS/tasks.c **** 			}
2387:..\FreeRTOS/tasks.c **** 			#endif
2388:..\FreeRTOS/tasks.c **** 
2389:..\FreeRTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:..\FreeRTOS/tasks.c **** 			{
2391:..\FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2392:..\FreeRTOS/tasks.c **** 				{
2393:..\FreeRTOS/tasks.c **** 					/* Search the deleted list. */
2394:..\FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:..\FreeRTOS/tasks.c **** 				}
2396:..\FreeRTOS/tasks.c **** 			}
2397:..\FreeRTOS/tasks.c **** 			#endif
2398:..\FreeRTOS/tasks.c **** 		}
2399:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2400:..\FreeRTOS/tasks.c **** 
2401:..\FreeRTOS/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:..\FreeRTOS/tasks.c **** 	}
2403:..\FreeRTOS/tasks.c **** 
2404:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2406:..\FreeRTOS/tasks.c **** 
2407:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:..\FreeRTOS/tasks.c **** 
2409:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:..\FreeRTOS/tasks.c **** 	{
2411:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 45


2412:..\FreeRTOS/tasks.c **** 
2413:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2414:..\FreeRTOS/tasks.c **** 		{
2415:..\FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:..\FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2417:..\FreeRTOS/tasks.c **** 			{
2418:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:..\FreeRTOS/tasks.c **** 				task in the Ready state. */
2420:..\FreeRTOS/tasks.c **** 				do
2421:..\FreeRTOS/tasks.c **** 				{
2422:..\FreeRTOS/tasks.c **** 					uxQueue--;
2423:..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:..\FreeRTOS/tasks.c **** 
2425:..\FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:..\FreeRTOS/tasks.c **** 
2427:..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:..\FreeRTOS/tasks.c **** 				task in the Blocked state. */
2429:..\FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:..\FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:..\FreeRTOS/tasks.c **** 
2432:..\FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:..\FreeRTOS/tasks.c **** 				{
2434:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:..\FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:..\FreeRTOS/tasks.c **** 				}
2438:..\FreeRTOS/tasks.c **** 				#endif
2439:..\FreeRTOS/tasks.c **** 
2440:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:..\FreeRTOS/tasks.c **** 				{
2442:..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:..\FreeRTOS/tasks.c **** 					each task in the Suspended state. */
2444:..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:..\FreeRTOS/tasks.c **** 				}
2446:..\FreeRTOS/tasks.c **** 				#endif
2447:..\FreeRTOS/tasks.c **** 
2448:..\FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:..\FreeRTOS/tasks.c **** 				{
2450:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:..\FreeRTOS/tasks.c **** 					{
2452:..\FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:..\FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:..\FreeRTOS/tasks.c **** 						#else
2455:..\FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:..\FreeRTOS/tasks.c **** 						#endif
2457:..\FreeRTOS/tasks.c **** 					}
2458:..\FreeRTOS/tasks.c **** 				}
2459:..\FreeRTOS/tasks.c **** 				#else
2460:..\FreeRTOS/tasks.c **** 				{
2461:..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:..\FreeRTOS/tasks.c **** 					{
2463:..\FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
2464:..\FreeRTOS/tasks.c **** 					}
2465:..\FreeRTOS/tasks.c **** 				}
2466:..\FreeRTOS/tasks.c **** 				#endif
2467:..\FreeRTOS/tasks.c **** 			}
2468:..\FreeRTOS/tasks.c **** 			else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 46


2469:..\FreeRTOS/tasks.c **** 			{
2470:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:..\FreeRTOS/tasks.c **** 			}
2472:..\FreeRTOS/tasks.c **** 		}
2473:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2474:..\FreeRTOS/tasks.c **** 
2475:..\FreeRTOS/tasks.c **** 		return uxTask;
2476:..\FreeRTOS/tasks.c **** 	}
2477:..\FreeRTOS/tasks.c **** 
2478:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2480:..\FreeRTOS/tasks.c **** 
2481:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:..\FreeRTOS/tasks.c **** 
2483:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:..\FreeRTOS/tasks.c **** 	{
2485:..\FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:..\FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:..\FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:..\FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
2489:..\FreeRTOS/tasks.c **** 	}
2490:..\FreeRTOS/tasks.c **** 
2491:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2493:..\FreeRTOS/tasks.c **** 
2494:..\FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:..\FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:..\FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:..\FreeRTOS/tasks.c **** 1. */
2498:..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:..\FreeRTOS/tasks.c **** 
2500:..\FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:..\FreeRTOS/tasks.c **** 	{
2502:..\FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:..\FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:..\FreeRTOS/tasks.c **** 		each stepped tick. */
2505:..\FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:..\FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
2507:..\FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:..\FreeRTOS/tasks.c **** 	}
2509:..\FreeRTOS/tasks.c **** 
2510:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2512:..\FreeRTOS/tasks.c **** 
2513:..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:..\FreeRTOS/tasks.c **** 
2515:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:..\FreeRTOS/tasks.c **** 	{
2517:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2519:..\FreeRTOS/tasks.c **** 
2520:..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
2521:..\FreeRTOS/tasks.c **** 
2522:..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2523:..\FreeRTOS/tasks.c **** 		{
2524:..\FreeRTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:..\FreeRTOS/tasks.c **** 			it is actually in the Blocked state. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 47


2526:..\FreeRTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:..\FreeRTOS/tasks.c **** 			{
2528:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
2529:..\FreeRTOS/tasks.c **** 
2530:..\FreeRTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:..\FreeRTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:..\FreeRTOS/tasks.c **** 				scheduler is suspended. */
2533:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:..\FreeRTOS/tasks.c **** 
2535:..\FreeRTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:..\FreeRTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:..\FreeRTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:..\FreeRTOS/tasks.c **** 				is used. */
2539:..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
2540:..\FreeRTOS/tasks.c **** 				{
2541:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:..\FreeRTOS/tasks.c **** 					{
2543:..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:..\FreeRTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:..\FreeRTOS/tasks.c **** 					}
2546:..\FreeRTOS/tasks.c **** 					else
2547:..\FreeRTOS/tasks.c **** 					{
2548:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:..\FreeRTOS/tasks.c **** 					}
2550:..\FreeRTOS/tasks.c **** 				}
2551:..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
2552:..\FreeRTOS/tasks.c **** 
2553:..\FreeRTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:..\FreeRTOS/tasks.c **** 
2556:..\FreeRTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:..\FreeRTOS/tasks.c **** 				switch if preemption is turned off. */
2558:..\FreeRTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:..\FreeRTOS/tasks.c **** 				{
2560:..\FreeRTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:..\FreeRTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2562:..\FreeRTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2563:..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:..\FreeRTOS/tasks.c **** 					{
2565:..\FreeRTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:..\FreeRTOS/tasks.c **** 						is unsuspended. */
2567:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2568:..\FreeRTOS/tasks.c **** 					}
2569:..\FreeRTOS/tasks.c **** 					else
2570:..\FreeRTOS/tasks.c **** 					{
2571:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:..\FreeRTOS/tasks.c **** 					}
2573:..\FreeRTOS/tasks.c **** 				}
2574:..\FreeRTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:..\FreeRTOS/tasks.c **** 			}
2576:..\FreeRTOS/tasks.c **** 			else
2577:..\FreeRTOS/tasks.c **** 			{
2578:..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
2579:..\FreeRTOS/tasks.c **** 			}
2580:..\FreeRTOS/tasks.c **** 		}
2581:..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2582:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 48


2583:..\FreeRTOS/tasks.c **** 		return xReturn;
2584:..\FreeRTOS/tasks.c **** 	}
2585:..\FreeRTOS/tasks.c **** 
2586:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2588:..\FreeRTOS/tasks.c **** 
2589:..\FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:..\FreeRTOS/tasks.c **** {
2591:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
2592:..\FreeRTOS/tasks.c **** TickType_t xItemValue;
2593:..\FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2594:..\FreeRTOS/tasks.c **** 
2595:..\FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:..\FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:..\FreeRTOS/tasks.c **** 	tasks to be unblocked. */
2598:..\FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2600:..\FreeRTOS/tasks.c **** 	{
2601:..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:..\FreeRTOS/tasks.c **** 		block. */
2603:..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2604:..\FreeRTOS/tasks.c **** 
2605:..\FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:..\FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2607:..\FreeRTOS/tasks.c **** 		xTickCount = xConstTickCount;
2608:..\FreeRTOS/tasks.c **** 
2609:..\FreeRTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2610:..\FreeRTOS/tasks.c **** 		{
2611:..\FreeRTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2612:..\FreeRTOS/tasks.c **** 		}
2613:..\FreeRTOS/tasks.c **** 		else
2614:..\FreeRTOS/tasks.c **** 		{
2615:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:..\FreeRTOS/tasks.c **** 		}
2617:..\FreeRTOS/tasks.c **** 
2618:..\FreeRTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:..\FreeRTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:..\FreeRTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:..\FreeRTOS/tasks.c **** 		look any further down the list. */
2622:..\FreeRTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2623:..\FreeRTOS/tasks.c **** 		{
2624:..\FreeRTOS/tasks.c **** 			for( ;; )
2625:..\FreeRTOS/tasks.c **** 			{
2626:..\FreeRTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2627:..\FreeRTOS/tasks.c **** 				{
2628:..\FreeRTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:..\FreeRTOS/tasks.c **** 					to the maximum possible value so it is extremely
2630:..\FreeRTOS/tasks.c **** 					unlikely that the
2631:..\FreeRTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:..\FreeRTOS/tasks.c **** 					next time through. */
2633:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2634:..\FreeRTOS/tasks.c **** 					break;
2635:..\FreeRTOS/tasks.c **** 				}
2636:..\FreeRTOS/tasks.c **** 				else
2637:..\FreeRTOS/tasks.c **** 				{
2638:..\FreeRTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:..\FreeRTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 49


2640:..\FreeRTOS/tasks.c **** 					at which the task at the head of the delayed list must
2641:..\FreeRTOS/tasks.c **** 					be removed from the Blocked state. */
2642:..\FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2643:..\FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2644:..\FreeRTOS/tasks.c **** 
2645:..\FreeRTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
2646:..\FreeRTOS/tasks.c **** 					{
2647:..\FreeRTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:..\FreeRTOS/tasks.c **** 						item value is the time at which the task at the head
2649:..\FreeRTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:..\FreeRTOS/tasks.c **** 						state -	so record the item value in
2651:..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime. */
2652:..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2653:..\FreeRTOS/tasks.c **** 						break;
2654:..\FreeRTOS/tasks.c **** 					}
2655:..\FreeRTOS/tasks.c **** 					else
2656:..\FreeRTOS/tasks.c **** 					{
2657:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:..\FreeRTOS/tasks.c **** 					}
2659:..\FreeRTOS/tasks.c **** 
2660:..\FreeRTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2662:..\FreeRTOS/tasks.c **** 
2663:..\FreeRTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:..\FreeRTOS/tasks.c **** 					it from the event list. */
2665:..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2666:..\FreeRTOS/tasks.c **** 					{
2667:..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2668:..\FreeRTOS/tasks.c **** 					}
2669:..\FreeRTOS/tasks.c **** 					else
2670:..\FreeRTOS/tasks.c **** 					{
2671:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:..\FreeRTOS/tasks.c **** 					}
2673:..\FreeRTOS/tasks.c **** 
2674:..\FreeRTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:..\FreeRTOS/tasks.c **** 					list. */
2676:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2677:..\FreeRTOS/tasks.c **** 
2678:..\FreeRTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:..\FreeRTOS/tasks.c **** 					context switch if preemption is turned off. */
2680:..\FreeRTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:..\FreeRTOS/tasks.c **** 					{
2682:..\FreeRTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2683:..\FreeRTOS/tasks.c **** 						only be performed if the unblocked task has a
2684:..\FreeRTOS/tasks.c **** 						priority that is equal to or higher than the
2685:..\FreeRTOS/tasks.c **** 						currently executing task. */
2686:..\FreeRTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2687:..\FreeRTOS/tasks.c **** 						{
2688:..\FreeRTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
2689:..\FreeRTOS/tasks.c **** 						}
2690:..\FreeRTOS/tasks.c **** 						else
2691:..\FreeRTOS/tasks.c **** 						{
2692:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:..\FreeRTOS/tasks.c **** 						}
2694:..\FreeRTOS/tasks.c **** 					}
2695:..\FreeRTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 50


2697:..\FreeRTOS/tasks.c **** 			}
2698:..\FreeRTOS/tasks.c **** 		}
2699:..\FreeRTOS/tasks.c **** 
2700:..\FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:..\FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:..\FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:..\FreeRTOS/tasks.c **** 		{
2705:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:..\FreeRTOS/tasks.c **** 			{
2707:..\FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:..\FreeRTOS/tasks.c **** 			}
2709:..\FreeRTOS/tasks.c **** 			else
2710:..\FreeRTOS/tasks.c **** 			{
2711:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:..\FreeRTOS/tasks.c **** 			}
2713:..\FreeRTOS/tasks.c **** 		}
2714:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:..\FreeRTOS/tasks.c **** 
2716:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:..\FreeRTOS/tasks.c **** 		{
2718:..\FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:..\FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:..\FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:..\FreeRTOS/tasks.c **** 			{
2722:..\FreeRTOS/tasks.c **** 				vApplicationTickHook();
2723:..\FreeRTOS/tasks.c **** 			}
2724:..\FreeRTOS/tasks.c **** 			else
2725:..\FreeRTOS/tasks.c **** 			{
2726:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:..\FreeRTOS/tasks.c **** 			}
2728:..\FreeRTOS/tasks.c **** 		}
2729:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:..\FreeRTOS/tasks.c **** 	}
2731:..\FreeRTOS/tasks.c **** 	else
2732:..\FreeRTOS/tasks.c **** 	{
2733:..\FreeRTOS/tasks.c **** 		++uxPendedTicks;
2734:..\FreeRTOS/tasks.c **** 
2735:..\FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:..\FreeRTOS/tasks.c **** 		scheduler is locked. */
2737:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:..\FreeRTOS/tasks.c **** 		{
2739:..\FreeRTOS/tasks.c **** 			vApplicationTickHook();
2740:..\FreeRTOS/tasks.c **** 		}
2741:..\FreeRTOS/tasks.c **** 		#endif
2742:..\FreeRTOS/tasks.c **** 	}
2743:..\FreeRTOS/tasks.c **** 
2744:..\FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:..\FreeRTOS/tasks.c **** 	{
2746:..\FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
2747:..\FreeRTOS/tasks.c **** 		{
2748:..\FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
2749:..\FreeRTOS/tasks.c **** 		}
2750:..\FreeRTOS/tasks.c **** 		else
2751:..\FreeRTOS/tasks.c **** 		{
2752:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 51


2754:..\FreeRTOS/tasks.c **** 	}
2755:..\FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:..\FreeRTOS/tasks.c **** 
2757:..\FreeRTOS/tasks.c **** 	return xSwitchRequired;
2758:..\FreeRTOS/tasks.c **** }
2759:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2760:..\FreeRTOS/tasks.c **** 
2761:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:..\FreeRTOS/tasks.c **** 
2763:..\FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:..\FreeRTOS/tasks.c **** 	{
2765:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2766:..\FreeRTOS/tasks.c **** 
2767:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:..\FreeRTOS/tasks.c **** 		getting set. */
2769:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2770:..\FreeRTOS/tasks.c **** 		{
2771:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:..\FreeRTOS/tasks.c **** 		}
2773:..\FreeRTOS/tasks.c **** 		else
2774:..\FreeRTOS/tasks.c **** 		{
2775:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:..\FreeRTOS/tasks.c **** 		}
2777:..\FreeRTOS/tasks.c **** 
2778:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2780:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2781:..\FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2783:..\FreeRTOS/tasks.c **** 	}
2784:..\FreeRTOS/tasks.c **** 
2785:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2787:..\FreeRTOS/tasks.c **** 
2788:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:..\FreeRTOS/tasks.c **** 
2790:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:..\FreeRTOS/tasks.c **** 	{
2792:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2793:..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2794:..\FreeRTOS/tasks.c **** 
2795:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2797:..\FreeRTOS/tasks.c **** 		{
2798:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:..\FreeRTOS/tasks.c **** 		}
2800:..\FreeRTOS/tasks.c **** 		else
2801:..\FreeRTOS/tasks.c **** 		{
2802:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:..\FreeRTOS/tasks.c **** 		}
2804:..\FreeRTOS/tasks.c **** 
2805:..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2807:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2808:..\FreeRTOS/tasks.c **** 		{
2809:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 52


2811:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2812:..\FreeRTOS/tasks.c **** 
2813:..\FreeRTOS/tasks.c **** 		return xReturn;
2814:..\FreeRTOS/tasks.c **** 	}
2815:..\FreeRTOS/tasks.c **** 
2816:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2818:..\FreeRTOS/tasks.c **** 
2819:..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:..\FreeRTOS/tasks.c **** 
2821:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:..\FreeRTOS/tasks.c **** 	{
2823:..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2824:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2825:..\FreeRTOS/tasks.c **** 
2826:..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2828:..\FreeRTOS/tasks.c **** 		{
2829:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:..\FreeRTOS/tasks.c **** 		}
2831:..\FreeRTOS/tasks.c **** 		else
2832:..\FreeRTOS/tasks.c **** 		{
2833:..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:..\FreeRTOS/tasks.c **** 		}
2835:..\FreeRTOS/tasks.c **** 
2836:..\FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:..\FreeRTOS/tasks.c **** 		{
2838:..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:..\FreeRTOS/tasks.c **** 		}
2840:..\FreeRTOS/tasks.c **** 		else
2841:..\FreeRTOS/tasks.c **** 		{
2842:..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2843:..\FreeRTOS/tasks.c **** 		}
2844:..\FreeRTOS/tasks.c **** 
2845:..\FreeRTOS/tasks.c **** 		return xReturn;
2846:..\FreeRTOS/tasks.c **** 	}
2847:..\FreeRTOS/tasks.c **** 
2848:..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2850:..\FreeRTOS/tasks.c **** 
2851:..\FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2852:..\FreeRTOS/tasks.c **** {
2853:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2854:..\FreeRTOS/tasks.c **** 	{
2855:..\FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:..\FreeRTOS/tasks.c **** 		switch. */
2857:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2858:..\FreeRTOS/tasks.c **** 	}
2859:..\FreeRTOS/tasks.c **** 	else
2860:..\FreeRTOS/tasks.c **** 	{
2861:..\FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2862:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:..\FreeRTOS/tasks.c **** 
2864:..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:..\FreeRTOS/tasks.c **** 		{
2866:..\FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:..\FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 53


2868:..\FreeRTOS/tasks.c **** 				#else
2869:..\FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:..\FreeRTOS/tasks.c **** 				#endif
2871:..\FreeRTOS/tasks.c **** 
2872:..\FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:..\FreeRTOS/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:..\FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:..\FreeRTOS/tasks.c **** 				protection here so count values are only valid until the timer
2876:..\FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:..\FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2878:..\FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2879:..\FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:..\FreeRTOS/tasks.c **** 				{
2881:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:..\FreeRTOS/tasks.c **** 				}
2883:..\FreeRTOS/tasks.c **** 				else
2884:..\FreeRTOS/tasks.c **** 				{
2885:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:..\FreeRTOS/tasks.c **** 				}
2887:..\FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:..\FreeRTOS/tasks.c **** 		}
2889:..\FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:..\FreeRTOS/tasks.c **** 
2891:..\FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:..\FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:..\FreeRTOS/tasks.c **** 
2894:..\FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:..\FreeRTOS/tasks.c **** 		optimised asm code. */
2896:..\FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2897:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:..\FreeRTOS/tasks.c **** 
2899:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:..\FreeRTOS/tasks.c **** 		{
2901:..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:..\FreeRTOS/tasks.c **** 			structure specific to this task. */
2903:..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:..\FreeRTOS/tasks.c **** 		}
2905:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:..\FreeRTOS/tasks.c **** 	}
2907:..\FreeRTOS/tasks.c **** }
2908:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2909:..\FreeRTOS/tasks.c **** 
2910:..\FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:..\FreeRTOS/tasks.c **** {
2912:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2913:..\FreeRTOS/tasks.c **** 
2914:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:..\FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:..\FreeRTOS/tasks.c **** 
2917:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:..\FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:..\FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:..\FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:..\FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2922:..\FreeRTOS/tasks.c **** 
2923:..\FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2924:..\FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 54


2925:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2926:..\FreeRTOS/tasks.c **** 
2927:..\FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:..\FreeRTOS/tasks.c **** {
2929:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2930:..\FreeRTOS/tasks.c **** 
2931:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:..\FreeRTOS/tasks.c **** 	the event groups implementation. */
2933:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2934:..\FreeRTOS/tasks.c **** 
2935:..\FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:..\FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:..\FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2938:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2939:..\FreeRTOS/tasks.c **** 
2940:..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:..\FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:..\FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:..\FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:..\FreeRTOS/tasks.c **** 	the task level). */
2945:..\FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2946:..\FreeRTOS/tasks.c **** 
2947:..\FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2948:..\FreeRTOS/tasks.c **** }
2949:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:..\FreeRTOS/tasks.c **** 
2951:..\FreeRTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:..\FreeRTOS/tasks.c **** 
2953:..\FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:..\FreeRTOS/tasks.c **** 	{
2955:..\FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2956:..\FreeRTOS/tasks.c **** 
2957:..\FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2958:..\FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:..\FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:..\FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2961:..\FreeRTOS/tasks.c **** 
2962:..\FreeRTOS/tasks.c **** 
2963:..\FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:..\FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:..\FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:..\FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2967:..\FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2968:..\FreeRTOS/tasks.c **** 
2969:..\FreeRTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:..\FreeRTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:..\FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:..\FreeRTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2973:..\FreeRTOS/tasks.c **** 		{
2974:..\FreeRTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2975:..\FreeRTOS/tasks.c **** 		}
2976:..\FreeRTOS/tasks.c **** 
2977:..\FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:..\FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2979:..\FreeRTOS/tasks.c **** 	}
2980:..\FreeRTOS/tasks.c **** 
2981:..\FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 55


2982:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2983:..\FreeRTOS/tasks.c **** 
2984:..\FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:..\FreeRTOS/tasks.c **** {
2986:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2987:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
2988:..\FreeRTOS/tasks.c **** 
2989:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:..\FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2991:..\FreeRTOS/tasks.c **** 
2992:..\FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:..\FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:..\FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2995:..\FreeRTOS/tasks.c **** 
2996:..\FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:..\FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:..\FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:..\FreeRTOS/tasks.c **** 
3000:..\FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:..\FreeRTOS/tasks.c **** 	pxEventList is not empty. */
3002:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
3003:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3004:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3005:..\FreeRTOS/tasks.c **** 
3006:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3007:..\FreeRTOS/tasks.c **** 	{
3008:..\FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3009:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3010:..\FreeRTOS/tasks.c **** 	}
3011:..\FreeRTOS/tasks.c **** 	else
3012:..\FreeRTOS/tasks.c **** 	{
3013:..\FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:..\FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
3015:..\FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3016:..\FreeRTOS/tasks.c **** 	}
3017:..\FreeRTOS/tasks.c **** 
3018:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3019:..\FreeRTOS/tasks.c **** 	{
3020:..\FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:..\FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:..\FreeRTOS/tasks.c **** 		it should force a context switch now. */
3023:..\FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
3024:..\FreeRTOS/tasks.c **** 
3025:..\FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3026:..\FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3028:..\FreeRTOS/tasks.c **** 	}
3029:..\FreeRTOS/tasks.c **** 	else
3030:..\FreeRTOS/tasks.c **** 	{
3031:..\FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
3032:..\FreeRTOS/tasks.c **** 	}
3033:..\FreeRTOS/tasks.c **** 
3034:..\FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:..\FreeRTOS/tasks.c **** 	{
3036:..\FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:..\FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:..\FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 56


3039:..\FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:..\FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:..\FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:..\FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:..\FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
3044:..\FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:..\FreeRTOS/tasks.c **** 	}
3046:..\FreeRTOS/tasks.c **** 	#endif
3047:..\FreeRTOS/tasks.c **** 
3048:..\FreeRTOS/tasks.c **** 	return xReturn;
3049:..\FreeRTOS/tasks.c **** }
3050:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3051:..\FreeRTOS/tasks.c **** 
3052:..\FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:..\FreeRTOS/tasks.c **** {
3054:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3055:..\FreeRTOS/tasks.c **** 
3056:..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:..\FreeRTOS/tasks.c **** 	the event flags implementation. */
3058:..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3059:..\FreeRTOS/tasks.c **** 
3060:..\FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
3061:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3062:..\FreeRTOS/tasks.c **** 
3063:..\FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:..\FreeRTOS/tasks.c **** 	event flags. */
3065:..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3066:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3068:..\FreeRTOS/tasks.c **** 
3069:..\FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:..\FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:..\FreeRTOS/tasks.c **** 	lists. */
3072:..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3073:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3074:..\FreeRTOS/tasks.c **** 
3075:..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3076:..\FreeRTOS/tasks.c **** 	{
3077:..\FreeRTOS/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:..\FreeRTOS/tasks.c **** 		a context switch is required.  This function is called with the
3079:..\FreeRTOS/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:..\FreeRTOS/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3082:..\FreeRTOS/tasks.c **** 	}
3083:..\FreeRTOS/tasks.c **** }
3084:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3085:..\FreeRTOS/tasks.c **** 
3086:..\FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:..\FreeRTOS/tasks.c **** {
3088:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3089:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3090:..\FreeRTOS/tasks.c **** 	{
3091:..\FreeRTOS/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3092:..\FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3093:..\FreeRTOS/tasks.c **** 	}
3094:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3095:..\FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 57


3096:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3097:..\FreeRTOS/tasks.c **** 
3098:..\FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:..\FreeRTOS/tasks.c **** {
3100:..\FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3101:..\FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3102:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3103:..\FreeRTOS/tasks.c **** }
3104:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3105:..\FreeRTOS/tasks.c **** 
3106:..\FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:..\FreeRTOS/tasks.c **** {
3108:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
3109:..\FreeRTOS/tasks.c **** 
3110:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3111:..\FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
3112:..\FreeRTOS/tasks.c **** 
3113:..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3114:..\FreeRTOS/tasks.c **** 	{
3115:..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3117:..\FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3118:..\FreeRTOS/tasks.c **** 
3119:..\FreeRTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3121:..\FreeRTOS/tasks.c **** 			{
3122:..\FreeRTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:..\FreeRTOS/tasks.c **** 				but has the same result. */
3124:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3125:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
3126:..\FreeRTOS/tasks.c **** 			}
3127:..\FreeRTOS/tasks.c **** 			else
3128:..\FreeRTOS/tasks.c **** 		#endif
3129:..\FreeRTOS/tasks.c **** 
3130:..\FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:..\FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3132:..\FreeRTOS/tasks.c **** 			{
3133:..\FreeRTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:..\FreeRTOS/tasks.c **** 				specified is the maximum block time then the task should block
3135:..\FreeRTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3136:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
3137:..\FreeRTOS/tasks.c **** 			}
3138:..\FreeRTOS/tasks.c **** 			else
3139:..\FreeRTOS/tasks.c **** 		#endif
3140:..\FreeRTOS/tasks.c **** 
3141:..\FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3142:..\FreeRTOS/tasks.c **** 		{
3143:..\FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which
3144:..\FreeRTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:..\FreeRTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:..\FreeRTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:..\FreeRTOS/tasks.c **** 			was called. */
3148:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3149:..\FreeRTOS/tasks.c **** 		}
3150:..\FreeRTOS/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3151:..\FreeRTOS/tasks.c **** 		{
3152:..\FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 58


3153:..\FreeRTOS/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3154:..\FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3155:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
3156:..\FreeRTOS/tasks.c **** 		}
3157:..\FreeRTOS/tasks.c **** 		else
3158:..\FreeRTOS/tasks.c **** 		{
3159:..\FreeRTOS/tasks.c **** 			*pxTicksToWait = 0;
3160:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3161:..\FreeRTOS/tasks.c **** 		}
3162:..\FreeRTOS/tasks.c **** 	}
3163:..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3164:..\FreeRTOS/tasks.c **** 
3165:..\FreeRTOS/tasks.c **** 	return xReturn;
3166:..\FreeRTOS/tasks.c **** }
3167:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3168:..\FreeRTOS/tasks.c **** 
3169:..\FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3170:..\FreeRTOS/tasks.c **** {
3171:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
3172:..\FreeRTOS/tasks.c **** }
3173:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3174:..\FreeRTOS/tasks.c **** 
3175:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:..\FreeRTOS/tasks.c **** 
3177:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:..\FreeRTOS/tasks.c **** 	{
3179:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3180:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3181:..\FreeRTOS/tasks.c **** 
3182:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
3183:..\FreeRTOS/tasks.c **** 		{
3184:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3185:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3186:..\FreeRTOS/tasks.c **** 		}
3187:..\FreeRTOS/tasks.c **** 		else
3188:..\FreeRTOS/tasks.c **** 		{
3189:..\FreeRTOS/tasks.c **** 			uxReturn = 0U;
3190:..\FreeRTOS/tasks.c **** 		}
3191:..\FreeRTOS/tasks.c **** 
3192:..\FreeRTOS/tasks.c **** 		return uxReturn;
3193:..\FreeRTOS/tasks.c **** 	}
3194:..\FreeRTOS/tasks.c **** 
3195:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3197:..\FreeRTOS/tasks.c **** 
3198:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:..\FreeRTOS/tasks.c **** 
3200:..\FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:..\FreeRTOS/tasks.c **** 	{
3202:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3203:..\FreeRTOS/tasks.c **** 
3204:..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
3205:..\FreeRTOS/tasks.c **** 		{
3206:..\FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3207:..\FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3208:..\FreeRTOS/tasks.c **** 		}
3209:..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 59


3210:..\FreeRTOS/tasks.c **** 
3211:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:..\FreeRTOS/tasks.c **** 
3213:..\FreeRTOS/tasks.c **** /*
3214:..\FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3215:..\FreeRTOS/tasks.c ****  * The Idle task.
3216:..\FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3217:..\FreeRTOS/tasks.c ****  *
3218:..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:..\FreeRTOS/tasks.c ****  *
3221:..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:..\FreeRTOS/tasks.c ****  *
3223:..\FreeRTOS/tasks.c ****  */
3224:..\FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:..\FreeRTOS/tasks.c **** {
3226:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
3227:..\FreeRTOS/tasks.c **** 	( void ) pvParameters;
3228:..\FreeRTOS/tasks.c **** 
3229:..\FreeRTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:..\FreeRTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:..\FreeRTOS/tasks.c **** 
3232:..\FreeRTOS/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:..\FreeRTOS/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:..\FreeRTOS/tasks.c **** 	any. */
3235:..\FreeRTOS/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3236:..\FreeRTOS/tasks.c **** 
3237:..\FreeRTOS/tasks.c **** 	for( ;; )
3238:..\FreeRTOS/tasks.c **** 	{
3239:..\FreeRTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:..\FreeRTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:..\FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
3242:..\FreeRTOS/tasks.c **** 
3243:..\FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:..\FreeRTOS/tasks.c **** 		{
3245:..\FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:..\FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
3247:..\FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:..\FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
3249:..\FreeRTOS/tasks.c **** 			taskYIELD();
3250:..\FreeRTOS/tasks.c **** 		}
3251:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:..\FreeRTOS/tasks.c **** 
3253:..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3254:..\FreeRTOS/tasks.c **** 		{
3255:..\FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:..\FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:..\FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3258:..\FreeRTOS/tasks.c **** 			timeslice.
3259:..\FreeRTOS/tasks.c **** 
3260:..\FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3261:..\FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:..\FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:..\FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3265:..\FreeRTOS/tasks.c **** 			{
3266:..\FreeRTOS/tasks.c **** 				taskYIELD();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 60


3267:..\FreeRTOS/tasks.c **** 			}
3268:..\FreeRTOS/tasks.c **** 			else
3269:..\FreeRTOS/tasks.c **** 			{
3270:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:..\FreeRTOS/tasks.c **** 			}
3272:..\FreeRTOS/tasks.c **** 		}
3273:..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:..\FreeRTOS/tasks.c **** 
3275:..\FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:..\FreeRTOS/tasks.c **** 		{
3277:..\FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:..\FreeRTOS/tasks.c **** 
3279:..\FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:..\FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
3281:..\FreeRTOS/tasks.c **** 			without the overhead of a separate task.
3282:..\FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:..\FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:..\FreeRTOS/tasks.c **** 			vApplicationIdleHook();
3285:..\FreeRTOS/tasks.c **** 		}
3286:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:..\FreeRTOS/tasks.c **** 
3288:..\FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:..\FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:..\FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
3291:..\FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3293:..\FreeRTOS/tasks.c **** 		{
3294:..\FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:..\FreeRTOS/tasks.c **** 
3296:..\FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:..\FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:..\FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
3299:..\FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:..\FreeRTOS/tasks.c **** 			valid. */
3301:..\FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:..\FreeRTOS/tasks.c **** 
3303:..\FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:..\FreeRTOS/tasks.c **** 			{
3305:..\FreeRTOS/tasks.c **** 				vTaskSuspendAll();
3306:..\FreeRTOS/tasks.c **** 				{
3307:..\FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:..\FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
3309:..\FreeRTOS/tasks.c **** 					be used. */
3310:..\FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3311:..\FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:..\FreeRTOS/tasks.c **** 
3313:..\FreeRTOS/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:..\FreeRTOS/tasks.c **** 					if the application does not want
3315:..\FreeRTOS/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:..\FreeRTOS/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:..\FreeRTOS/tasks.c **** 
3318:..\FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:..\FreeRTOS/tasks.c **** 					{
3320:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:..\FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:..\FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 61


3324:..\FreeRTOS/tasks.c **** 					else
3325:..\FreeRTOS/tasks.c **** 					{
3326:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:..\FreeRTOS/tasks.c **** 					}
3328:..\FreeRTOS/tasks.c **** 				}
3329:..\FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
3330:..\FreeRTOS/tasks.c **** 			}
3331:..\FreeRTOS/tasks.c **** 			else
3332:..\FreeRTOS/tasks.c **** 			{
3333:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:..\FreeRTOS/tasks.c **** 			}
3335:..\FreeRTOS/tasks.c **** 		}
3336:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:..\FreeRTOS/tasks.c **** 	}
3338:..\FreeRTOS/tasks.c **** }
3339:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3340:..\FreeRTOS/tasks.c **** 
3341:..\FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:..\FreeRTOS/tasks.c **** 
3343:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:..\FreeRTOS/tasks.c **** 	{
3345:..\FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:..\FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:..\FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:..\FreeRTOS/tasks.c **** 
3349:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3350:..\FreeRTOS/tasks.c **** 		{
3351:..\FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3353:..\FreeRTOS/tasks.c **** 		}
3354:..\FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:..\FreeRTOS/tasks.c **** 		{
3356:..\FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3358:..\FreeRTOS/tasks.c **** 		}
3359:..\FreeRTOS/tasks.c **** 		else
3360:..\FreeRTOS/tasks.c **** 		{
3361:..\FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:..\FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:..\FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:..\FreeRTOS/tasks.c **** 			interrupts. */
3365:..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:..\FreeRTOS/tasks.c **** 			{
3367:..\FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3368:..\FreeRTOS/tasks.c **** 			}
3369:..\FreeRTOS/tasks.c **** 			else
3370:..\FreeRTOS/tasks.c **** 			{
3371:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:..\FreeRTOS/tasks.c **** 			}
3373:..\FreeRTOS/tasks.c **** 		}
3374:..\FreeRTOS/tasks.c **** 
3375:..\FreeRTOS/tasks.c **** 		return eReturn;
3376:..\FreeRTOS/tasks.c **** 	}
3377:..\FreeRTOS/tasks.c **** 
3378:..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3380:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 62


3381:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:..\FreeRTOS/tasks.c **** 
3383:..\FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:..\FreeRTOS/tasks.c **** 	{
3385:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3386:..\FreeRTOS/tasks.c **** 
3387:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3388:..\FreeRTOS/tasks.c **** 		{
3389:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3390:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3391:..\FreeRTOS/tasks.c **** 		}
3392:..\FreeRTOS/tasks.c **** 	}
3393:..\FreeRTOS/tasks.c **** 
3394:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3396:..\FreeRTOS/tasks.c **** 
3397:..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:..\FreeRTOS/tasks.c **** 
3399:..\FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:..\FreeRTOS/tasks.c **** 	{
3401:..\FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
3402:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3403:..\FreeRTOS/tasks.c **** 
3404:..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3405:..\FreeRTOS/tasks.c **** 		{
3406:..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3407:..\FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3408:..\FreeRTOS/tasks.c **** 		}
3409:..\FreeRTOS/tasks.c **** 		else
3410:..\FreeRTOS/tasks.c **** 		{
3411:..\FreeRTOS/tasks.c **** 			pvReturn = NULL;
3412:..\FreeRTOS/tasks.c **** 		}
3413:..\FreeRTOS/tasks.c **** 
3414:..\FreeRTOS/tasks.c **** 		return pvReturn;
3415:..\FreeRTOS/tasks.c **** 	}
3416:..\FreeRTOS/tasks.c **** 
3417:..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3419:..\FreeRTOS/tasks.c **** 
3420:..\FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:..\FreeRTOS/tasks.c **** 
3422:..\FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:..\FreeRTOS/tasks.c **** 	{
3424:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3425:..\FreeRTOS/tasks.c **** 
3426:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:..\FreeRTOS/tasks.c **** 		the calling task. */
3428:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:..\FreeRTOS/tasks.c **** 
3430:..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:..\FreeRTOS/tasks.c **** 	}
3432:..\FreeRTOS/tasks.c **** 
3433:..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3435:..\FreeRTOS/tasks.c **** 
3436:..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3437:..\FreeRTOS/tasks.c **** {
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 63


3438:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3439:..\FreeRTOS/tasks.c **** 
3440:..\FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3441:..\FreeRTOS/tasks.c **** 	{
3442:..\FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3443:..\FreeRTOS/tasks.c **** 	}
3444:..\FreeRTOS/tasks.c **** 
3445:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3446:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3447:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3448:..\FreeRTOS/tasks.c **** 
3449:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:..\FreeRTOS/tasks.c **** 	{
3451:..\FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3452:..\FreeRTOS/tasks.c **** 	}
3453:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:..\FreeRTOS/tasks.c **** 
3455:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:..\FreeRTOS/tasks.c **** 	{
3457:..\FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3458:..\FreeRTOS/tasks.c **** 	}
3459:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:..\FreeRTOS/tasks.c **** 
3461:..\FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:..\FreeRTOS/tasks.c **** 	using list2. */
3463:..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3464:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3465:..\FreeRTOS/tasks.c **** }
3466:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3467:..\FreeRTOS/tasks.c **** 
3468:..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:..\FreeRTOS/tasks.c **** {
3470:..\FreeRTOS/tasks.c **** 
3471:..\FreeRTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:..\FreeRTOS/tasks.c **** 
3473:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:..\FreeRTOS/tasks.c **** 	{
3475:..\FreeRTOS/tasks.c **** 		TCB_t *pxTCB;
3476:..\FreeRTOS/tasks.c **** 
3477:..\FreeRTOS/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:..\FreeRTOS/tasks.c **** 		being called too often in the idle task. */
3479:..\FreeRTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3480:..\FreeRTOS/tasks.c **** 		{
3481:..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
3482:..\FreeRTOS/tasks.c **** 			{
3483:..\FreeRTOS/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3484:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3485:..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
3486:..\FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3487:..\FreeRTOS/tasks.c **** 			}
3488:..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
3489:..\FreeRTOS/tasks.c **** 
3490:..\FreeRTOS/tasks.c **** 			prvDeleteTCB( pxTCB );
3491:..\FreeRTOS/tasks.c **** 		}
3492:..\FreeRTOS/tasks.c **** 	}
3493:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:..\FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 64


3495:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3496:..\FreeRTOS/tasks.c **** 
3497:..\FreeRTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:..\FreeRTOS/tasks.c **** 
3499:..\FreeRTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3500:..\FreeRTOS/tasks.c **** 	{
3501:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3502:..\FreeRTOS/tasks.c **** 
3503:..\FreeRTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3505:..\FreeRTOS/tasks.c **** 
3506:..\FreeRTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3507:..\FreeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3508:..\FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3509:..\FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3510:..\FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3511:..\FreeRTOS/tasks.c **** 
3512:..\FreeRTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:..\FreeRTOS/tasks.c **** 		{
3514:..\FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3515:..\FreeRTOS/tasks.c **** 		}
3516:..\FreeRTOS/tasks.c **** 		#else
3517:..\FreeRTOS/tasks.c **** 		{
3518:..\FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:..\FreeRTOS/tasks.c **** 		}
3520:..\FreeRTOS/tasks.c **** 		#endif
3521:..\FreeRTOS/tasks.c **** 
3522:..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:..\FreeRTOS/tasks.c **** 		{
3524:..\FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:..\FreeRTOS/tasks.c **** 		}
3526:..\FreeRTOS/tasks.c **** 		#else
3527:..\FreeRTOS/tasks.c **** 		{
3528:..\FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3529:..\FreeRTOS/tasks.c **** 		}
3530:..\FreeRTOS/tasks.c **** 		#endif
3531:..\FreeRTOS/tasks.c **** 
3532:..\FreeRTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:..\FreeRTOS/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:..\FreeRTOS/tasks.c **** 		state is just set to whatever is passed in. */
3535:..\FreeRTOS/tasks.c **** 		if( eState != eInvalid )
3536:..\FreeRTOS/tasks.c **** 		{
3537:..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3538:..\FreeRTOS/tasks.c **** 			{
3539:..\FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3540:..\FreeRTOS/tasks.c **** 			}
3541:..\FreeRTOS/tasks.c **** 			else
3542:..\FreeRTOS/tasks.c **** 			{
3543:..\FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3544:..\FreeRTOS/tasks.c **** 
3545:..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:..\FreeRTOS/tasks.c **** 				{
3547:..\FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:..\FreeRTOS/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:..\FreeRTOS/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:..\FreeRTOS/tasks.c **** 					if( eState == eSuspended )
3551:..\FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 65


3552:..\FreeRTOS/tasks.c **** 						vTaskSuspendAll();
3553:..\FreeRTOS/tasks.c **** 						{
3554:..\FreeRTOS/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3555:..\FreeRTOS/tasks.c **** 							{
3556:..\FreeRTOS/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3557:..\FreeRTOS/tasks.c **** 							}
3558:..\FreeRTOS/tasks.c **** 						}
3559:..\FreeRTOS/tasks.c **** 						( void ) xTaskResumeAll();
3560:..\FreeRTOS/tasks.c **** 					}
3561:..\FreeRTOS/tasks.c **** 				}
3562:..\FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:..\FreeRTOS/tasks.c **** 			}
3564:..\FreeRTOS/tasks.c **** 		}
3565:..\FreeRTOS/tasks.c **** 		else
3566:..\FreeRTOS/tasks.c **** 		{
3567:..\FreeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3568:..\FreeRTOS/tasks.c **** 		}
3569:..\FreeRTOS/tasks.c **** 
3570:..\FreeRTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:..\FreeRTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:..\FreeRTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3573:..\FreeRTOS/tasks.c **** 		{
3574:..\FreeRTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:..\FreeRTOS/tasks.c **** 			{
3576:..\FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:..\FreeRTOS/tasks.c **** 			}
3578:..\FreeRTOS/tasks.c **** 			#else
3579:..\FreeRTOS/tasks.c **** 			{
3580:..\FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3581:..\FreeRTOS/tasks.c **** 			}
3582:..\FreeRTOS/tasks.c **** 			#endif
3583:..\FreeRTOS/tasks.c **** 		}
3584:..\FreeRTOS/tasks.c **** 		else
3585:..\FreeRTOS/tasks.c **** 		{
3586:..\FreeRTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3587:..\FreeRTOS/tasks.c **** 		}
3588:..\FreeRTOS/tasks.c **** 	}
3589:..\FreeRTOS/tasks.c **** 
3590:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3592:..\FreeRTOS/tasks.c **** 
3593:..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:..\FreeRTOS/tasks.c **** 
3595:..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3596:..\FreeRTOS/tasks.c **** 	{
3597:..\FreeRTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3599:..\FreeRTOS/tasks.c **** 
3600:..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3601:..\FreeRTOS/tasks.c **** 		{
3602:..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3603:..\FreeRTOS/tasks.c **** 
3604:..\FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:..\FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:..\FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:..\FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:..\FreeRTOS/tasks.c **** 			do
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 66


3609:..\FreeRTOS/tasks.c **** 			{
3610:..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3611:..\FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3612:..\FreeRTOS/tasks.c **** 				uxTask++;
3613:..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3614:..\FreeRTOS/tasks.c **** 		}
3615:..\FreeRTOS/tasks.c **** 		else
3616:..\FreeRTOS/tasks.c **** 		{
3617:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:..\FreeRTOS/tasks.c **** 		}
3619:..\FreeRTOS/tasks.c **** 
3620:..\FreeRTOS/tasks.c **** 		return uxTask;
3621:..\FreeRTOS/tasks.c **** 	}
3622:..\FreeRTOS/tasks.c **** 
3623:..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3625:..\FreeRTOS/tasks.c **** 
3626:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:..\FreeRTOS/tasks.c **** 
3628:..\FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:..\FreeRTOS/tasks.c **** 	{
  97              		.loc 1 3629 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.LVL8:
3630:..\FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 103              		.loc 1 3630 0
 104 0000 0023     		movs	r3, #0
3631:..\FreeRTOS/tasks.c **** 
3632:..\FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 105              		.loc 1 3632 0
 106 0002 01E0     		b	.L13
 107              	.LVL9:
 108              	.L14:
3633:..\FreeRTOS/tasks.c **** 		{
3634:..\FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 109              		.loc 1 3634 0
 110 0004 0130     		adds	r0, r0, #1
 111              	.LVL10:
3635:..\FreeRTOS/tasks.c **** 			ulCount++;
 112              		.loc 1 3635 0
 113 0006 0133     		adds	r3, r3, #1
 114              	.LVL11:
 115              	.L13:
3632:..\FreeRTOS/tasks.c **** 		{
 116              		.loc 1 3632 0
 117 0008 0278     		ldrb	r2, [r0]
 118 000a A52A     		cmp	r2, #165
 119 000c FAD0     		beq	.L14
3636:..\FreeRTOS/tasks.c **** 		}
3637:..\FreeRTOS/tasks.c **** 
3638:..\FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 120              		.loc 1 3638 0
 121 000e 9B08     		lsrs	r3, r3, #2
 122              	.LVL12:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 67


3639:..\FreeRTOS/tasks.c **** 
3640:..\FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 123              		.loc 1 3640 0
 124 0010 98B2     		uxth	r0, r3
 125              	.LVL13:
3641:..\FreeRTOS/tasks.c **** 	}
 126              		.loc 1 3641 0
 127              		@ sp needed
 128 0012 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE69:
 131              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 132              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 133              		.align	2
 134              		.code	16
 135              		.thumb_func
 136              		.type	prvResetNextTaskUnblockTime, %function
 137              	prvResetNextTaskUnblockTime:
 138              	.LFB72:
3642:..\FreeRTOS/tasks.c **** 
3643:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3645:..\FreeRTOS/tasks.c **** 
3646:..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:..\FreeRTOS/tasks.c **** 
3648:..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:..\FreeRTOS/tasks.c **** 	{
3650:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3651:..\FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3652:..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3653:..\FreeRTOS/tasks.c **** 
3654:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3655:..\FreeRTOS/tasks.c **** 
3656:..\FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:..\FreeRTOS/tasks.c **** 		{
3658:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3659:..\FreeRTOS/tasks.c **** 		}
3660:..\FreeRTOS/tasks.c **** 		#else
3661:..\FreeRTOS/tasks.c **** 		{
3662:..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:..\FreeRTOS/tasks.c **** 		}
3664:..\FreeRTOS/tasks.c **** 		#endif
3665:..\FreeRTOS/tasks.c **** 
3666:..\FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3667:..\FreeRTOS/tasks.c **** 
3668:..\FreeRTOS/tasks.c **** 		return uxReturn;
3669:..\FreeRTOS/tasks.c **** 	}
3670:..\FreeRTOS/tasks.c **** 
3671:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3673:..\FreeRTOS/tasks.c **** 
3674:..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:..\FreeRTOS/tasks.c **** 
3676:..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:..\FreeRTOS/tasks.c **** 	{
3678:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:..\FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 68


3680:..\FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3681:..\FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:..\FreeRTOS/tasks.c **** 
3683:..\FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:..\FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:..\FreeRTOS/tasks.c **** 		{
3687:..\FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:..\FreeRTOS/tasks.c **** 		}
3689:..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:..\FreeRTOS/tasks.c **** 
3691:..\FreeRTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:..\FreeRTOS/tasks.c **** 		{
3693:..\FreeRTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:..\FreeRTOS/tasks.c **** 			the stack and TCB. */
3695:..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
3696:..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
3697:..\FreeRTOS/tasks.c **** 		}
3698:..\FreeRTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:..\FreeRTOS/tasks.c **** 		{
3700:..\FreeRTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:..\FreeRTOS/tasks.c **** 			check what was statically allocated before trying to free the
3702:..\FreeRTOS/tasks.c **** 			memory. */
3703:..\FreeRTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:..\FreeRTOS/tasks.c **** 			{
3705:..\FreeRTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:..\FreeRTOS/tasks.c **** 				must be freed. */
3707:..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3709:..\FreeRTOS/tasks.c **** 			}
3710:..\FreeRTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:..\FreeRTOS/tasks.c **** 			{
3712:..\FreeRTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:..\FreeRTOS/tasks.c **** 				only memory that must be freed. */
3714:..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3715:..\FreeRTOS/tasks.c **** 			}
3716:..\FreeRTOS/tasks.c **** 			else
3717:..\FreeRTOS/tasks.c **** 			{
3718:..\FreeRTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:..\FreeRTOS/tasks.c **** 				nothing needs to be freed. */
3720:..\FreeRTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:..\FreeRTOS/tasks.c **** 			}
3723:..\FreeRTOS/tasks.c **** 		}
3724:..\FreeRTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:..\FreeRTOS/tasks.c **** 	}
3726:..\FreeRTOS/tasks.c **** 
3727:..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3729:..\FreeRTOS/tasks.c **** 
3730:..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:..\FreeRTOS/tasks.c **** {
 139              		.loc 1 3731 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 69


3732:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
3733:..\FreeRTOS/tasks.c **** 
3734:..\FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 144              		.loc 1 3734 0
 145 0000 0A4B     		ldr	r3, .L20
 146 0002 9B6A     		ldr	r3, [r3, #40]
 147 0004 1B68     		ldr	r3, [r3]
 148 0006 002B     		cmp	r3, #0
 149 0008 01D1     		bne	.L19
 150 000a 0133     		adds	r3, r3, #1
 151 000c 00E0     		b	.L16
 152              	.L19:
 153 000e 0023     		movs	r3, #0
 154              	.L16:
 155              		.loc 1 3734 0 is_stmt 0 discriminator 4
 156 0010 002B     		cmp	r3, #0
 157 0012 04D0     		beq	.L17
3735:..\FreeRTOS/tasks.c **** 	{
3736:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:..\FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:..\FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:..\FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3740:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 158              		.loc 1 3740 0 is_stmt 1
 159 0014 0122     		movs	r2, #1
 160 0016 5242     		rsbs	r2, r2, #0
 161 0018 044B     		ldr	r3, .L20
 162 001a DA62     		str	r2, [r3, #44]
 163 001c 05E0     		b	.L15
 164              	.L17:
3741:..\FreeRTOS/tasks.c **** 	}
3742:..\FreeRTOS/tasks.c **** 	else
3743:..\FreeRTOS/tasks.c **** 	{
3744:..\FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:..\FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:..\FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:..\FreeRTOS/tasks.c **** 		from the Blocked state. */
3748:..\FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 165              		.loc 1 3748 0
 166 001e 034B     		ldr	r3, .L20
 167 0020 9A6A     		ldr	r2, [r3, #40]
 168 0022 D268     		ldr	r2, [r2, #12]
 169 0024 D268     		ldr	r2, [r2, #12]
 170              	.LVL14:
3749:..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 171              		.loc 1 3749 0
 172 0026 5268     		ldr	r2, [r2, #4]
 173              	.LVL15:
 174 0028 DA62     		str	r2, [r3, #44]
 175              	.L15:
3750:..\FreeRTOS/tasks.c **** 	}
3751:..\FreeRTOS/tasks.c **** }
 176              		.loc 1 3751 0
 177              		@ sp needed
 178 002a 7047     		bx	lr
 179              	.L21:
 180              		.align	2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 70


 181              	.L20:
 182 002c 00000000 		.word	.LANCHOR0
 183              		.cfi_endproc
 184              	.LFE72:
 185              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 186              		.section	.text.prvDeleteTCB,"ax",%progbits
 187              		.align	2
 188              		.code	16
 189              		.thumb_func
 190              		.type	prvDeleteTCB, %function
 191              	prvDeleteTCB:
 192              	.LFB71:
3677:..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 193              		.loc 1 3677 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              	.LVL16:
 198 0000 10B5     		push	{r4, lr}
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
 202 0002 0400     		movs	r4, r0
3695:..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
 203              		.loc 1 3695 0
 204 0004 006B     		ldr	r0, [r0, #48]
 205              	.LVL17:
 206 0006 FFF7FEFF 		bl	vPortFree
 207              	.LVL18:
3696:..\FreeRTOS/tasks.c **** 		}
 208              		.loc 1 3696 0
 209 000a 2000     		movs	r0, r4
 210 000c FFF7FEFF 		bl	vPortFree
 211              	.LVL19:
3725:..\FreeRTOS/tasks.c **** 
 212              		.loc 1 3725 0
 213              		@ sp needed
 214              	.LVL20:
 215 0010 10BD     		pop	{r4, pc}
 216              		.cfi_endproc
 217              	.LFE71:
 218              		.size	prvDeleteTCB, .-prvDeleteTCB
 219 0012 C046     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 220              		.align	2
 221              		.code	16
 222              		.thumb_func
 223              		.type	prvInitialiseNewTask, %function
 224              	prvInitialiseNewTask:
 225              	.LFB33:
 831:..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 226              		.loc 1 831 0
 227              		.cfi_startproc
 228              		@ args = 16, pretend = 0, frame = 8
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              	.LVL21:
 231 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 232              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 71


 233              		.cfi_offset 4, -20
 234              		.cfi_offset 5, -16
 235              		.cfi_offset 6, -12
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 83B0     		sub	sp, sp, #12
 239              		.cfi_def_cfa_offset 32
 240 0004 0090     		str	r0, [sp]
 241 0006 0D00     		movs	r5, r1
 242 0008 1700     		movs	r7, r2
 243 000a 0193     		str	r3, [sp, #4]
 244 000c 089C     		ldr	r4, [sp, #32]
 245 000e 0A9E     		ldr	r6, [sp, #40]
 853:..\FreeRTOS/tasks.c **** 	}
 246              		.loc 1 853 0
 247 0010 9200     		lsls	r2, r2, #2
 248              	.LVL22:
 249 0012 A521     		movs	r1, #165
 250              	.LVL23:
 251 0014 306B     		ldr	r0, [r6, #48]
 252              	.LVL24:
 253 0016 FFF7FEFF 		bl	memset
 254              	.LVL25:
 863:..\FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 255              		.loc 1 863 0
 256 001a 234B     		ldr	r3, .L32
 257 001c FB18     		adds	r3, r7, r3
 258 001e 9B00     		lsls	r3, r3, #2
 259 0020 326B     		ldr	r2, [r6, #48]
 260 0022 9446     		mov	ip, r2
 261 0024 6344     		add	r3, r3, ip
 262              	.LVL26:
 864:..\FreeRTOS/tasks.c **** 
 263              		.loc 1 864 0
 264 0026 0722     		movs	r2, #7
 265 0028 9343     		bics	r3, r2
 266              	.LVL27:
 267 002a 1F00     		movs	r7, r3
 268              	.LVL28:
 891:..\FreeRTOS/tasks.c **** 	{
 269              		.loc 1 891 0
 270 002c 0023     		movs	r3, #0
 271              	.LVL29:
 272 002e 08E0     		b	.L24
 273              	.LVL30:
 274              	.L26:
 893:..\FreeRTOS/tasks.c **** 
 275              		.loc 1 893 0
 276 0030 E918     		adds	r1, r5, r3
 277 0032 0878     		ldrb	r0, [r1]
 278 0034 F218     		adds	r2, r6, r3
 279 0036 3432     		adds	r2, r2, #52
 280 0038 1070     		strb	r0, [r2]
 898:..\FreeRTOS/tasks.c **** 		{
 281              		.loc 1 898 0
 282 003a 0A78     		ldrb	r2, [r1]
 283 003c 002A     		cmp	r2, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 72


 284 003e 02D0     		beq	.L25
 891:..\FreeRTOS/tasks.c **** 	{
 285              		.loc 1 891 0 discriminator 2
 286 0040 0133     		adds	r3, r3, #1
 287              	.LVL31:
 288              	.L24:
 891:..\FreeRTOS/tasks.c **** 	{
 289              		.loc 1 891 0 is_stmt 0 discriminator 1
 290 0042 0F2B     		cmp	r3, #15
 291 0044 F4D9     		bls	.L26
 292              	.L25:
 910:..\FreeRTOS/tasks.c **** 
 293              		.loc 1 910 0 is_stmt 1
 294 0046 0022     		movs	r2, #0
 295 0048 4323     		movs	r3, #67
 296              	.LVL32:
 297 004a F254     		strb	r2, [r6, r3]
 914:..\FreeRTOS/tasks.c **** 	{
 298              		.loc 1 914 0
 299 004c 042C     		cmp	r4, #4
 300 004e 00D9     		bls	.L27
 916:..\FreeRTOS/tasks.c **** 	}
 301              		.loc 1 916 0
 302 0050 0424     		movs	r4, #4
 303              	.L27:
 304              	.LVL33:
 923:..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 305              		.loc 1 923 0
 306 0052 F462     		str	r4, [r6, #44]
 926:..\FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 307              		.loc 1 926 0
 308 0054 7464     		str	r4, [r6, #68]
 927:..\FreeRTOS/tasks.c **** 	}
 309              		.loc 1 927 0
 310 0056 0023     		movs	r3, #0
 311 0058 B364     		str	r3, [r6, #72]
 931:..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 312              		.loc 1 931 0
 313 005a 301D     		adds	r0, r6, #4
 314 005c FFF7FEFF 		bl	vListInitialiseItem
 315              	.LVL34:
 932:..\FreeRTOS/tasks.c **** 
 316              		.loc 1 932 0
 317 0060 3000     		movs	r0, r6
 318 0062 1830     		adds	r0, r0, #24
 319 0064 FFF7FEFF 		bl	vListInitialiseItem
 320              	.LVL35:
 936:..\FreeRTOS/tasks.c **** 
 321              		.loc 1 936 0
 322 0068 3661     		str	r6, [r6, #16]
 939:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 323              		.loc 1 939 0
 324 006a 0523     		movs	r3, #5
 325 006c 1C1B     		subs	r4, r3, r4
 326              	.LVL36:
 327 006e B461     		str	r4, [r6, #24]
 940:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 73


 328              		.loc 1 940 0
 329 0070 7662     		str	r6, [r6, #36]
 330              	.LVL37:
 973:..\FreeRTOS/tasks.c **** 		{
 331              		.loc 1 973 0
 332 0072 0022     		movs	r2, #0
 333 0074 06E0     		b	.L28
 334              	.LVL38:
 335              	.L29:
 975:..\FreeRTOS/tasks.c **** 		}
 336              		.loc 1 975 0 discriminator 3
 337 0076 1300     		movs	r3, r2
 338 0078 1233     		adds	r3, r3, #18
 339 007a 9B00     		lsls	r3, r3, #2
 340 007c F318     		adds	r3, r6, r3
 341 007e 0021     		movs	r1, #0
 342 0080 5960     		str	r1, [r3, #4]
 973:..\FreeRTOS/tasks.c **** 		{
 343              		.loc 1 973 0 discriminator 3
 344 0082 0132     		adds	r2, r2, #1
 345              	.LVL39:
 346              	.L28:
 973:..\FreeRTOS/tasks.c **** 		{
 347              		.loc 1 973 0 is_stmt 0 discriminator 1
 348 0084 042A     		cmp	r2, #4
 349 0086 F6D9     		bls	.L29
 982:..\FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 350              		.loc 1 982 0 is_stmt 1
 351 0088 0023     		movs	r3, #0
 352 008a 3366     		str	r3, [r6, #96]
 983:..\FreeRTOS/tasks.c **** 	}
 353              		.loc 1 983 0
 354 008c 6422     		movs	r2, #100
 355              	.LVL40:
 356 008e B354     		strb	r3, [r6, r2]
1010:..\FreeRTOS/tasks.c **** 	}
 357              		.loc 1 1010 0
 358 0090 019A     		ldr	r2, [sp, #4]
 359 0092 0099     		ldr	r1, [sp]
 360 0094 3800     		movs	r0, r7
 361 0096 FFF7FEFF 		bl	pxPortInitialiseStack
 362              	.LVL41:
 363 009a 3060     		str	r0, [r6]
1014:..\FreeRTOS/tasks.c **** 	{
 364              		.loc 1 1014 0
 365 009c 099B     		ldr	r3, [sp, #36]
 366 009e 002B     		cmp	r3, #0
 367 00a0 00D0     		beq	.L23
1018:..\FreeRTOS/tasks.c **** 	}
 368              		.loc 1 1018 0
 369 00a2 1E60     		str	r6, [r3]
 370              	.L23:
1024:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 371              		.loc 1 1024 0
 372 00a4 03B0     		add	sp, sp, #12
 373              	.LVL42:
 374              		@ sp needed
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 74


 375              	.LVL43:
 376              	.LVL44:
 377 00a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 378              	.L33:
 379              		.align	2
 380              	.L32:
 381 00a8 FFFFFF3F 		.word	1073741823
 382              		.cfi_endproc
 383              	.LFE33:
 384              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 385              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 386              		.align	2
 387              		.code	16
 388              		.thumb_func
 389              		.type	prvInitialiseTaskLists, %function
 390              	prvInitialiseTaskLists:
 391              	.LFB67:
3437:..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
 392              		.loc 1 3437 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 397              		.cfi_def_cfa_offset 24
 398              		.cfi_offset 3, -24
 399              		.cfi_offset 4, -20
 400              		.cfi_offset 5, -16
 401              		.cfi_offset 6, -12
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404              	.LVL45:
3440:..\FreeRTOS/tasks.c **** 	{
 405              		.loc 1 3440 0
 406 0002 0024     		movs	r4, #0
 407 0004 08E0     		b	.L35
 408              	.LVL46:
 409              	.L36:
3442:..\FreeRTOS/tasks.c **** 	}
 410              		.loc 1 3442 0 discriminator 3
 411 0006 A200     		lsls	r2, r4, #2
 412 0008 1219     		adds	r2, r2, r4
 413 000a 9300     		lsls	r3, r2, #2
 414 000c 1048     		ldr	r0, .L37
 415 000e 3030     		adds	r0, r0, #48
 416 0010 C018     		adds	r0, r0, r3
 417 0012 FFF7FEFF 		bl	vListInitialise
 418              	.LVL47:
3440:..\FreeRTOS/tasks.c **** 	{
 419              		.loc 1 3440 0 discriminator 3
 420 0016 0134     		adds	r4, r4, #1
 421              	.LVL48:
 422              	.L35:
3440:..\FreeRTOS/tasks.c **** 	{
 423              		.loc 1 3440 0 is_stmt 0 discriminator 1
 424 0018 042C     		cmp	r4, #4
 425 001a F4D9     		bls	.L36
3445:..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 75


 426              		.loc 1 3445 0 is_stmt 1
 427 001c 0D4C     		ldr	r4, .L37+4
 428              	.LVL49:
 429 001e 2700     		movs	r7, r4
 430 0020 1437     		adds	r7, r7, #20
 431 0022 3800     		movs	r0, r7
 432 0024 FFF7FEFF 		bl	vListInitialise
 433              	.LVL50:
3446:..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 434              		.loc 1 3446 0
 435 0028 2600     		movs	r6, r4
 436 002a 2836     		adds	r6, r6, #40
 437 002c 3000     		movs	r0, r6
 438 002e FFF7FEFF 		bl	vListInitialise
 439              	.LVL51:
3447:..\FreeRTOS/tasks.c **** 
 440              		.loc 1 3447 0
 441 0032 074D     		ldr	r5, .L37
 442 0034 2800     		movs	r0, r5
 443 0036 1430     		adds	r0, r0, #20
 444 0038 FFF7FEFF 		bl	vListInitialise
 445              	.LVL52:
3451:..\FreeRTOS/tasks.c **** 	}
 446              		.loc 1 3451 0
 447 003c 2000     		movs	r0, r4
 448 003e 3C30     		adds	r0, r0, #60
 449 0040 FFF7FEFF 		bl	vListInitialise
 450              	.LVL53:
3457:..\FreeRTOS/tasks.c **** 	}
 451              		.loc 1 3457 0
 452 0044 2800     		movs	r0, r5
 453 0046 FFF7FEFF 		bl	vListInitialise
 454              	.LVL54:
3463:..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 455              		.loc 1 3463 0
 456 004a AF62     		str	r7, [r5, #40]
3464:..\FreeRTOS/tasks.c **** }
 457              		.loc 1 3464 0
 458 004c 2665     		str	r6, [r4, #80]
3465:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 459              		.loc 1 3465 0
 460              		@ sp needed
 461 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 462              	.L38:
 463              		.align	2
 464              	.L37:
 465 0050 00000000 		.word	.LANCHOR0
 466 0054 80000000 		.word	.LANCHOR1
 467              		.cfi_endproc
 468              	.LFE67:
 469              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 470              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 471              		.align	2
 472              		.code	16
 473              		.thumb_func
 474              		.type	prvAddNewTaskToReadyList, %function
 475              	prvAddNewTaskToReadyList:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 76


 476              	.LFB34:
1028:..\FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 477              		.loc 1 1028 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL55:
 482 0000 10B5     		push	{r4, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 4, -8
 485              		.cfi_offset 14, -4
 486 0002 0400     		movs	r4, r0
1031:..\FreeRTOS/tasks.c **** 	{
 487              		.loc 1 1031 0
 488 0004 FFF7FEFF 		bl	vPortEnterCritical
 489              	.LVL56:
1033:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 490              		.loc 1 1033 0
 491 0008 1E4B     		ldr	r3, .L44
 492 000a 5A6D     		ldr	r2, [r3, #84]
 493 000c 0132     		adds	r2, r2, #1
 494 000e 5A65     		str	r2, [r3, #84]
1034:..\FreeRTOS/tasks.c **** 		{
 495              		.loc 1 1034 0
 496 0010 9B6D     		ldr	r3, [r3, #88]
 497 0012 002B     		cmp	r3, #0
 498 0014 07D1     		bne	.L40
1038:..\FreeRTOS/tasks.c **** 
 499              		.loc 1 1038 0
 500 0016 1B4B     		ldr	r3, .L44
 501 0018 9C65     		str	r4, [r3, #88]
1040:..\FreeRTOS/tasks.c **** 			{
 502              		.loc 1 1040 0
 503 001a 5B6D     		ldr	r3, [r3, #84]
 504 001c 012B     		cmp	r3, #1
 505 001e 0ED1     		bne	.L41
1045:..\FreeRTOS/tasks.c **** 			}
 506              		.loc 1 1045 0
 507 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 508              	.LVL57:
 509 0024 0BE0     		b	.L41
 510              	.L40:
1057:..\FreeRTOS/tasks.c **** 			{
 511              		.loc 1 1057 0
 512 0026 174B     		ldr	r3, .L44
 513 0028 DB6D     		ldr	r3, [r3, #92]
 514 002a 002B     		cmp	r3, #0
 515 002c 07D1     		bne	.L41
1059:..\FreeRTOS/tasks.c **** 				{
 516              		.loc 1 1059 0
 517 002e 154B     		ldr	r3, .L44
 518 0030 9B6D     		ldr	r3, [r3, #88]
 519 0032 DB6A     		ldr	r3, [r3, #44]
 520 0034 E26A     		ldr	r2, [r4, #44]
 521 0036 9342     		cmp	r3, r2
 522 0038 01D8     		bhi	.L41
1061:..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 77


 523              		.loc 1 1061 0
 524 003a 124B     		ldr	r3, .L44
 525 003c 9C65     		str	r4, [r3, #88]
 526              	.L41:
1074:..\FreeRTOS/tasks.c **** 
 527              		.loc 1 1074 0
 528 003e 114A     		ldr	r2, .L44
 529 0040 136E     		ldr	r3, [r2, #96]
 530 0042 0133     		adds	r3, r3, #1
 531 0044 1366     		str	r3, [r2, #96]
1084:..\FreeRTOS/tasks.c **** 
 532              		.loc 1 1084 0
 533 0046 E36A     		ldr	r3, [r4, #44]
 534 0048 526E     		ldr	r2, [r2, #100]
 535 004a 9342     		cmp	r3, r2
 536 004c 01D9     		bls	.L42
1084:..\FreeRTOS/tasks.c **** 
 537              		.loc 1 1084 0 is_stmt 0 discriminator 1
 538 004e 0D4A     		ldr	r2, .L44
 539 0050 5366     		str	r3, [r2, #100]
 540              	.L42:
1084:..\FreeRTOS/tasks.c **** 
 541              		.loc 1 1084 0 discriminator 3
 542 0052 211D     		adds	r1, r4, #4
 543 0054 9A00     		lsls	r2, r3, #2
 544 0056 D318     		adds	r3, r2, r3
 545 0058 9A00     		lsls	r2, r3, #2
 546 005a 0B48     		ldr	r0, .L44+4
 547 005c 3030     		adds	r0, r0, #48
 548 005e 8018     		adds	r0, r0, r2
 549 0060 FFF7FEFF 		bl	vListInsertEnd
 550              	.LVL58:
1088:..\FreeRTOS/tasks.c **** 
 551              		.loc 1 1088 0 is_stmt 1 discriminator 3
 552 0064 FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL59:
1090:..\FreeRTOS/tasks.c **** 	{
 554              		.loc 1 1090 0 discriminator 3
 555 0068 064B     		ldr	r3, .L44
 556 006a DB6D     		ldr	r3, [r3, #92]
 557 006c 002B     		cmp	r3, #0
 558 006e 07D0     		beq	.L39
1094:..\FreeRTOS/tasks.c **** 		{
 559              		.loc 1 1094 0
 560 0070 044B     		ldr	r3, .L44
 561 0072 9B6D     		ldr	r3, [r3, #88]
 562 0074 DA6A     		ldr	r2, [r3, #44]
 563 0076 E36A     		ldr	r3, [r4, #44]
 564 0078 9A42     		cmp	r2, r3
 565 007a 01D2     		bcs	.L39
1096:..\FreeRTOS/tasks.c **** 		}
 566              		.loc 1 1096 0
 567 007c FFF7FEFF 		bl	vPortYield
 568              	.LVL60:
 569              	.L39:
1107:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 570              		.loc 1 1107 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 78


 571              		@ sp needed
 572              	.LVL61:
 573 0080 10BD     		pop	{r4, pc}
 574              	.L45:
 575 0082 C046     		.align	2
 576              	.L44:
 577 0084 80000000 		.word	.LANCHOR1
 578 0088 00000000 		.word	.LANCHOR0
 579              		.cfi_endproc
 580              	.LFE34:
 581              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 582              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 583              		.align	2
 584              		.code	16
 585              		.thumb_func
 586              		.type	prvCheckTasksWaitingTermination, %function
 587              	prvCheckTasksWaitingTermination:
 588              	.LFB68:
3469:..\FreeRTOS/tasks.c **** 
 589              		.loc 1 3469 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593 0000 70B5     		push	{r4, r5, r6, lr}
 594              		.cfi_def_cfa_offset 16
 595              		.cfi_offset 4, -16
 596              		.cfi_offset 5, -12
 597              		.cfi_offset 6, -8
 598              		.cfi_offset 14, -4
 599              	.LBB2:
3479:..\FreeRTOS/tasks.c **** 		{
 600              		.loc 1 3479 0
 601 0002 12E0     		b	.L47
 602              	.L48:
3481:..\FreeRTOS/tasks.c **** 			{
 603              		.loc 1 3481 0
 604 0004 FFF7FEFF 		bl	vPortEnterCritical
 605              	.LVL62:
3483:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 606              		.loc 1 3483 0
 607 0008 0A4C     		ldr	r4, .L49
 608 000a A36C     		ldr	r3, [r4, #72]
 609 000c DD68     		ldr	r5, [r3, #12]
 610              	.LVL63:
3484:..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 611              		.loc 1 3484 0
 612 000e 281D     		adds	r0, r5, #4
 613 0010 FFF7FEFF 		bl	uxListRemove
 614              	.LVL64:
3485:..\FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 615              		.loc 1 3485 0
 616 0014 636D     		ldr	r3, [r4, #84]
 617 0016 013B     		subs	r3, r3, #1
 618 0018 6365     		str	r3, [r4, #84]
3486:..\FreeRTOS/tasks.c **** 			}
 619              		.loc 1 3486 0
 620 001a A36E     		ldr	r3, [r4, #104]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 79


 621 001c 013B     		subs	r3, r3, #1
 622 001e A366     		str	r3, [r4, #104]
3488:..\FreeRTOS/tasks.c **** 
 623              		.loc 1 3488 0
 624 0020 FFF7FEFF 		bl	vPortExitCritical
 625              	.LVL65:
3490:..\FreeRTOS/tasks.c **** 		}
 626              		.loc 1 3490 0
 627 0024 2800     		movs	r0, r5
 628 0026 FFF7FEFF 		bl	prvDeleteTCB
 629              	.LVL66:
 630              	.L47:
3479:..\FreeRTOS/tasks.c **** 		{
 631              		.loc 1 3479 0
 632 002a 024B     		ldr	r3, .L49
 633 002c 9B6E     		ldr	r3, [r3, #104]
 634 002e 002B     		cmp	r3, #0
 635 0030 E8D1     		bne	.L48
 636              	.LBE2:
3494:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 637              		.loc 1 3494 0
 638              		@ sp needed
 639 0032 70BD     		pop	{r4, r5, r6, pc}
 640              	.L50:
 641              		.align	2
 642              	.L49:
 643 0034 80000000 		.word	.LANCHOR1
 644              		.cfi_endproc
 645              	.LFE68:
 646              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 647              		.section	.text.prvIdleTask,"ax",%progbits
 648              		.align	2
 649              		.code	16
 650              		.thumb_func
 651              		.type	prvIdleTask, %function
 652              	prvIdleTask:
 653              	.LFB64:
3225:..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
 654              		.loc 1 3225 0
 655              		.cfi_startproc
 656              		@ Volatile: function does not return.
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              	.LVL67:
 660 0000 10B5     		push	{r4, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 4, -8
 663              		.cfi_offset 14, -4
 664              	.LVL68:
 665              	.L52:
3241:..\FreeRTOS/tasks.c **** 
 666              		.loc 1 3241 0 discriminator 1
 667 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 668              	.LVL69:
 669 0006 FCE7     		b	.L52
 670              		.cfi_endproc
 671              	.LFE64:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 80


 672              		.size	prvIdleTask, .-prvIdleTask
 673              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 674              		.align	2
 675              		.code	16
 676              		.thumb_func
 677              		.type	prvAddCurrentTaskToDelayedList, %function
 678              	prvAddCurrentTaskToDelayedList:
 679              	.LFB86:
3752:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3753:..\FreeRTOS/tasks.c **** 
3754:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:..\FreeRTOS/tasks.c **** 
3756:..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:..\FreeRTOS/tasks.c **** 	{
3758:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3759:..\FreeRTOS/tasks.c **** 
3760:..\FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3761:..\FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:..\FreeRTOS/tasks.c **** 		individual execution thread. */
3763:..\FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
3764:..\FreeRTOS/tasks.c **** 
3765:..\FreeRTOS/tasks.c **** 		return xReturn;
3766:..\FreeRTOS/tasks.c **** 	}
3767:..\FreeRTOS/tasks.c **** 
3768:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3770:..\FreeRTOS/tasks.c **** 
3771:..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:..\FreeRTOS/tasks.c **** 
3773:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:..\FreeRTOS/tasks.c **** 	{
3775:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
3776:..\FreeRTOS/tasks.c **** 
3777:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3778:..\FreeRTOS/tasks.c **** 		{
3779:..\FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3780:..\FreeRTOS/tasks.c **** 		}
3781:..\FreeRTOS/tasks.c **** 		else
3782:..\FreeRTOS/tasks.c **** 		{
3783:..\FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3784:..\FreeRTOS/tasks.c **** 			{
3785:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3786:..\FreeRTOS/tasks.c **** 			}
3787:..\FreeRTOS/tasks.c **** 			else
3788:..\FreeRTOS/tasks.c **** 			{
3789:..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3790:..\FreeRTOS/tasks.c **** 			}
3791:..\FreeRTOS/tasks.c **** 		}
3792:..\FreeRTOS/tasks.c **** 
3793:..\FreeRTOS/tasks.c **** 		return xReturn;
3794:..\FreeRTOS/tasks.c **** 	}
3795:..\FreeRTOS/tasks.c **** 
3796:..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3798:..\FreeRTOS/tasks.c **** 
3799:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 81


3801:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:..\FreeRTOS/tasks.c **** 	{
3803:..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3804:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3805:..\FreeRTOS/tasks.c **** 
3806:..\FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:..\FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:..\FreeRTOS/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3810:..\FreeRTOS/tasks.c **** 		{
3811:..\FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:..\FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:..\FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:..\FreeRTOS/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3815:..\FreeRTOS/tasks.c **** 			{
3816:..\FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:..\FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:..\FreeRTOS/tasks.c **** 				not being used for anything else. */
3819:..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3820:..\FreeRTOS/tasks.c **** 				{
3821:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3822:..\FreeRTOS/tasks.c **** 				}
3823:..\FreeRTOS/tasks.c **** 				else
3824:..\FreeRTOS/tasks.c **** 				{
3825:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:..\FreeRTOS/tasks.c **** 				}
3827:..\FreeRTOS/tasks.c **** 
3828:..\FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:..\FreeRTOS/tasks.c **** 				to be moved into a new list. */
3830:..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3831:..\FreeRTOS/tasks.c **** 				{
3832:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3833:..\FreeRTOS/tasks.c **** 					{
3834:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3835:..\FreeRTOS/tasks.c **** 					}
3836:..\FreeRTOS/tasks.c **** 					else
3837:..\FreeRTOS/tasks.c **** 					{
3838:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:..\FreeRTOS/tasks.c **** 					}
3840:..\FreeRTOS/tasks.c **** 
3841:..\FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:..\FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3844:..\FreeRTOS/tasks.c **** 				}
3845:..\FreeRTOS/tasks.c **** 				else
3846:..\FreeRTOS/tasks.c **** 				{
3847:..\FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3848:..\FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3849:..\FreeRTOS/tasks.c **** 				}
3850:..\FreeRTOS/tasks.c **** 
3851:..\FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:..\FreeRTOS/tasks.c **** 
3853:..\FreeRTOS/tasks.c **** 				/* Inheritance occurred. */
3854:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
3855:..\FreeRTOS/tasks.c **** 			}
3856:..\FreeRTOS/tasks.c **** 			else
3857:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 82


3858:..\FreeRTOS/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3859:..\FreeRTOS/tasks.c **** 				{
3860:..\FreeRTOS/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:..\FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:..\FreeRTOS/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:..\FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex.
3864:..\FreeRTOS/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:..\FreeRTOS/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:..\FreeRTOS/tasks.c **** 					not been the case. */
3867:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
3868:..\FreeRTOS/tasks.c **** 				}
3869:..\FreeRTOS/tasks.c **** 				else
3870:..\FreeRTOS/tasks.c **** 				{
3871:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:..\FreeRTOS/tasks.c **** 				}
3873:..\FreeRTOS/tasks.c **** 			}
3874:..\FreeRTOS/tasks.c **** 		}
3875:..\FreeRTOS/tasks.c **** 		else
3876:..\FreeRTOS/tasks.c **** 		{
3877:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3878:..\FreeRTOS/tasks.c **** 		}
3879:..\FreeRTOS/tasks.c **** 
3880:..\FreeRTOS/tasks.c **** 		return xReturn;
3881:..\FreeRTOS/tasks.c **** 	}
3882:..\FreeRTOS/tasks.c **** 
3883:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3884:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3885:..\FreeRTOS/tasks.c **** 
3886:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:..\FreeRTOS/tasks.c **** 
3888:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:..\FreeRTOS/tasks.c **** 	{
3890:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3891:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3892:..\FreeRTOS/tasks.c **** 
3893:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3894:..\FreeRTOS/tasks.c **** 		{
3895:..\FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:..\FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:..\FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:..\FreeRTOS/tasks.c **** 			be the running state task. */
3899:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3900:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3901:..\FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3902:..\FreeRTOS/tasks.c **** 
3903:..\FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:..\FreeRTOS/tasks.c **** 			task? */
3905:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3906:..\FreeRTOS/tasks.c **** 			{
3907:..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3909:..\FreeRTOS/tasks.c **** 				{
3910:..\FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:..\FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:..\FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:..\FreeRTOS/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:..\FreeRTOS/tasks.c **** 					the holding task from the ready list. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 83


3915:..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3916:..\FreeRTOS/tasks.c **** 					{
3917:..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3918:..\FreeRTOS/tasks.c **** 					}
3919:..\FreeRTOS/tasks.c **** 					else
3920:..\FreeRTOS/tasks.c **** 					{
3921:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:..\FreeRTOS/tasks.c **** 					}
3923:..\FreeRTOS/tasks.c **** 
3924:..\FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:..\FreeRTOS/tasks.c **** 					new	ready list. */
3926:..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3928:..\FreeRTOS/tasks.c **** 
3929:..\FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:..\FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3931:..\FreeRTOS/tasks.c **** 					running to give back the mutex. */
3932:..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3933:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3934:..\FreeRTOS/tasks.c **** 
3935:..\FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:..\FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3937:..\FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:..\FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
3939:..\FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:..\FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3941:..\FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:..\FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
3943:..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
3944:..\FreeRTOS/tasks.c **** 				}
3945:..\FreeRTOS/tasks.c **** 				else
3946:..\FreeRTOS/tasks.c **** 				{
3947:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3948:..\FreeRTOS/tasks.c **** 				}
3949:..\FreeRTOS/tasks.c **** 			}
3950:..\FreeRTOS/tasks.c **** 			else
3951:..\FreeRTOS/tasks.c **** 			{
3952:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:..\FreeRTOS/tasks.c **** 			}
3954:..\FreeRTOS/tasks.c **** 		}
3955:..\FreeRTOS/tasks.c **** 		else
3956:..\FreeRTOS/tasks.c **** 		{
3957:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:..\FreeRTOS/tasks.c **** 		}
3959:..\FreeRTOS/tasks.c **** 
3960:..\FreeRTOS/tasks.c **** 		return xReturn;
3961:..\FreeRTOS/tasks.c **** 	}
3962:..\FreeRTOS/tasks.c **** 
3963:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3964:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3965:..\FreeRTOS/tasks.c **** 
3966:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:..\FreeRTOS/tasks.c **** 
3968:..\FreeRTOS/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:..\FreeRTOS/tasks.c **** 	{
3970:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3971:..\FreeRTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 84


3972:..\FreeRTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3973:..\FreeRTOS/tasks.c **** 
3974:..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3975:..\FreeRTOS/tasks.c **** 		{
3976:..\FreeRTOS/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:..\FreeRTOS/tasks.c **** 			one mutex. */
3978:..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3979:..\FreeRTOS/tasks.c **** 
3980:..\FreeRTOS/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:..\FreeRTOS/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:..\FreeRTOS/tasks.c **** 			holding task's base priority and the priority of the highest
3983:..\FreeRTOS/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3985:..\FreeRTOS/tasks.c **** 			{
3986:..\FreeRTOS/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3987:..\FreeRTOS/tasks.c **** 			}
3988:..\FreeRTOS/tasks.c **** 			else
3989:..\FreeRTOS/tasks.c **** 			{
3990:..\FreeRTOS/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3991:..\FreeRTOS/tasks.c **** 			}
3992:..\FreeRTOS/tasks.c **** 
3993:..\FreeRTOS/tasks.c **** 			/* Does the priority need to change? */
3994:..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3995:..\FreeRTOS/tasks.c **** 			{
3996:..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:..\FreeRTOS/tasks.c **** 				simplification in the priority inheritance implementation.  If
3998:..\FreeRTOS/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:..\FreeRTOS/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4001:..\FreeRTOS/tasks.c **** 				{
4002:..\FreeRTOS/tasks.c **** 					/* If a task has timed out because it already holds the
4003:..\FreeRTOS/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:..\FreeRTOS/tasks.c **** 					its own priority. */
4005:..\FreeRTOS/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4006:..\FreeRTOS/tasks.c **** 
4007:..\FreeRTOS/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:..\FreeRTOS/tasks.c **** 					priority to facilitate determining the subject task's
4009:..\FreeRTOS/tasks.c **** 					state. */
4010:..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:..\FreeRTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4012:..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4013:..\FreeRTOS/tasks.c **** 
4014:..\FreeRTOS/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:..\FreeRTOS/tasks.c **** 					being used for anything else. */
4016:..\FreeRTOS/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4017:..\FreeRTOS/tasks.c **** 					{
4018:..\FreeRTOS/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4019:..\FreeRTOS/tasks.c **** 					}
4020:..\FreeRTOS/tasks.c **** 					else
4021:..\FreeRTOS/tasks.c **** 					{
4022:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:..\FreeRTOS/tasks.c **** 					}
4024:..\FreeRTOS/tasks.c **** 
4025:..\FreeRTOS/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:..\FreeRTOS/tasks.c **** 					then the task that holds the mutex could be in either the
4027:..\FreeRTOS/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:..\FreeRTOS/tasks.c **** 					from its current state list if it is in the Ready state as
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 85


4029:..\FreeRTOS/tasks.c **** 					the task's priority is going to change and there is one
4030:..\FreeRTOS/tasks.c **** 					Ready list per priority. */
4031:..\FreeRTOS/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4032:..\FreeRTOS/tasks.c **** 					{
4033:..\FreeRTOS/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4034:..\FreeRTOS/tasks.c **** 						{
4035:..\FreeRTOS/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4036:..\FreeRTOS/tasks.c **** 						}
4037:..\FreeRTOS/tasks.c **** 						else
4038:..\FreeRTOS/tasks.c **** 						{
4039:..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:..\FreeRTOS/tasks.c **** 						}
4041:..\FreeRTOS/tasks.c **** 
4042:..\FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4043:..\FreeRTOS/tasks.c **** 					}
4044:..\FreeRTOS/tasks.c **** 					else
4045:..\FreeRTOS/tasks.c **** 					{
4046:..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:..\FreeRTOS/tasks.c **** 					}
4048:..\FreeRTOS/tasks.c **** 				}
4049:..\FreeRTOS/tasks.c **** 				else
4050:..\FreeRTOS/tasks.c **** 				{
4051:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:..\FreeRTOS/tasks.c **** 				}
4053:..\FreeRTOS/tasks.c **** 			}
4054:..\FreeRTOS/tasks.c **** 			else
4055:..\FreeRTOS/tasks.c **** 			{
4056:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:..\FreeRTOS/tasks.c **** 			}
4058:..\FreeRTOS/tasks.c **** 		}
4059:..\FreeRTOS/tasks.c **** 		else
4060:..\FreeRTOS/tasks.c **** 		{
4061:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4062:..\FreeRTOS/tasks.c **** 		}
4063:..\FreeRTOS/tasks.c **** 	}
4064:..\FreeRTOS/tasks.c **** 
4065:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4066:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4067:..\FreeRTOS/tasks.c **** 
4068:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:..\FreeRTOS/tasks.c **** 
4070:..\FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
4071:..\FreeRTOS/tasks.c **** 	{
4072:..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
4073:..\FreeRTOS/tasks.c **** 
4074:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:..\FreeRTOS/tasks.c **** 		{
4076:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:..\FreeRTOS/tasks.c **** 
4078:..\FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:..\FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:..\FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:..\FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:..\FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:..\FreeRTOS/tasks.c **** 			critical section. */
4084:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 86


4086:..\FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:..\FreeRTOS/tasks.c **** 			}
4088:..\FreeRTOS/tasks.c **** 		}
4089:..\FreeRTOS/tasks.c **** 		else
4090:..\FreeRTOS/tasks.c **** 		{
4091:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:..\FreeRTOS/tasks.c **** 		}
4093:..\FreeRTOS/tasks.c **** 	}
4094:..\FreeRTOS/tasks.c **** 
4095:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4097:..\FreeRTOS/tasks.c **** 
4098:..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:..\FreeRTOS/tasks.c **** 
4100:..\FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
4101:..\FreeRTOS/tasks.c **** 	{
4102:..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:..\FreeRTOS/tasks.c **** 		{
4104:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:..\FreeRTOS/tasks.c **** 			{
4106:..\FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:..\FreeRTOS/tasks.c **** 
4108:..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:..\FreeRTOS/tasks.c **** 				{
4110:..\FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
4111:..\FreeRTOS/tasks.c **** 				}
4112:..\FreeRTOS/tasks.c **** 				else
4113:..\FreeRTOS/tasks.c **** 				{
4114:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:..\FreeRTOS/tasks.c **** 				}
4116:..\FreeRTOS/tasks.c **** 			}
4117:..\FreeRTOS/tasks.c **** 			else
4118:..\FreeRTOS/tasks.c **** 			{
4119:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:..\FreeRTOS/tasks.c **** 			}
4121:..\FreeRTOS/tasks.c **** 		}
4122:..\FreeRTOS/tasks.c **** 		else
4123:..\FreeRTOS/tasks.c **** 		{
4124:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:..\FreeRTOS/tasks.c **** 		}
4126:..\FreeRTOS/tasks.c **** 	}
4127:..\FreeRTOS/tasks.c **** 
4128:..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4130:..\FreeRTOS/tasks.c **** 
4131:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:..\FreeRTOS/tasks.c **** 
4133:..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:..\FreeRTOS/tasks.c **** 	{
4135:..\FreeRTOS/tasks.c **** 	size_t x;
4136:..\FreeRTOS/tasks.c **** 
4137:..\FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
4138:..\FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4139:..\FreeRTOS/tasks.c **** 
4140:..\FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:..\FreeRTOS/tasks.c **** 		printed out. */
4142:..\FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 87


4143:..\FreeRTOS/tasks.c **** 		{
4144:..\FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
4145:..\FreeRTOS/tasks.c **** 		}
4146:..\FreeRTOS/tasks.c **** 
4147:..\FreeRTOS/tasks.c **** 		/* Terminate. */
4148:..\FreeRTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
4149:..\FreeRTOS/tasks.c **** 
4150:..\FreeRTOS/tasks.c **** 		/* Return the new end of string. */
4151:..\FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
4152:..\FreeRTOS/tasks.c **** 	}
4153:..\FreeRTOS/tasks.c **** 
4154:..\FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4156:..\FreeRTOS/tasks.c **** 
4157:..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:..\FreeRTOS/tasks.c **** 
4159:..\FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:..\FreeRTOS/tasks.c **** 	{
4161:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4163:..\FreeRTOS/tasks.c **** 	char cStatus;
4164:..\FreeRTOS/tasks.c **** 
4165:..\FreeRTOS/tasks.c **** 		/*
4166:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4167:..\FreeRTOS/tasks.c **** 		 *
4168:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4169:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:..\FreeRTOS/tasks.c **** 		 * scheduler.
4171:..\FreeRTOS/tasks.c **** 		 *
4172:..\FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:..\FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:..\FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
4175:..\FreeRTOS/tasks.c **** 		 *
4176:..\FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:..\FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:..\FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:..\FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:..\FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:..\FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:..\FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
4183:..\FreeRTOS/tasks.c **** 		 *
4184:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
4187:..\FreeRTOS/tasks.c **** 		 */
4188:..\FreeRTOS/tasks.c **** 
4189:..\FreeRTOS/tasks.c **** 
4190:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4192:..\FreeRTOS/tasks.c **** 
4193:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:..\FreeRTOS/tasks.c **** 		function is executing. */
4195:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4196:..\FreeRTOS/tasks.c **** 
4197:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:..\FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:..\FreeRTOS/tasks.c **** 		equate to NULL. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 88


4200:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4201:..\FreeRTOS/tasks.c **** 
4202:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4203:..\FreeRTOS/tasks.c **** 		{
4204:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4205:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4206:..\FreeRTOS/tasks.c **** 
4207:..\FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:..\FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4209:..\FreeRTOS/tasks.c **** 			{
4210:..\FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4211:..\FreeRTOS/tasks.c **** 				{
4212:..\FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4213:..\FreeRTOS/tasks.c **** 										break;
4214:..\FreeRTOS/tasks.c **** 
4215:..\FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4216:..\FreeRTOS/tasks.c **** 										break;
4217:..\FreeRTOS/tasks.c **** 
4218:..\FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4219:..\FreeRTOS/tasks.c **** 										break;
4220:..\FreeRTOS/tasks.c **** 
4221:..\FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4222:..\FreeRTOS/tasks.c **** 										break;
4223:..\FreeRTOS/tasks.c **** 
4224:..\FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4225:..\FreeRTOS/tasks.c **** 										to prevent static checking errors. */
4226:..\FreeRTOS/tasks.c **** 										cStatus = 0x00;
4227:..\FreeRTOS/tasks.c **** 										break;
4228:..\FreeRTOS/tasks.c **** 				}
4229:..\FreeRTOS/tasks.c **** 
4230:..\FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4231:..\FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
4232:..\FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4233:..\FreeRTOS/tasks.c **** 
4234:..\FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
4235:..\FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4236:..\FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4237:..\FreeRTOS/tasks.c **** 			}
4238:..\FreeRTOS/tasks.c **** 
4239:..\FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4240:..\FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4241:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4242:..\FreeRTOS/tasks.c **** 		}
4243:..\FreeRTOS/tasks.c **** 		else
4244:..\FreeRTOS/tasks.c **** 		{
4245:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4246:..\FreeRTOS/tasks.c **** 		}
4247:..\FreeRTOS/tasks.c **** 	}
4248:..\FreeRTOS/tasks.c **** 
4249:..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4250:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4251:..\FreeRTOS/tasks.c **** 
4252:..\FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4253:..\FreeRTOS/tasks.c **** 
4254:..\FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4255:..\FreeRTOS/tasks.c **** 	{
4256:..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 89


4257:..\FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4258:..\FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4259:..\FreeRTOS/tasks.c **** 
4260:..\FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4261:..\FreeRTOS/tasks.c **** 		{
4262:..\FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4263:..\FreeRTOS/tasks.c **** 		}
4264:..\FreeRTOS/tasks.c **** 		#endif
4265:..\FreeRTOS/tasks.c **** 
4266:..\FreeRTOS/tasks.c **** 		/*
4267:..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4268:..\FreeRTOS/tasks.c **** 		 *
4269:..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4270:..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4271:..\FreeRTOS/tasks.c **** 		 * scheduler.
4272:..\FreeRTOS/tasks.c **** 		 *
4273:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4274:..\FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4275:..\FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4276:..\FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
4277:..\FreeRTOS/tasks.c **** 		 *
4278:..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4279:..\FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4280:..\FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4281:..\FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4282:..\FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4283:..\FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4284:..\FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
4285:..\FreeRTOS/tasks.c **** 		 *
4286:..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4287:..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4288:..\FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4289:..\FreeRTOS/tasks.c **** 		 */
4290:..\FreeRTOS/tasks.c **** 
4291:..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4292:..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4293:..\FreeRTOS/tasks.c **** 
4294:..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4295:..\FreeRTOS/tasks.c **** 		function is executing. */
4296:..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4297:..\FreeRTOS/tasks.c **** 
4298:..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4299:..\FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4300:..\FreeRTOS/tasks.c **** 		equate to NULL. */
4301:..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4302:..\FreeRTOS/tasks.c **** 
4303:..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4304:..\FreeRTOS/tasks.c **** 		{
4305:..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4306:..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4307:..\FreeRTOS/tasks.c **** 
4308:..\FreeRTOS/tasks.c **** 			/* For percentage calculations. */
4309:..\FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
4310:..\FreeRTOS/tasks.c **** 
4311:..\FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4312:..\FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
4313:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 90


4314:..\FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4315:..\FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4316:..\FreeRTOS/tasks.c **** 				{
4317:..\FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4318:..\FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4319:..\FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4320:..\FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4321:..\FreeRTOS/tasks.c **** 
4322:..\FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
4323:..\FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4324:..\FreeRTOS/tasks.c **** 					easily. */
4325:..\FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4326:..\FreeRTOS/tasks.c **** 
4327:..\FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4328:..\FreeRTOS/tasks.c **** 					{
4329:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4330:..\FreeRTOS/tasks.c **** 						{
4331:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4332:..\FreeRTOS/tasks.c **** 						}
4333:..\FreeRTOS/tasks.c **** 						#else
4334:..\FreeRTOS/tasks.c **** 						{
4335:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4336:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
4337:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4338:..\FreeRTOS/tasks.c **** 						}
4339:..\FreeRTOS/tasks.c **** 						#endif
4340:..\FreeRTOS/tasks.c **** 					}
4341:..\FreeRTOS/tasks.c **** 					else
4342:..\FreeRTOS/tasks.c **** 					{
4343:..\FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4344:..\FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4345:..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4346:..\FreeRTOS/tasks.c **** 						{
4347:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4348:..\FreeRTOS/tasks.c **** 						}
4349:..\FreeRTOS/tasks.c **** 						#else
4350:..\FreeRTOS/tasks.c **** 						{
4351:..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4352:..\FreeRTOS/tasks.c **** 							printf() library can be used. */
4353:..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4354:..\FreeRTOS/tasks.c **** 						}
4355:..\FreeRTOS/tasks.c **** 						#endif
4356:..\FreeRTOS/tasks.c **** 					}
4357:..\FreeRTOS/tasks.c **** 
4358:..\FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4359:..\FreeRTOS/tasks.c **** 				}
4360:..\FreeRTOS/tasks.c **** 			}
4361:..\FreeRTOS/tasks.c **** 			else
4362:..\FreeRTOS/tasks.c **** 			{
4363:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4364:..\FreeRTOS/tasks.c **** 			}
4365:..\FreeRTOS/tasks.c **** 
4366:..\FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4367:..\FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4368:..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4369:..\FreeRTOS/tasks.c **** 		}
4370:..\FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 91


4371:..\FreeRTOS/tasks.c **** 		{
4372:..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4373:..\FreeRTOS/tasks.c **** 		}
4374:..\FreeRTOS/tasks.c **** 	}
4375:..\FreeRTOS/tasks.c **** 
4376:..\FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4377:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4378:..\FreeRTOS/tasks.c **** 
4379:..\FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4380:..\FreeRTOS/tasks.c **** {
4381:..\FreeRTOS/tasks.c **** TickType_t uxReturn;
4382:..\FreeRTOS/tasks.c **** 
4383:..\FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4384:..\FreeRTOS/tasks.c **** 
4385:..\FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4386:..\FreeRTOS/tasks.c **** 	queues and semaphores. */
4387:..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4388:..\FreeRTOS/tasks.c **** 
4389:..\FreeRTOS/tasks.c **** 	return uxReturn;
4390:..\FreeRTOS/tasks.c **** }
4391:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4392:..\FreeRTOS/tasks.c **** 
4393:..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4394:..\FreeRTOS/tasks.c **** 
4395:..\FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4396:..\FreeRTOS/tasks.c **** 	{
4397:..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4398:..\FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4399:..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
4400:..\FreeRTOS/tasks.c **** 		{
4401:..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4402:..\FreeRTOS/tasks.c **** 		}
4403:..\FreeRTOS/tasks.c **** 
4404:..\FreeRTOS/tasks.c **** 		return pxCurrentTCB;
4405:..\FreeRTOS/tasks.c **** 	}
4406:..\FreeRTOS/tasks.c **** 
4407:..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4408:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4409:..\FreeRTOS/tasks.c **** 
4410:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4411:..\FreeRTOS/tasks.c **** 
4412:..\FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4413:..\FreeRTOS/tasks.c **** 	{
4414:..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
4415:..\FreeRTOS/tasks.c **** 
4416:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4417:..\FreeRTOS/tasks.c **** 		{
4418:..\FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4419:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4420:..\FreeRTOS/tasks.c **** 			{
4421:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4422:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4423:..\FreeRTOS/tasks.c **** 
4424:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4425:..\FreeRTOS/tasks.c **** 				{
4426:..\FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4427:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 92


4428:..\FreeRTOS/tasks.c **** 
4429:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4430:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4431:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4432:..\FreeRTOS/tasks.c **** 					application code should ever do. */
4433:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4434:..\FreeRTOS/tasks.c **** 				}
4435:..\FreeRTOS/tasks.c **** 				else
4436:..\FreeRTOS/tasks.c **** 				{
4437:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4438:..\FreeRTOS/tasks.c **** 				}
4439:..\FreeRTOS/tasks.c **** 			}
4440:..\FreeRTOS/tasks.c **** 			else
4441:..\FreeRTOS/tasks.c **** 			{
4442:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4443:..\FreeRTOS/tasks.c **** 			}
4444:..\FreeRTOS/tasks.c **** 		}
4445:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4446:..\FreeRTOS/tasks.c **** 
4447:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4448:..\FreeRTOS/tasks.c **** 		{
4449:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4450:..\FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4451:..\FreeRTOS/tasks.c **** 
4452:..\FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
4453:..\FreeRTOS/tasks.c **** 			{
4454:..\FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4455:..\FreeRTOS/tasks.c **** 				{
4456:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4457:..\FreeRTOS/tasks.c **** 				}
4458:..\FreeRTOS/tasks.c **** 				else
4459:..\FreeRTOS/tasks.c **** 				{
4460:..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4461:..\FreeRTOS/tasks.c **** 				}
4462:..\FreeRTOS/tasks.c **** 			}
4463:..\FreeRTOS/tasks.c **** 			else
4464:..\FreeRTOS/tasks.c **** 			{
4465:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4466:..\FreeRTOS/tasks.c **** 			}
4467:..\FreeRTOS/tasks.c **** 
4468:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4469:..\FreeRTOS/tasks.c **** 		}
4470:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4471:..\FreeRTOS/tasks.c **** 
4472:..\FreeRTOS/tasks.c **** 		return ulReturn;
4473:..\FreeRTOS/tasks.c **** 	}
4474:..\FreeRTOS/tasks.c **** 
4475:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4476:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4477:..\FreeRTOS/tasks.c **** 
4478:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4479:..\FreeRTOS/tasks.c **** 
4480:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4481:..\FreeRTOS/tasks.c **** 	{
4482:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4483:..\FreeRTOS/tasks.c **** 
4484:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 93


4485:..\FreeRTOS/tasks.c **** 		{
4486:..\FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4487:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4488:..\FreeRTOS/tasks.c **** 			{
4489:..\FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4490:..\FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4491:..\FreeRTOS/tasks.c **** 				clear the value to zero. */
4492:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4493:..\FreeRTOS/tasks.c **** 
4494:..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4495:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4496:..\FreeRTOS/tasks.c **** 
4497:..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4498:..\FreeRTOS/tasks.c **** 				{
4499:..\FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4500:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4501:..\FreeRTOS/tasks.c **** 
4502:..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4503:..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4504:..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4505:..\FreeRTOS/tasks.c **** 					application code should ever do. */
4506:..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4507:..\FreeRTOS/tasks.c **** 				}
4508:..\FreeRTOS/tasks.c **** 				else
4509:..\FreeRTOS/tasks.c **** 				{
4510:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4511:..\FreeRTOS/tasks.c **** 				}
4512:..\FreeRTOS/tasks.c **** 			}
4513:..\FreeRTOS/tasks.c **** 			else
4514:..\FreeRTOS/tasks.c **** 			{
4515:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4516:..\FreeRTOS/tasks.c **** 			}
4517:..\FreeRTOS/tasks.c **** 		}
4518:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4519:..\FreeRTOS/tasks.c **** 
4520:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4521:..\FreeRTOS/tasks.c **** 		{
4522:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4523:..\FreeRTOS/tasks.c **** 
4524:..\FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
4525:..\FreeRTOS/tasks.c **** 			{
4526:..\FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4527:..\FreeRTOS/tasks.c **** 				have changed. */
4528:..\FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4529:..\FreeRTOS/tasks.c **** 			}
4530:..\FreeRTOS/tasks.c **** 
4531:..\FreeRTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4532:..\FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4533:..\FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4534:..\FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4535:..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4536:..\FreeRTOS/tasks.c **** 			{
4537:..\FreeRTOS/tasks.c **** 				/* A notification was not received. */
4538:..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
4539:..\FreeRTOS/tasks.c **** 			}
4540:..\FreeRTOS/tasks.c **** 			else
4541:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 94


4542:..\FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4543:..\FreeRTOS/tasks.c **** 				received while the task was waiting. */
4544:..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4545:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
4546:..\FreeRTOS/tasks.c **** 			}
4547:..\FreeRTOS/tasks.c **** 
4548:..\FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4549:..\FreeRTOS/tasks.c **** 		}
4550:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4551:..\FreeRTOS/tasks.c **** 
4552:..\FreeRTOS/tasks.c **** 		return xReturn;
4553:..\FreeRTOS/tasks.c **** 	}
4554:..\FreeRTOS/tasks.c **** 
4555:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4556:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4557:..\FreeRTOS/tasks.c **** 
4558:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4559:..\FreeRTOS/tasks.c **** 
4560:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4561:..\FreeRTOS/tasks.c **** 	{
4562:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4563:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4564:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4565:..\FreeRTOS/tasks.c **** 
4566:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4567:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4568:..\FreeRTOS/tasks.c **** 
4569:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4570:..\FreeRTOS/tasks.c **** 		{
4571:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4572:..\FreeRTOS/tasks.c **** 			{
4573:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4574:..\FreeRTOS/tasks.c **** 			}
4575:..\FreeRTOS/tasks.c **** 
4576:..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4577:..\FreeRTOS/tasks.c **** 
4578:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4579:..\FreeRTOS/tasks.c **** 
4580:..\FreeRTOS/tasks.c **** 			switch( eAction )
4581:..\FreeRTOS/tasks.c **** 			{
4582:..\FreeRTOS/tasks.c **** 				case eSetBits	:
4583:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4584:..\FreeRTOS/tasks.c **** 					break;
4585:..\FreeRTOS/tasks.c **** 
4586:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4587:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4588:..\FreeRTOS/tasks.c **** 					break;
4589:..\FreeRTOS/tasks.c **** 
4590:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4591:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4592:..\FreeRTOS/tasks.c **** 					break;
4593:..\FreeRTOS/tasks.c **** 
4594:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4595:..\FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4596:..\FreeRTOS/tasks.c **** 					{
4597:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4598:..\FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 95


4599:..\FreeRTOS/tasks.c **** 					else
4600:..\FreeRTOS/tasks.c **** 					{
4601:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4602:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4603:..\FreeRTOS/tasks.c **** 					}
4604:..\FreeRTOS/tasks.c **** 					break;
4605:..\FreeRTOS/tasks.c **** 
4606:..\FreeRTOS/tasks.c **** 				case eNoAction:
4607:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4608:..\FreeRTOS/tasks.c **** 					updated. */
4609:..\FreeRTOS/tasks.c **** 					break;
4610:..\FreeRTOS/tasks.c **** 			}
4611:..\FreeRTOS/tasks.c **** 
4612:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4613:..\FreeRTOS/tasks.c **** 
4614:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4615:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4616:..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4617:..\FreeRTOS/tasks.c **** 			{
4618:..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4619:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4620:..\FreeRTOS/tasks.c **** 
4621:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4622:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4623:..\FreeRTOS/tasks.c **** 
4624:..\FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4625:..\FreeRTOS/tasks.c **** 				{
4626:..\FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4627:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4628:..\FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4629:..\FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4630:..\FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4631:..\FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4632:..\FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4633:..\FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4634:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4635:..\FreeRTOS/tasks.c **** 					earliest possible time. */
4636:..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4637:..\FreeRTOS/tasks.c **** 				}
4638:..\FreeRTOS/tasks.c **** 				#endif
4639:..\FreeRTOS/tasks.c **** 
4640:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4641:..\FreeRTOS/tasks.c **** 				{
4642:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4643:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4644:..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4645:..\FreeRTOS/tasks.c **** 				}
4646:..\FreeRTOS/tasks.c **** 				else
4647:..\FreeRTOS/tasks.c **** 				{
4648:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4649:..\FreeRTOS/tasks.c **** 				}
4650:..\FreeRTOS/tasks.c **** 			}
4651:..\FreeRTOS/tasks.c **** 			else
4652:..\FreeRTOS/tasks.c **** 			{
4653:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4654:..\FreeRTOS/tasks.c **** 			}
4655:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 96


4656:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4657:..\FreeRTOS/tasks.c **** 
4658:..\FreeRTOS/tasks.c **** 		return xReturn;
4659:..\FreeRTOS/tasks.c **** 	}
4660:..\FreeRTOS/tasks.c **** 
4661:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4662:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4663:..\FreeRTOS/tasks.c **** 
4664:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4665:..\FreeRTOS/tasks.c **** 
4666:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4667:..\FreeRTOS/tasks.c **** 	{
4668:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4669:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4670:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4671:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4672:..\FreeRTOS/tasks.c **** 
4673:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4674:..\FreeRTOS/tasks.c **** 
4675:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4676:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4677:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4678:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4679:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4680:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4681:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4682:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4683:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4684:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4685:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4686:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4687:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4688:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4689:..\FreeRTOS/tasks.c **** 		provided on the following link:
4690:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4691:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4692:..\FreeRTOS/tasks.c **** 
4693:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4694:..\FreeRTOS/tasks.c **** 
4695:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4696:..\FreeRTOS/tasks.c **** 		{
4697:..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4698:..\FreeRTOS/tasks.c **** 			{
4699:..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4700:..\FreeRTOS/tasks.c **** 			}
4701:..\FreeRTOS/tasks.c **** 
4702:..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4703:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4704:..\FreeRTOS/tasks.c **** 
4705:..\FreeRTOS/tasks.c **** 			switch( eAction )
4706:..\FreeRTOS/tasks.c **** 			{
4707:..\FreeRTOS/tasks.c **** 				case eSetBits	:
4708:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4709:..\FreeRTOS/tasks.c **** 					break;
4710:..\FreeRTOS/tasks.c **** 
4711:..\FreeRTOS/tasks.c **** 				case eIncrement	:
4712:..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 97


4713:..\FreeRTOS/tasks.c **** 					break;
4714:..\FreeRTOS/tasks.c **** 
4715:..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4716:..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4717:..\FreeRTOS/tasks.c **** 					break;
4718:..\FreeRTOS/tasks.c **** 
4719:..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4720:..\FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4721:..\FreeRTOS/tasks.c **** 					{
4722:..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4723:..\FreeRTOS/tasks.c **** 					}
4724:..\FreeRTOS/tasks.c **** 					else
4725:..\FreeRTOS/tasks.c **** 					{
4726:..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4727:..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4728:..\FreeRTOS/tasks.c **** 					}
4729:..\FreeRTOS/tasks.c **** 					break;
4730:..\FreeRTOS/tasks.c **** 
4731:..\FreeRTOS/tasks.c **** 				case eNoAction :
4732:..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4733:..\FreeRTOS/tasks.c **** 					updated. */
4734:..\FreeRTOS/tasks.c **** 					break;
4735:..\FreeRTOS/tasks.c **** 			}
4736:..\FreeRTOS/tasks.c **** 
4737:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4738:..\FreeRTOS/tasks.c **** 
4739:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4740:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4741:..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4742:..\FreeRTOS/tasks.c **** 			{
4743:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4744:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4745:..\FreeRTOS/tasks.c **** 
4746:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4747:..\FreeRTOS/tasks.c **** 				{
4748:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4749:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4750:..\FreeRTOS/tasks.c **** 				}
4751:..\FreeRTOS/tasks.c **** 				else
4752:..\FreeRTOS/tasks.c **** 				{
4753:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4754:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4755:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4756:..\FreeRTOS/tasks.c **** 				}
4757:..\FreeRTOS/tasks.c **** 
4758:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4759:..\FreeRTOS/tasks.c **** 				{
4760:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4761:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4762:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4763:..\FreeRTOS/tasks.c **** 					{
4764:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4765:..\FreeRTOS/tasks.c **** 					}
4766:..\FreeRTOS/tasks.c **** 					else
4767:..\FreeRTOS/tasks.c **** 					{
4768:..\FreeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4769:..\FreeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 98


4770:..\FreeRTOS/tasks.c **** 						safe FreeRTOS function. */
4771:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4772:..\FreeRTOS/tasks.c **** 					}
4773:..\FreeRTOS/tasks.c **** 				}
4774:..\FreeRTOS/tasks.c **** 				else
4775:..\FreeRTOS/tasks.c **** 				{
4776:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4777:..\FreeRTOS/tasks.c **** 				}
4778:..\FreeRTOS/tasks.c **** 			}
4779:..\FreeRTOS/tasks.c **** 		}
4780:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4781:..\FreeRTOS/tasks.c **** 
4782:..\FreeRTOS/tasks.c **** 		return xReturn;
4783:..\FreeRTOS/tasks.c **** 	}
4784:..\FreeRTOS/tasks.c **** 
4785:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4786:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4787:..\FreeRTOS/tasks.c **** 
4788:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4789:..\FreeRTOS/tasks.c **** 
4790:..\FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4791:..\FreeRTOS/tasks.c **** 	{
4792:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4793:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4794:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4795:..\FreeRTOS/tasks.c **** 
4796:..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4797:..\FreeRTOS/tasks.c **** 
4798:..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4799:..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4800:..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4801:..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4802:..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4803:..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4804:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4805:..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4806:..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4807:..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4808:..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4809:..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4810:..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4811:..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4812:..\FreeRTOS/tasks.c **** 		provided on the following link:
4813:..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4814:..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4815:..\FreeRTOS/tasks.c **** 
4816:..\FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4817:..\FreeRTOS/tasks.c **** 
4818:..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4819:..\FreeRTOS/tasks.c **** 		{
4820:..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4821:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4822:..\FreeRTOS/tasks.c **** 
4823:..\FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4824:..\FreeRTOS/tasks.c **** 			semaphore. */
4825:..\FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4826:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 99


4827:..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4828:..\FreeRTOS/tasks.c **** 
4829:..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4830:..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4831:..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4832:..\FreeRTOS/tasks.c **** 			{
4833:..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4834:..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4835:..\FreeRTOS/tasks.c **** 
4836:..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4837:..\FreeRTOS/tasks.c **** 				{
4838:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4839:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4840:..\FreeRTOS/tasks.c **** 				}
4841:..\FreeRTOS/tasks.c **** 				else
4842:..\FreeRTOS/tasks.c **** 				{
4843:..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4844:..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4845:..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4846:..\FreeRTOS/tasks.c **** 				}
4847:..\FreeRTOS/tasks.c **** 
4848:..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4849:..\FreeRTOS/tasks.c **** 				{
4850:..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4851:..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4852:..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4853:..\FreeRTOS/tasks.c **** 					{
4854:..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4855:..\FreeRTOS/tasks.c **** 					}
4856:..\FreeRTOS/tasks.c **** 					else
4857:..\FreeRTOS/tasks.c **** 					{
4858:..\FreeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4859:..\FreeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4860:..\FreeRTOS/tasks.c **** 						safe FreeRTOS function. */
4861:..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4862:..\FreeRTOS/tasks.c **** 					}
4863:..\FreeRTOS/tasks.c **** 				}
4864:..\FreeRTOS/tasks.c **** 				else
4865:..\FreeRTOS/tasks.c **** 				{
4866:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4867:..\FreeRTOS/tasks.c **** 				}
4868:..\FreeRTOS/tasks.c **** 			}
4869:..\FreeRTOS/tasks.c **** 		}
4870:..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4871:..\FreeRTOS/tasks.c **** 	}
4872:..\FreeRTOS/tasks.c **** 
4873:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4874:..\FreeRTOS/tasks.c **** 
4875:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4876:..\FreeRTOS/tasks.c **** 
4877:..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4878:..\FreeRTOS/tasks.c **** 
4879:..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4880:..\FreeRTOS/tasks.c **** 	{
4881:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
4882:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4883:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 100


4884:..\FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4885:..\FreeRTOS/tasks.c **** 		its notification state cleared. */
4886:..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4887:..\FreeRTOS/tasks.c **** 
4888:..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4889:..\FreeRTOS/tasks.c **** 		{
4890:..\FreeRTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4891:..\FreeRTOS/tasks.c **** 			{
4892:..\FreeRTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4893:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
4894:..\FreeRTOS/tasks.c **** 			}
4895:..\FreeRTOS/tasks.c **** 			else
4896:..\FreeRTOS/tasks.c **** 			{
4897:..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
4898:..\FreeRTOS/tasks.c **** 			}
4899:..\FreeRTOS/tasks.c **** 		}
4900:..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4901:..\FreeRTOS/tasks.c **** 
4902:..\FreeRTOS/tasks.c **** 		return xReturn;
4903:..\FreeRTOS/tasks.c **** 	}
4904:..\FreeRTOS/tasks.c **** 
4905:..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4906:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4907:..\FreeRTOS/tasks.c **** 
4908:..\FreeRTOS/tasks.c **** 
4909:..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4910:..\FreeRTOS/tasks.c **** {
 680              		.loc 1 4910 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              	.LVL70:
 685 0000 70B5     		push	{r4, r5, r6, lr}
 686              		.cfi_def_cfa_offset 16
 687              		.cfi_offset 4, -16
 688              		.cfi_offset 5, -12
 689              		.cfi_offset 6, -8
 690              		.cfi_offset 14, -4
 691 0002 0400     		movs	r4, r0
 692 0004 0D00     		movs	r5, r1
4911:..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
4912:..\FreeRTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 693              		.loc 1 4912 0
 694 0006 154B     		ldr	r3, .L57
 695 0008 DE6E     		ldr	r6, [r3, #108]
 696              	.LVL71:
4913:..\FreeRTOS/tasks.c **** 
4914:..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4915:..\FreeRTOS/tasks.c **** 	{
4916:..\FreeRTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4917:..\FreeRTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4918:..\FreeRTOS/tasks.c **** 		when the task leaves the Blocked state. */
4919:..\FreeRTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4920:..\FreeRTOS/tasks.c **** 	}
4921:..\FreeRTOS/tasks.c **** 	#endif
4922:..\FreeRTOS/tasks.c **** 
4923:..\FreeRTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 101


4924:..\FreeRTOS/tasks.c **** 	as the same list item is used for both lists. */
4925:..\FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 697              		.loc 1 4925 0
 698 000a 986D     		ldr	r0, [r3, #88]
 699              	.LVL72:
 700 000c 0430     		adds	r0, r0, #4
 701 000e FFF7FEFF 		bl	uxListRemove
 702              	.LVL73:
4926:..\FreeRTOS/tasks.c **** 	{
4927:..\FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4928:..\FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
4929:..\FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4930:..\FreeRTOS/tasks.c **** 	}
4931:..\FreeRTOS/tasks.c **** 	else
4932:..\FreeRTOS/tasks.c **** 	{
4933:..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4934:..\FreeRTOS/tasks.c **** 	}
4935:..\FreeRTOS/tasks.c **** 
4936:..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4937:..\FreeRTOS/tasks.c **** 	{
4938:..\FreeRTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 703              		.loc 1 4938 0
 704 0012 631C     		adds	r3, r4, #1
 705 0014 08D1     		bne	.L54
 706              		.loc 1 4938 0 is_stmt 0 discriminator 1
 707 0016 002D     		cmp	r5, #0
 708 0018 06D0     		beq	.L54
4939:..\FreeRTOS/tasks.c **** 		{
4940:..\FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4941:..\FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4942:..\FreeRTOS/tasks.c **** 			indefinitely. */
4943:..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 709              		.loc 1 4943 0 is_stmt 1
 710 001a 104B     		ldr	r3, .L57
 711 001c 996D     		ldr	r1, [r3, #88]
 712 001e 0431     		adds	r1, r1, #4
 713 0020 0F48     		ldr	r0, .L57+4
 714 0022 FFF7FEFF 		bl	vListInsertEnd
 715              	.LVL74:
 716 0026 18E0     		b	.L53
 717              	.L54:
4944:..\FreeRTOS/tasks.c **** 		}
4945:..\FreeRTOS/tasks.c **** 		else
4946:..\FreeRTOS/tasks.c **** 		{
4947:..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4948:..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4949:..\FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
4950:..\FreeRTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 718              		.loc 1 4950 0
 719 0028 3419     		adds	r4, r6, r4
 720              	.LVL75:
4951:..\FreeRTOS/tasks.c **** 
4952:..\FreeRTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
4953:..\FreeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 721              		.loc 1 4953 0
 722 002a 0C4B     		ldr	r3, .L57
 723 002c 9B6D     		ldr	r3, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 102


 724 002e 5C60     		str	r4, [r3, #4]
4954:..\FreeRTOS/tasks.c **** 
4955:..\FreeRTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 725              		.loc 1 4955 0
 726 0030 A642     		cmp	r6, r4
 727 0032 06D9     		bls	.L56
4956:..\FreeRTOS/tasks.c **** 			{
4957:..\FreeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4958:..\FreeRTOS/tasks.c **** 				list. */
4959:..\FreeRTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 728              		.loc 1 4959 0
 729 0034 094B     		ldr	r3, .L57
 730 0036 186D     		ldr	r0, [r3, #80]
 731 0038 996D     		ldr	r1, [r3, #88]
 732 003a 0431     		adds	r1, r1, #4
 733 003c FFF7FEFF 		bl	vListInsert
 734              	.LVL76:
 735 0040 0BE0     		b	.L53
 736              	.L56:
4960:..\FreeRTOS/tasks.c **** 			}
4961:..\FreeRTOS/tasks.c **** 			else
4962:..\FreeRTOS/tasks.c **** 			{
4963:..\FreeRTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4964:..\FreeRTOS/tasks.c **** 				is used. */
4965:..\FreeRTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 737              		.loc 1 4965 0
 738 0042 074D     		ldr	r5, .L57+4
 739              	.LVL77:
 740 0044 A86A     		ldr	r0, [r5, #40]
 741 0046 054B     		ldr	r3, .L57
 742 0048 996D     		ldr	r1, [r3, #88]
 743 004a 0431     		adds	r1, r1, #4
 744 004c FFF7FEFF 		bl	vListInsert
 745              	.LVL78:
4966:..\FreeRTOS/tasks.c **** 
4967:..\FreeRTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
4968:..\FreeRTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4969:..\FreeRTOS/tasks.c **** 				needs to be updated too. */
4970:..\FreeRTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 746              		.loc 1 4970 0
 747 0050 EB6A     		ldr	r3, [r5, #44]
 748 0052 9C42     		cmp	r4, r3
 749 0054 01D2     		bcs	.L53
4971:..\FreeRTOS/tasks.c **** 				{
4972:..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 750              		.loc 1 4972 0
 751 0056 024B     		ldr	r3, .L57+4
 752 0058 DC62     		str	r4, [r3, #44]
 753              	.LVL79:
 754              	.L53:
4973:..\FreeRTOS/tasks.c **** 				}
4974:..\FreeRTOS/tasks.c **** 				else
4975:..\FreeRTOS/tasks.c **** 				{
4976:..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4977:..\FreeRTOS/tasks.c **** 				}
4978:..\FreeRTOS/tasks.c **** 			}
4979:..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 103


4980:..\FreeRTOS/tasks.c **** 	}
4981:..\FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4982:..\FreeRTOS/tasks.c **** 	{
4983:..\FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4984:..\FreeRTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4985:..\FreeRTOS/tasks.c **** 		will manage it correctly. */
4986:..\FreeRTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4987:..\FreeRTOS/tasks.c **** 
4988:..\FreeRTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
4989:..\FreeRTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4990:..\FreeRTOS/tasks.c **** 
4991:..\FreeRTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4992:..\FreeRTOS/tasks.c **** 		{
4993:..\FreeRTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4994:..\FreeRTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4995:..\FreeRTOS/tasks.c **** 		}
4996:..\FreeRTOS/tasks.c **** 		else
4997:..\FreeRTOS/tasks.c **** 		{
4998:..\FreeRTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4999:..\FreeRTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5000:..\FreeRTOS/tasks.c **** 
5001:..\FreeRTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5002:..\FreeRTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5003:..\FreeRTOS/tasks.c **** 			too. */
5004:..\FreeRTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5005:..\FreeRTOS/tasks.c **** 			{
5006:..\FreeRTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5007:..\FreeRTOS/tasks.c **** 			}
5008:..\FreeRTOS/tasks.c **** 			else
5009:..\FreeRTOS/tasks.c **** 			{
5010:..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5011:..\FreeRTOS/tasks.c **** 			}
5012:..\FreeRTOS/tasks.c **** 		}
5013:..\FreeRTOS/tasks.c **** 
5014:..\FreeRTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5015:..\FreeRTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
5016:..\FreeRTOS/tasks.c **** 	}
5017:..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5018:..\FreeRTOS/tasks.c **** }
 755              		.loc 1 5018 0
 756              		@ sp needed
 757              	.LVL80:
 758 005a 70BD     		pop	{r4, r5, r6, pc}
 759              	.L58:
 760              		.align	2
 761              	.L57:
 762 005c 80000000 		.word	.LANCHOR1
 763 0060 00000000 		.word	.LANCHOR0
 764              		.cfi_endproc
 765              	.LFE86:
 766              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 767              		.section	.text.xTaskCreate,"ax",%progbits
 768              		.align	2
 769              		.global	xTaskCreate
 770              		.code	16
 771              		.thumb_func
 772              		.type	xTaskCreate, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 104


 773              	xTaskCreate:
 774              	.LFB32:
 738:..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 775              		.loc 1 738 0
 776              		.cfi_startproc
 777              		@ args = 8, pretend = 0, frame = 8
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              	.LVL81:
 780 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 781              		.cfi_def_cfa_offset 20
 782              		.cfi_offset 4, -20
 783              		.cfi_offset 5, -16
 784              		.cfi_offset 6, -12
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 87B0     		sub	sp, sp, #28
 788              		.cfi_def_cfa_offset 48
 789 0004 0490     		str	r0, [sp, #16]
 790 0006 0591     		str	r1, [sp, #20]
 791 0008 1400     		movs	r4, r2
 792 000a 1F00     		movs	r7, r3
 793              	.LBB3:
 772:..\FreeRTOS/tasks.c **** 
 794              		.loc 1 772 0
 795 000c 9000     		lsls	r0, r2, #2
 796              	.LVL82:
 797 000e FFF7FEFF 		bl	pvPortMalloc
 798              	.LVL83:
 799 0012 061E     		subs	r6, r0, #0
 800              	.LVL84:
 774:..\FreeRTOS/tasks.c **** 			{
 801              		.loc 1 774 0
 802 0014 0AD0     		beq	.L63
 777:..\FreeRTOS/tasks.c **** 
 803              		.loc 1 777 0
 804 0016 6820     		movs	r0, #104
 805              	.LVL85:
 806 0018 FFF7FEFF 		bl	pvPortMalloc
 807              	.LVL86:
 808 001c 051E     		subs	r5, r0, #0
 809              	.LVL87:
 779:..\FreeRTOS/tasks.c **** 				{
 810              		.loc 1 779 0
 811 001e 01D0     		beq	.L61
 782:..\FreeRTOS/tasks.c **** 				}
 812              		.loc 1 782 0
 813 0020 0663     		str	r6, [r0, #48]
 814 0022 04E0     		b	.L60
 815              	.L61:
 788:..\FreeRTOS/tasks.c **** 				}
 816              		.loc 1 788 0
 817 0024 3000     		movs	r0, r6
 818              	.LVL88:
 819 0026 FFF7FEFF 		bl	vPortFree
 820              	.LVL89:
 821 002a 00E0     		b	.L60
 822              	.LVL90:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 105


 823              	.L63:
 793:..\FreeRTOS/tasks.c **** 			}
 824              		.loc 1 793 0
 825 002c 0025     		movs	r5, #0
 826              	.LVL91:
 827              	.L60:
 828              	.LBE3:
 798:..\FreeRTOS/tasks.c **** 		{
 829              		.loc 1 798 0
 830 002e 002D     		cmp	r5, #0
 831 0030 11D0     		beq	.L64
 808:..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 832              		.loc 1 808 0
 833 0032 0023     		movs	r3, #0
 834 0034 0393     		str	r3, [sp, #12]
 835 0036 0295     		str	r5, [sp, #8]
 836 0038 0D9B     		ldr	r3, [sp, #52]
 837 003a 0193     		str	r3, [sp, #4]
 838 003c 0C9B     		ldr	r3, [sp, #48]
 839 003e 0093     		str	r3, [sp]
 840 0040 3B00     		movs	r3, r7
 841 0042 2200     		movs	r2, r4
 842 0044 0599     		ldr	r1, [sp, #20]
 843 0046 0498     		ldr	r0, [sp, #16]
 844 0048 FFF7FEFF 		bl	prvInitialiseNewTask
 845              	.LVL92:
 809:..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 846              		.loc 1 809 0
 847 004c 2800     		movs	r0, r5
 848 004e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 849              	.LVL93:
 810:..\FreeRTOS/tasks.c **** 		}
 850              		.loc 1 810 0
 851 0052 0120     		movs	r0, #1
 852 0054 01E0     		b	.L62
 853              	.LVL94:
 854              	.L64:
 814:..\FreeRTOS/tasks.c **** 		}
 855              		.loc 1 814 0
 856 0056 0120     		movs	r0, #1
 857 0058 4042     		rsbs	r0, r0, #0
 858              	.L62:
 859              	.LVL95:
 818:..\FreeRTOS/tasks.c **** 
 860              		.loc 1 818 0
 861 005a 07B0     		add	sp, sp, #28
 862              		@ sp needed
 863              	.LVL96:
 864              	.LVL97:
 865              	.LVL98:
 866 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 867              		.cfi_endproc
 868              	.LFE32:
 869              		.size	xTaskCreate, .-xTaskCreate
 870 005e C046     		.section	.text.vTaskDelete,"ax",%progbits
 871              		.align	2
 872              		.global	vTaskDelete
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 106


 873              		.code	16
 874              		.thumb_func
 875              		.type	vTaskDelete, %function
 876              	vTaskDelete:
 877              	.LFB35:
1113:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 878              		.loc 1 1113 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL99:
 883 0000 70B5     		push	{r4, r5, r6, lr}
 884              		.cfi_def_cfa_offset 16
 885              		.cfi_offset 4, -16
 886              		.cfi_offset 5, -12
 887              		.cfi_offset 6, -8
 888              		.cfi_offset 14, -4
 889 0002 0400     		movs	r4, r0
1116:..\FreeRTOS/tasks.c **** 		{
 890              		.loc 1 1116 0
 891 0004 FFF7FEFF 		bl	vPortEnterCritical
 892              	.LVL100:
1120:..\FreeRTOS/tasks.c **** 
 893              		.loc 1 1120 0
 894 0008 002C     		cmp	r4, #0
 895 000a 01D1     		bne	.L66
1120:..\FreeRTOS/tasks.c **** 
 896              		.loc 1 1120 0 is_stmt 0 discriminator 1
 897 000c 194B     		ldr	r3, .L71
 898 000e 9C6D     		ldr	r4, [r3, #88]
 899              	.LVL101:
 900              	.L66:
1123:..\FreeRTOS/tasks.c **** 			{
 901              		.loc 1 1123 0 is_stmt 1 discriminator 4
 902 0010 251D     		adds	r5, r4, #4
 903 0012 2800     		movs	r0, r5
 904 0014 FFF7FEFF 		bl	uxListRemove
 905              	.LVL102:
1133:..\FreeRTOS/tasks.c **** 			{
 906              		.loc 1 1133 0 discriminator 4
 907 0018 A36A     		ldr	r3, [r4, #40]
 908 001a 002B     		cmp	r3, #0
 909 001c 03D0     		beq	.L67
1135:..\FreeRTOS/tasks.c **** 			}
 910              		.loc 1 1135 0
 911 001e 2000     		movs	r0, r4
 912 0020 1830     		adds	r0, r0, #24
 913 0022 FFF7FEFF 		bl	uxListRemove
 914              	.LVL103:
 915              	.L67:
1146:..\FreeRTOS/tasks.c **** 
 916              		.loc 1 1146 0
 917 0026 134B     		ldr	r3, .L71
 918 0028 1A6E     		ldr	r2, [r3, #96]
 919 002a 0132     		adds	r2, r2, #1
 920 002c 1A66     		str	r2, [r3, #96]
1148:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 107


 921              		.loc 1 1148 0
 922 002e 9B6D     		ldr	r3, [r3, #88]
 923 0030 9C42     		cmp	r4, r3
 924 0032 09D1     		bne	.L68
1155:..\FreeRTOS/tasks.c **** 
 925              		.loc 1 1155 0
 926 0034 0F4E     		ldr	r6, .L71
 927 0036 3000     		movs	r0, r6
 928 0038 3C30     		adds	r0, r0, #60
 929 003a 2900     		movs	r1, r5
 930 003c FFF7FEFF 		bl	vListInsertEnd
 931              	.LVL104:
1160:..\FreeRTOS/tasks.c **** 
 932              		.loc 1 1160 0
 933 0040 B36E     		ldr	r3, [r6, #104]
 934 0042 0133     		adds	r3, r3, #1
 935 0044 B366     		str	r3, [r6, #104]
 936 0046 08E0     		b	.L69
 937              	.L68:
1171:..\FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 938              		.loc 1 1171 0
 939 0048 0A4A     		ldr	r2, .L71
 940 004a 536D     		ldr	r3, [r2, #84]
 941 004c 013B     		subs	r3, r3, #1
 942 004e 5365     		str	r3, [r2, #84]
1172:..\FreeRTOS/tasks.c **** 
 943              		.loc 1 1172 0
 944 0050 2000     		movs	r0, r4
 945 0052 FFF7FEFF 		bl	prvDeleteTCB
 946              	.LVL105:
1176:..\FreeRTOS/tasks.c **** 			}
 947              		.loc 1 1176 0
 948 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 949              	.LVL106:
 950              	.L69:
1181:..\FreeRTOS/tasks.c **** 
 951              		.loc 1 1181 0
 952 005a FFF7FEFF 		bl	vPortExitCritical
 953              	.LVL107:
1185:..\FreeRTOS/tasks.c **** 		{
 954              		.loc 1 1185 0
 955 005e 054B     		ldr	r3, .L71
 956 0060 DB6D     		ldr	r3, [r3, #92]
 957 0062 002B     		cmp	r3, #0
 958 0064 05D0     		beq	.L65
1187:..\FreeRTOS/tasks.c **** 			{
 959              		.loc 1 1187 0
 960 0066 034B     		ldr	r3, .L71
 961 0068 9B6D     		ldr	r3, [r3, #88]
 962 006a 9C42     		cmp	r4, r3
 963 006c 01D1     		bne	.L65
1190:..\FreeRTOS/tasks.c **** 			}
 964              		.loc 1 1190 0
 965 006e FFF7FEFF 		bl	vPortYield
 966              	.LVL108:
 967              	.L65:
1197:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 108


 968              		.loc 1 1197 0
 969              		@ sp needed
 970              	.LVL109:
 971              	.LVL110:
 972 0072 70BD     		pop	{r4, r5, r6, pc}
 973              	.L72:
 974              		.align	2
 975              	.L71:
 976 0074 80000000 		.word	.LANCHOR1
 977              		.cfi_endproc
 978              	.LFE35:
 979              		.size	vTaskDelete, .-vTaskDelete
 980              		.section	.text.eTaskGetState,"ax",%progbits
 981              		.align	2
 982              		.global	eTaskGetState
 983              		.code	16
 984              		.thumb_func
 985              		.type	eTaskGetState, %function
 986              	eTaskGetState:
 987              	.LFB38:
1334:..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
 988              		.loc 1 1334 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              	.LVL111:
 993 0000 70B5     		push	{r4, r5, r6, lr}
 994              		.cfi_def_cfa_offset 16
 995              		.cfi_offset 4, -16
 996              		.cfi_offset 5, -12
 997              		.cfi_offset 6, -8
 998              		.cfi_offset 14, -4
 999 0002 0500     		movs	r5, r0
 1000              	.LVL112:
1341:..\FreeRTOS/tasks.c **** 		{
 1001              		.loc 1 1341 0
 1002 0004 164B     		ldr	r3, .L82
 1003 0006 9B6D     		ldr	r3, [r3, #88]
 1004 0008 9842     		cmp	r0, r3
 1005 000a 1CD0     		beq	.L76
1348:..\FreeRTOS/tasks.c **** 			{
 1006              		.loc 1 1348 0
 1007 000c FFF7FEFF 		bl	vPortEnterCritical
 1008              	.LVL113:
1350:..\FreeRTOS/tasks.c **** 			}
 1009              		.loc 1 1350 0
 1010 0010 6C69     		ldr	r4, [r5, #20]
 1011              	.LVL114:
1352:..\FreeRTOS/tasks.c **** 
 1012              		.loc 1 1352 0
 1013 0012 FFF7FEFF 		bl	vPortExitCritical
 1014              	.LVL115:
1354:..\FreeRTOS/tasks.c **** 			{
 1015              		.loc 1 1354 0
 1016 0016 134B     		ldr	r3, .L82+4
 1017 0018 9B6A     		ldr	r3, [r3, #40]
 1018 001a 9C42     		cmp	r4, r3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 109


 1019 001c 15D0     		beq	.L77
1354:..\FreeRTOS/tasks.c **** 			{
 1020              		.loc 1 1354 0 is_stmt 0 discriminator 1
 1021 001e 104B     		ldr	r3, .L82
 1022 0020 1B6D     		ldr	r3, [r3, #80]
 1023 0022 9C42     		cmp	r4, r3
 1024 0024 13D0     		beq	.L78
1362:..\FreeRTOS/tasks.c **** 				{
 1025              		.loc 1 1362 0 is_stmt 1
 1026 0026 0F4B     		ldr	r3, .L82+4
 1027 0028 9C42     		cmp	r4, r3
 1028 002a 04D1     		bne	.L75
1367:..\FreeRTOS/tasks.c **** 					{
 1029              		.loc 1 1367 0
 1030 002c AB6A     		ldr	r3, [r5, #40]
 1031 002e 002B     		cmp	r3, #0
 1032 0030 0FD1     		bne	.L79
1369:..\FreeRTOS/tasks.c **** 					}
 1033              		.loc 1 1369 0
 1034 0032 0320     		movs	r0, #3
 1035 0034 12E0     		b	.L74
 1036              	.L75:
1379:..\FreeRTOS/tasks.c **** 				{
 1037              		.loc 1 1379 0
 1038 0036 0A4B     		ldr	r3, .L82
 1039 0038 3C33     		adds	r3, r3, #60
 1040 003a 9C42     		cmp	r4, r3
 1041 003c 0BD0     		beq	.L80
1379:..\FreeRTOS/tasks.c **** 				{
 1042              		.loc 1 1379 0 is_stmt 0 discriminator 1
 1043 003e 002C     		cmp	r4, #0
 1044 0040 0BD1     		bne	.L81
1384:..\FreeRTOS/tasks.c **** 				}
 1045              		.loc 1 1384 0 is_stmt 1
 1046 0042 0420     		movs	r0, #4
 1047 0044 0AE0     		b	.L74
 1048              	.LVL116:
 1049              	.L76:
1344:..\FreeRTOS/tasks.c **** 		}
 1050              		.loc 1 1344 0
 1051 0046 0020     		movs	r0, #0
 1052              	.LVL117:
 1053 0048 08E0     		b	.L74
 1054              	.LVL118:
 1055              	.L77:
1358:..\FreeRTOS/tasks.c **** 			}
 1056              		.loc 1 1358 0
 1057 004a 0220     		movs	r0, #2
 1058 004c 06E0     		b	.L74
 1059              	.L78:
 1060 004e 0220     		movs	r0, #2
 1061 0050 04E0     		b	.L74
 1062              	.L79:
1373:..\FreeRTOS/tasks.c **** 					}
 1063              		.loc 1 1373 0
 1064 0052 0220     		movs	r0, #2
 1065 0054 02E0     		b	.L74
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 110


 1066              	.L80:
1384:..\FreeRTOS/tasks.c **** 				}
 1067              		.loc 1 1384 0
 1068 0056 0420     		movs	r0, #4
 1069 0058 00E0     		b	.L74
 1070              	.L81:
1392:..\FreeRTOS/tasks.c **** 			}
 1071              		.loc 1 1392 0
 1072 005a 0120     		movs	r0, #1
 1073              	.LVL119:
 1074              	.L74:
1397:..\FreeRTOS/tasks.c **** 
 1075              		.loc 1 1397 0
 1076              		@ sp needed
 1077              	.LVL120:
 1078 005c 70BD     		pop	{r4, r5, r6, pc}
 1079              	.L83:
 1080 005e C046     		.align	2
 1081              	.L82:
 1082 0060 80000000 		.word	.LANCHOR1
 1083 0064 00000000 		.word	.LANCHOR0
 1084              		.cfi_endproc
 1085              	.LFE38:
 1086              		.size	eTaskGetState, .-eTaskGetState
 1087              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1088              		.align	2
 1089              		.global	uxTaskPriorityGet
 1090              		.code	16
 1091              		.thumb_func
 1092              		.type	uxTaskPriorityGet, %function
 1093              	uxTaskPriorityGet:
 1094              	.LFB39:
1405:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1095              		.loc 1 1405 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              	.LVL121:
 1100 0000 10B5     		push	{r4, lr}
 1101              		.cfi_def_cfa_offset 8
 1102              		.cfi_offset 4, -8
 1103              		.cfi_offset 14, -4
 1104 0002 0400     		movs	r4, r0
1409:..\FreeRTOS/tasks.c **** 		{
 1105              		.loc 1 1409 0
 1106 0004 FFF7FEFF 		bl	vPortEnterCritical
 1107              	.LVL122:
1413:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1108              		.loc 1 1413 0
 1109 0008 002C     		cmp	r4, #0
 1110 000a 01D1     		bne	.L85
1413:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1111              		.loc 1 1413 0 is_stmt 0 discriminator 1
 1112 000c 034B     		ldr	r3, .L86
 1113 000e 9C6D     		ldr	r4, [r3, #88]
 1114              	.LVL123:
 1115              	.L85:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 111


1414:..\FreeRTOS/tasks.c **** 		}
 1116              		.loc 1 1414 0 is_stmt 1 discriminator 4
 1117 0010 E46A     		ldr	r4, [r4, #44]
 1118              	.LVL124:
1416:..\FreeRTOS/tasks.c **** 
 1119              		.loc 1 1416 0 discriminator 4
 1120 0012 FFF7FEFF 		bl	vPortExitCritical
 1121              	.LVL125:
1419:..\FreeRTOS/tasks.c **** 
 1122              		.loc 1 1419 0 discriminator 4
 1123 0016 2000     		movs	r0, r4
 1124              		@ sp needed
 1125              	.LVL126:
 1126 0018 10BD     		pop	{r4, pc}
 1127              	.L87:
 1128 001a C046     		.align	2
 1129              	.L86:
 1130 001c 80000000 		.word	.LANCHOR1
 1131              		.cfi_endproc
 1132              	.LFE39:
 1133              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1134              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1135              		.align	2
 1136              		.global	uxTaskPriorityGetFromISR
 1137              		.code	16
 1138              		.thumb_func
 1139              		.type	uxTaskPriorityGetFromISR, %function
 1140              	uxTaskPriorityGetFromISR:
 1141              	.LFB40:
1427:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1142              		.loc 1 1427 0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 0
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 1146              	.LVL127:
 1147 0000 10B5     		push	{r4, lr}
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 4, -8
 1150              		.cfi_offset 14, -4
 1151 0002 0400     		movs	r4, r0
1449:..\FreeRTOS/tasks.c **** 		{
 1152              		.loc 1 1449 0
 1153 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1154              	.LVL128:
1453:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1155              		.loc 1 1453 0
 1156 0008 002C     		cmp	r4, #0
 1157 000a 01D1     		bne	.L89
1453:..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1158              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1159 000c 034B     		ldr	r3, .L90
 1160 000e 9C6D     		ldr	r4, [r3, #88]
 1161              	.LVL129:
 1162              	.L89:
1454:..\FreeRTOS/tasks.c **** 		}
 1163              		.loc 1 1454 0 is_stmt 1 discriminator 4
 1164 0010 E46A     		ldr	r4, [r4, #44]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 112


 1165              	.LVL130:
1456:..\FreeRTOS/tasks.c **** 
 1166              		.loc 1 1456 0 discriminator 4
 1167 0012 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1168              	.LVL131:
1459:..\FreeRTOS/tasks.c **** 
 1169              		.loc 1 1459 0 discriminator 4
 1170 0016 2000     		movs	r0, r4
 1171              		@ sp needed
 1172              	.LVL132:
 1173 0018 10BD     		pop	{r4, pc}
 1174              	.L91:
 1175 001a C046     		.align	2
 1176              	.L90:
 1177 001c 80000000 		.word	.LANCHOR1
 1178              		.cfi_endproc
 1179              	.LFE40:
 1180              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1181              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1182              		.align	2
 1183              		.global	vTaskPrioritySet
 1184              		.code	16
 1185              		.thumb_func
 1186              		.type	vTaskPrioritySet, %function
 1187              	vTaskPrioritySet:
 1188              	.LFB41:
1467:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1189              		.loc 1 1467 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              	.LVL133:
 1194 0000 70B5     		push	{r4, r5, r6, lr}
 1195              		.cfi_def_cfa_offset 16
 1196              		.cfi_offset 4, -16
 1197              		.cfi_offset 5, -12
 1198              		.cfi_offset 6, -8
 1199              		.cfi_offset 14, -4
 1200 0002 0400     		movs	r4, r0
 1201 0004 0D00     		movs	r5, r1
 1202              	.LVL134:
1475:..\FreeRTOS/tasks.c **** 		{
 1203              		.loc 1 1475 0
 1204 0006 0429     		cmp	r1, #4
 1205 0008 00D9     		bls	.L93
1477:..\FreeRTOS/tasks.c **** 		}
 1206              		.loc 1 1477 0
 1207 000a 0425     		movs	r5, #4
 1208              	.L93:
 1209              	.LVL135:
1484:..\FreeRTOS/tasks.c **** 		{
 1210              		.loc 1 1484 0
 1211 000c FFF7FEFF 		bl	vPortEnterCritical
 1212              	.LVL136:
1488:..\FreeRTOS/tasks.c **** 
 1213              		.loc 1 1488 0
 1214 0010 002C     		cmp	r4, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 113


 1215 0012 01D1     		bne	.L94
1488:..\FreeRTOS/tasks.c **** 
 1216              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1217 0014 274B     		ldr	r3, .L108
 1218 0016 9C6D     		ldr	r4, [r3, #88]
 1219              	.LVL137:
 1220              	.L94:
1494:..\FreeRTOS/tasks.c **** 			}
 1221              		.loc 1 1494 0 is_stmt 1 discriminator 4
 1222 0018 626C     		ldr	r2, [r4, #68]
 1223              	.LVL138:
1502:..\FreeRTOS/tasks.c **** 			{
 1224              		.loc 1 1502 0 discriminator 4
 1225 001a 9542     		cmp	r5, r2
 1226 001c 47D0     		beq	.L95
1506:..\FreeRTOS/tasks.c **** 				{
 1227              		.loc 1 1506 0
 1228 001e 0AD9     		bls	.L96
1508:..\FreeRTOS/tasks.c **** 					{
 1229              		.loc 1 1508 0
 1230 0020 244B     		ldr	r3, .L108
 1231 0022 9B6D     		ldr	r3, [r3, #88]
 1232 0024 9C42     		cmp	r4, r3
 1233 0026 0CD0     		beq	.L104
1513:..\FreeRTOS/tasks.c **** 						{
 1234              		.loc 1 1513 0
 1235 0028 224B     		ldr	r3, .L108
 1236 002a 9B6D     		ldr	r3, [r3, #88]
 1237 002c DB6A     		ldr	r3, [r3, #44]
 1238 002e 9D42     		cmp	r5, r3
 1239 0030 09D2     		bcs	.L105
1470:..\FreeRTOS/tasks.c **** 
 1240              		.loc 1 1470 0
 1241 0032 0026     		movs	r6, #0
 1242 0034 0AE0     		b	.L97
 1243              	.L96:
1529:..\FreeRTOS/tasks.c **** 				{
 1244              		.loc 1 1529 0
 1245 0036 1F4B     		ldr	r3, .L108
 1246 0038 9B6D     		ldr	r3, [r3, #88]
 1247 003a 9C42     		cmp	r4, r3
 1248 003c 05D0     		beq	.L106
1470:..\FreeRTOS/tasks.c **** 
 1249              		.loc 1 1470 0
 1250 003e 0026     		movs	r6, #0
 1251 0040 04E0     		b	.L97
 1252              	.L104:
 1253 0042 0026     		movs	r6, #0
 1254 0044 02E0     		b	.L97
 1255              	.L105:
1515:..\FreeRTOS/tasks.c **** 						}
 1256              		.loc 1 1515 0
 1257 0046 0126     		movs	r6, #1
 1258 0048 00E0     		b	.L97
 1259              	.L106:
1534:..\FreeRTOS/tasks.c **** 				}
 1260              		.loc 1 1534 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 114


 1261 004a 0126     		movs	r6, #1
 1262              	.L97:
 1263              	.LVL139:
1546:..\FreeRTOS/tasks.c **** 
 1264              		.loc 1 1546 0
 1265 004c E36A     		ldr	r3, [r4, #44]
 1266              	.LVL140:
1552:..\FreeRTOS/tasks.c **** 					{
 1267              		.loc 1 1552 0
 1268 004e 9A42     		cmp	r2, r3
 1269 0050 00D1     		bne	.L98
1554:..\FreeRTOS/tasks.c **** 					}
 1270              		.loc 1 1554 0
 1271 0052 E562     		str	r5, [r4, #44]
 1272              	.L98:
1562:..\FreeRTOS/tasks.c **** 				}
 1273              		.loc 1 1562 0
 1274 0054 6564     		str	r5, [r4, #68]
1572:..\FreeRTOS/tasks.c **** 				{
 1275              		.loc 1 1572 0
 1276 0056 A269     		ldr	r2, [r4, #24]
 1277              	.LVL141:
 1278 0058 002A     		cmp	r2, #0
 1279 005a 02DB     		blt	.L99
1574:..\FreeRTOS/tasks.c **** 				}
 1280              		.loc 1 1574 0
 1281 005c 0522     		movs	r2, #5
 1282 005e 551B     		subs	r5, r2, r5
 1283              	.LVL142:
 1284 0060 A561     		str	r5, [r4, #24]
 1285              	.L99:
1585:..\FreeRTOS/tasks.c **** 				{
 1286              		.loc 1 1585 0
 1287 0062 9A00     		lsls	r2, r3, #2
 1288 0064 D318     		adds	r3, r2, r3
 1289              	.LVL143:
 1290 0066 9A00     		lsls	r2, r3, #2
 1291 0068 134B     		ldr	r3, .L108+4
 1292 006a 3033     		adds	r3, r3, #48
 1293 006c 9A18     		adds	r2, r3, r2
 1294 006e 6369     		ldr	r3, [r4, #20]
 1295 0070 9342     		cmp	r3, r2
 1296 0072 01D1     		bne	.L107
 1297 0074 0123     		movs	r3, #1
 1298 0076 00E0     		b	.L100
 1299              	.L107:
 1300 0078 0023     		movs	r3, #0
 1301              	.L100:
1585:..\FreeRTOS/tasks.c **** 				{
 1302              		.loc 1 1585 0 is_stmt 0 discriminator 4
 1303 007a 002B     		cmp	r3, #0
 1304 007c 13D0     		beq	.L101
1590:..\FreeRTOS/tasks.c **** 					{
 1305              		.loc 1 1590 0 is_stmt 1
 1306 007e 251D     		adds	r5, r4, #4
 1307 0080 2800     		movs	r0, r5
 1308 0082 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 115


 1309              	.LVL144:
1601:..\FreeRTOS/tasks.c **** 				}
 1310              		.loc 1 1601 0
 1311 0086 E36A     		ldr	r3, [r4, #44]
 1312 0088 0A4A     		ldr	r2, .L108
 1313 008a 526E     		ldr	r2, [r2, #100]
 1314 008c 9342     		cmp	r3, r2
 1315 008e 01D9     		bls	.L102
1601:..\FreeRTOS/tasks.c **** 				}
 1316              		.loc 1 1601 0 is_stmt 0 discriminator 1
 1317 0090 084A     		ldr	r2, .L108
 1318 0092 5366     		str	r3, [r2, #100]
 1319              	.L102:
1601:..\FreeRTOS/tasks.c **** 				}
 1320              		.loc 1 1601 0 discriminator 3
 1321 0094 9A00     		lsls	r2, r3, #2
 1322 0096 D318     		adds	r3, r2, r3
 1323 0098 9A00     		lsls	r2, r3, #2
 1324 009a 0748     		ldr	r0, .L108+4
 1325 009c 3030     		adds	r0, r0, #48
 1326 009e 8018     		adds	r0, r0, r2
 1327 00a0 2900     		movs	r1, r5
 1328 00a2 FFF7FEFF 		bl	vListInsertEnd
 1329              	.LVL145:
 1330              	.L101:
1608:..\FreeRTOS/tasks.c **** 				{
 1331              		.loc 1 1608 0 is_stmt 1
 1332 00a6 002E     		cmp	r6, #0
 1333 00a8 01D0     		beq	.L95
1610:..\FreeRTOS/tasks.c **** 				}
 1334              		.loc 1 1610 0
 1335 00aa FFF7FEFF 		bl	vPortYield
 1336              	.LVL146:
 1337              	.L95:
1622:..\FreeRTOS/tasks.c **** 	}
 1338              		.loc 1 1622 0
 1339 00ae FFF7FEFF 		bl	vPortExitCritical
 1340              	.LVL147:
1623:..\FreeRTOS/tasks.c **** 
 1341              		.loc 1 1623 0
 1342              		@ sp needed
 1343              	.LVL148:
 1344 00b2 70BD     		pop	{r4, r5, r6, pc}
 1345              	.L109:
 1346              		.align	2
 1347              	.L108:
 1348 00b4 80000000 		.word	.LANCHOR1
 1349 00b8 00000000 		.word	.LANCHOR0
 1350              		.cfi_endproc
 1351              	.LFE41:
 1352              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1353              		.section	.text.vTaskResume,"ax",%progbits
 1354              		.align	2
 1355              		.global	vTaskResume
 1356              		.code	16
 1357              		.thumb_func
 1358              		.type	vTaskResume, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 116


 1359              	vTaskResume:
 1360              	.LFB44:
1778:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1361              		.loc 1 1778 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              	.LVL149:
 1366 0000 70B5     		push	{r4, r5, r6, lr}
 1367              		.cfi_def_cfa_offset 16
 1368              		.cfi_offset 4, -16
 1369              		.cfi_offset 5, -12
 1370              		.cfi_offset 6, -8
 1371              		.cfi_offset 14, -4
 1372 0002 041E     		subs	r4, r0, #0
 1373              	.LVL150:
1786:..\FreeRTOS/tasks.c **** 		{
 1374              		.loc 1 1786 0
 1375 0004 28D0     		beq	.L110
1786:..\FreeRTOS/tasks.c **** 		{
 1376              		.loc 1 1786 0 is_stmt 0 discriminator 1
 1377 0006 154B     		ldr	r3, .L114
 1378 0008 9B6D     		ldr	r3, [r3, #88]
 1379 000a 9842     		cmp	r0, r3
 1380 000c 24D0     		beq	.L110
1788:..\FreeRTOS/tasks.c **** 			{
 1381              		.loc 1 1788 0 is_stmt 1
 1382 000e FFF7FEFF 		bl	vPortEnterCritical
 1383              	.LVL151:
1790:..\FreeRTOS/tasks.c **** 				{
 1384              		.loc 1 1790 0
 1385 0012 2000     		movs	r0, r4
 1386 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1387              	.LVL152:
 1388 0018 0028     		cmp	r0, #0
 1389 001a 1BD0     		beq	.L112
1796:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1390              		.loc 1 1796 0
 1391 001c 251D     		adds	r5, r4, #4
 1392 001e 2800     		movs	r0, r5
 1393 0020 FFF7FEFF 		bl	uxListRemove
 1394              	.LVL153:
1797:..\FreeRTOS/tasks.c **** 
 1395              		.loc 1 1797 0
 1396 0024 E36A     		ldr	r3, [r4, #44]
 1397 0026 0D4A     		ldr	r2, .L114
 1398 0028 526E     		ldr	r2, [r2, #100]
 1399 002a 9342     		cmp	r3, r2
 1400 002c 01D9     		bls	.L113
1797:..\FreeRTOS/tasks.c **** 
 1401              		.loc 1 1797 0 is_stmt 0 discriminator 1
 1402 002e 0B4A     		ldr	r2, .L114
 1403 0030 5366     		str	r3, [r2, #100]
 1404              	.L113:
1797:..\FreeRTOS/tasks.c **** 
 1405              		.loc 1 1797 0 discriminator 3
 1406 0032 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 117


 1407 0034 D318     		adds	r3, r2, r3
 1408 0036 9A00     		lsls	r2, r3, #2
 1409 0038 0948     		ldr	r0, .L114+4
 1410 003a 3030     		adds	r0, r0, #48
 1411 003c 8018     		adds	r0, r0, r2
 1412 003e 2900     		movs	r1, r5
 1413 0040 FFF7FEFF 		bl	vListInsertEnd
 1414              	.LVL154:
1800:..\FreeRTOS/tasks.c **** 					{
 1415              		.loc 1 1800 0 is_stmt 1 discriminator 3
 1416 0044 E26A     		ldr	r2, [r4, #44]
 1417 0046 054B     		ldr	r3, .L114
 1418 0048 9B6D     		ldr	r3, [r3, #88]
 1419 004a DB6A     		ldr	r3, [r3, #44]
 1420 004c 9A42     		cmp	r2, r3
 1421 004e 01D3     		bcc	.L112
1805:..\FreeRTOS/tasks.c **** 					}
 1422              		.loc 1 1805 0
 1423 0050 FFF7FEFF 		bl	vPortYield
 1424              	.LVL155:
 1425              	.L112:
1817:..\FreeRTOS/tasks.c **** 		}
 1426              		.loc 1 1817 0
 1427 0054 FFF7FEFF 		bl	vPortExitCritical
 1428              	.LVL156:
 1429              	.L110:
1823:..\FreeRTOS/tasks.c **** 
 1430              		.loc 1 1823 0
 1431              		@ sp needed
 1432              	.LVL157:
 1433 0058 70BD     		pop	{r4, r5, r6, pc}
 1434              	.L115:
 1435 005a C046     		.align	2
 1436              	.L114:
 1437 005c 80000000 		.word	.LANCHOR1
 1438 0060 00000000 		.word	.LANCHOR0
 1439              		.cfi_endproc
 1440              	.LFE44:
 1441              		.size	vTaskResume, .-vTaskResume
 1442              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1443              		.align	2
 1444              		.global	xTaskResumeFromISR
 1445              		.code	16
 1446              		.thumb_func
 1447              		.type	xTaskResumeFromISR, %function
 1448              	xTaskResumeFromISR:
 1449              	.LFB45:
1832:..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1450              		.loc 1 1832 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 1454              	.LVL158:
 1455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1456              		.cfi_def_cfa_offset 24
 1457              		.cfi_offset 3, -24
 1458              		.cfi_offset 4, -20
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 118


 1459              		.cfi_offset 5, -16
 1460              		.cfi_offset 6, -12
 1461              		.cfi_offset 7, -8
 1462              		.cfi_offset 14, -4
 1463 0002 0400     		movs	r4, r0
 1464              	.LVL159:
1857:..\FreeRTOS/tasks.c **** 		{
 1465              		.loc 1 1857 0
 1466 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1467              	.LVL160:
 1468 0008 0500     		movs	r5, r0
 1469              	.LVL161:
1859:..\FreeRTOS/tasks.c **** 			{
 1470              		.loc 1 1859 0
 1471 000a 2000     		movs	r0, r4
 1472              	.LVL162:
 1473 000c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1474              	.LVL163:
 1475 0010 0028     		cmp	r0, #0
 1476 0012 29D0     		beq	.L121
1864:..\FreeRTOS/tasks.c **** 				{
 1477              		.loc 1 1864 0
 1478 0014 174B     		ldr	r3, .L123
 1479 0016 1B6F     		ldr	r3, [r3, #112]
 1480 0018 002B     		cmp	r3, #0
 1481 001a 1DD1     		bne	.L118
1868:..\FreeRTOS/tasks.c **** 					{
 1482              		.loc 1 1868 0
 1483 001c 154B     		ldr	r3, .L123
 1484 001e 9B6D     		ldr	r3, [r3, #88]
 1485 0020 DB6A     		ldr	r3, [r3, #44]
 1486 0022 E26A     		ldr	r2, [r4, #44]
 1487 0024 9A42     		cmp	r2, r3
 1488 0026 01D2     		bcs	.L122
1833:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1489              		.loc 1 1833 0
 1490 0028 0026     		movs	r6, #0
 1491 002a 00E0     		b	.L119
 1492              	.L122:
1870:..\FreeRTOS/tasks.c **** 					}
 1493              		.loc 1 1870 0
 1494 002c 0126     		movs	r6, #1
 1495              	.L119:
 1496              	.LVL164:
1877:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1497              		.loc 1 1877 0
 1498 002e 271D     		adds	r7, r4, #4
 1499 0030 3800     		movs	r0, r7
 1500 0032 FFF7FEFF 		bl	uxListRemove
 1501              	.LVL165:
1878:..\FreeRTOS/tasks.c **** 				}
 1502              		.loc 1 1878 0
 1503 0036 E36A     		ldr	r3, [r4, #44]
 1504 0038 0E4A     		ldr	r2, .L123
 1505 003a 526E     		ldr	r2, [r2, #100]
 1506 003c 9342     		cmp	r3, r2
 1507 003e 01D9     		bls	.L120
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 119


1878:..\FreeRTOS/tasks.c **** 				}
 1508              		.loc 1 1878 0 is_stmt 0 discriminator 1
 1509 0040 0C4A     		ldr	r2, .L123
 1510 0042 5366     		str	r3, [r2, #100]
 1511              	.L120:
1878:..\FreeRTOS/tasks.c **** 				}
 1512              		.loc 1 1878 0 discriminator 3
 1513 0044 9A00     		lsls	r2, r3, #2
 1514 0046 D318     		adds	r3, r2, r3
 1515 0048 9A00     		lsls	r2, r3, #2
 1516 004a 0B48     		ldr	r0, .L123+4
 1517 004c 3030     		adds	r0, r0, #48
 1518 004e 8018     		adds	r0, r0, r2
 1519 0050 3900     		movs	r1, r7
 1520 0052 FFF7FEFF 		bl	vListInsertEnd
 1521              	.LVL166:
 1522 0056 08E0     		b	.L117
 1523              	.LVL167:
 1524              	.L118:
1885:..\FreeRTOS/tasks.c **** 				}
 1525              		.loc 1 1885 0 is_stmt 1
 1526 0058 2100     		movs	r1, r4
 1527 005a 1831     		adds	r1, r1, #24
 1528 005c 0648     		ldr	r0, .L123+4
 1529 005e 1430     		adds	r0, r0, #20
 1530 0060 FFF7FEFF 		bl	vListInsertEnd
 1531              	.LVL168:
1833:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1532              		.loc 1 1833 0
 1533 0064 0026     		movs	r6, #0
 1534 0066 00E0     		b	.L117
 1535              	.L121:
 1536 0068 0026     		movs	r6, #0
 1537              	.LVL169:
 1538              	.L117:
1893:..\FreeRTOS/tasks.c **** 
 1539              		.loc 1 1893 0
 1540 006a 2800     		movs	r0, r5
 1541 006c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1542              	.LVL170:
1896:..\FreeRTOS/tasks.c **** 
 1543              		.loc 1 1896 0
 1544 0070 3000     		movs	r0, r6
 1545              		@ sp needed
 1546              	.LVL171:
 1547              	.LVL172:
 1548              	.LVL173:
 1549 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1550              	.L124:
 1551              		.align	2
 1552              	.L123:
 1553 0074 80000000 		.word	.LANCHOR1
 1554 0078 00000000 		.word	.LANCHOR0
 1555              		.cfi_endproc
 1556              	.LFE45:
 1557              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1558              		.section	.text.vTaskStartScheduler,"ax",%progbits
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 120


 1559              		.align	2
 1560              		.global	vTaskStartScheduler
 1561              		.code	16
 1562              		.thumb_func
 1563              		.type	vTaskStartScheduler, %function
 1564              	vTaskStartScheduler:
 1565              	.LFB46:
1902:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 1566              		.loc 1 1902 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570 0000 00B5     		push	{lr}
 1571              		.cfi_def_cfa_offset 4
 1572              		.cfi_offset 14, -4
 1573 0002 83B0     		sub	sp, sp, #12
 1574              		.cfi_def_cfa_offset 16
1935:..\FreeRTOS/tasks.c **** 								configIDLE_TASK_NAME,
 1575              		.loc 1 1935 0
 1576 0004 0C4B     		ldr	r3, .L127
 1577 0006 7433     		adds	r3, r3, #116
 1578 0008 0193     		str	r3, [sp, #4]
 1579 000a 0023     		movs	r3, #0
 1580 000c 0093     		str	r3, [sp]
 1581 000e 3222     		movs	r2, #50
 1582 0010 0A49     		ldr	r1, .L127+4
 1583 0012 0B48     		ldr	r0, .L127+8
 1584 0014 FFF7FEFF 		bl	xTaskCreate
 1585              	.LVL174:
1957:..\FreeRTOS/tasks.c **** 	{
 1586              		.loc 1 1957 0
 1587 0018 0128     		cmp	r0, #1
 1588 001a 0BD1     		bne	.L125
1973:..\FreeRTOS/tasks.c **** 
 1589              		.loc 1 1973 0
 1590              		.syntax divided
 1591              	@ 1973 "..\FreeRTOS\tasks.c" 1
 1592 001c 72B6     		 cpsid i 
 1593              	@ 0 "" 2
1983:..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1594              		.loc 1 1983 0
 1595              		.thumb
 1596              		.syntax unified
 1597 001e 0122     		movs	r2, #1
 1598 0020 5242     		rsbs	r2, r2, #0
 1599 0022 084B     		ldr	r3, .L127+12
 1600 0024 DA62     		str	r2, [r3, #44]
1984:..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1601              		.loc 1 1984 0
 1602 0026 044B     		ldr	r3, .L127
 1603 0028 0232     		adds	r2, r2, #2
 1604 002a DA65     		str	r2, [r3, #92]
1985:..\FreeRTOS/tasks.c **** 
 1605              		.loc 1 1985 0
 1606 002c 0022     		movs	r2, #0
 1607 002e DA66     		str	r2, [r3, #108]
1997:..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 121


 1608              		.loc 1 1997 0
 1609 0030 FFF7FEFF 		bl	xPortStartScheduler
 1610              	.LVL175:
 1611              	.L125:
2018:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1612              		.loc 1 2018 0
 1613 0034 03B0     		add	sp, sp, #12
 1614              		@ sp needed
 1615 0036 00BD     		pop	{pc}
 1616              	.L128:
 1617              		.align	2
 1618              	.L127:
 1619 0038 80000000 		.word	.LANCHOR1
 1620 003c 00000000 		.word	.LC32
 1621 0040 00000000 		.word	prvIdleTask
 1622 0044 00000000 		.word	.LANCHOR0
 1623              		.cfi_endproc
 1624              	.LFE46:
 1625              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1626              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1627              		.align	2
 1628              		.global	vTaskEndScheduler
 1629              		.code	16
 1630              		.thumb_func
 1631              		.type	vTaskEndScheduler, %function
 1632              	vTaskEndScheduler:
 1633              	.LFB47:
2022:..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1634              		.loc 1 2022 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638 0000 10B5     		push	{r4, lr}
 1639              		.cfi_def_cfa_offset 8
 1640              		.cfi_offset 4, -8
 1641              		.cfi_offset 14, -4
2026:..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1642              		.loc 1 2026 0
 1643              		.syntax divided
 1644              	@ 2026 "..\FreeRTOS\tasks.c" 1
 1645 0002 72B6     		 cpsid i 
 1646              	@ 0 "" 2
2027:..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1647              		.loc 1 2027 0
 1648              		.thumb
 1649              		.syntax unified
 1650 0004 0022     		movs	r2, #0
 1651 0006 024B     		ldr	r3, .L130
 1652 0008 DA65     		str	r2, [r3, #92]
2028:..\FreeRTOS/tasks.c **** }
 1653              		.loc 1 2028 0
 1654 000a FFF7FEFF 		bl	vPortEndScheduler
 1655              	.LVL176:
2029:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 1656              		.loc 1 2029 0
 1657              		@ sp needed
 1658 000e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 122


 1659              	.L131:
 1660              		.align	2
 1661              	.L130:
 1662 0010 80000000 		.word	.LANCHOR1
 1663              		.cfi_endproc
 1664              	.LFE47:
 1665              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1666              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1667              		.align	2
 1668              		.global	vTaskSuspendAll
 1669              		.code	16
 1670              		.thumb_func
 1671              		.type	vTaskSuspendAll, %function
 1672              	vTaskSuspendAll:
 1673              	.LFB48:
2033:..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 1674              		.loc 1 2033 0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
2038:..\FreeRTOS/tasks.c **** }
 1679              		.loc 1 2038 0
 1680 0000 024A     		ldr	r2, .L133
 1681 0002 136F     		ldr	r3, [r2, #112]
 1682 0004 0133     		adds	r3, r3, #1
 1683 0006 1367     		str	r3, [r2, #112]
2039:..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 1684              		.loc 1 2039 0
 1685              		@ sp needed
 1686 0008 7047     		bx	lr
 1687              	.L134:
 1688 000a C046     		.align	2
 1689              	.L133:
 1690 000c 80000000 		.word	.LANCHOR1
 1691              		.cfi_endproc
 1692              	.LFE48:
 1693              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1694              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1695              		.align	2
 1696              		.global	xTaskGetTickCount
 1697              		.code	16
 1698              		.thumb_func
 1699              		.type	xTaskGetTickCount, %function
 1700              	xTaskGetTickCount:
 1701              	.LFB50:
2216:..\FreeRTOS/tasks.c **** TickType_t xTicks;
 1702              		.loc 1 2216 0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 0
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 1706              		@ link register save eliminated.
2222:..\FreeRTOS/tasks.c **** 	}
 1707              		.loc 1 2222 0
 1708 0000 014B     		ldr	r3, .L136
 1709 0002 D86E     		ldr	r0, [r3, #108]
 1710              	.LVL177:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 123


2227:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1711              		.loc 1 2227 0
 1712              		@ sp needed
 1713 0004 7047     		bx	lr
 1714              	.L137:
 1715 0006 C046     		.align	2
 1716              	.L136:
 1717 0008 80000000 		.word	.LANCHOR1
 1718              		.cfi_endproc
 1719              	.LFE50:
 1720              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1721              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1722              		.align	2
 1723              		.global	xTaskGetTickCountFromISR
 1724              		.code	16
 1725              		.thumb_func
 1726              		.type	xTaskGetTickCountFromISR, %function
 1727              	xTaskGetTickCountFromISR:
 1728              	.LFB51:
2231:..\FreeRTOS/tasks.c **** TickType_t xReturn;
 1729              		.loc 1 2231 0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733              		@ link register save eliminated.
 1734              	.LVL178:
2253:..\FreeRTOS/tasks.c **** 	}
 1735              		.loc 1 2253 0
 1736 0000 014B     		ldr	r3, .L139
 1737 0002 D86E     		ldr	r0, [r3, #108]
 1738              	.LVL179:
2258:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1739              		.loc 1 2258 0
 1740              		@ sp needed
 1741 0004 7047     		bx	lr
 1742              	.L140:
 1743 0006 C046     		.align	2
 1744              	.L139:
 1745 0008 80000000 		.word	.LANCHOR1
 1746              		.cfi_endproc
 1747              	.LFE51:
 1748              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1749              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1750              		.align	2
 1751              		.global	uxTaskGetNumberOfTasks
 1752              		.code	16
 1753              		.thumb_func
 1754              		.type	uxTaskGetNumberOfTasks, %function
 1755              	uxTaskGetNumberOfTasks:
 1756              	.LFB52:
2262:..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 1757              		.loc 1 2262 0
 1758              		.cfi_startproc
 1759              		@ args = 0, pretend = 0, frame = 0
 1760              		@ frame_needed = 0, uses_anonymous_args = 0
 1761              		@ link register save eliminated.
2265:..\FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 124


 1762              		.loc 1 2265 0
 1763 0000 014B     		ldr	r3, .L142
 1764 0002 586D     		ldr	r0, [r3, #84]
2266:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1765              		.loc 1 2266 0
 1766              		@ sp needed
 1767 0004 7047     		bx	lr
 1768              	.L143:
 1769 0006 C046     		.align	2
 1770              	.L142:
 1771 0008 80000000 		.word	.LANCHOR1
 1772              		.cfi_endproc
 1773              	.LFE52:
 1774              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1775              		.section	.text.pcTaskGetName,"ax",%progbits
 1776              		.align	2
 1777              		.global	pcTaskGetName
 1778              		.code	16
 1779              		.thumb_func
 1780              		.type	pcTaskGetName, %function
 1781              	pcTaskGetName:
 1782              	.LFB53:
2270:..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
 1783              		.loc 1 2270 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 0
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787              		@ link register save eliminated.
 1788              	.LVL180:
2275:..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1789              		.loc 1 2275 0
 1790 0000 0028     		cmp	r0, #0
 1791 0002 01D1     		bne	.L145
2275:..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1792              		.loc 1 2275 0 is_stmt 0 discriminator 1
 1793 0004 014B     		ldr	r3, .L146
 1794 0006 986D     		ldr	r0, [r3, #88]
 1795              	.LVL181:
 1796              	.L145:
2277:..\FreeRTOS/tasks.c **** }
 1797              		.loc 1 2277 0 is_stmt 1 discriminator 4
 1798 0008 3430     		adds	r0, r0, #52
 1799              	.LVL182:
2278:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1800              		.loc 1 2278 0 discriminator 4
 1801              		@ sp needed
 1802 000a 7047     		bx	lr
 1803              	.L147:
 1804              		.align	2
 1805              	.L146:
 1806 000c 80000000 		.word	.LANCHOR1
 1807              		.cfi_endproc
 1808              	.LFE53:
 1809              		.size	pcTaskGetName, .-pcTaskGetName
 1810              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1811              		.align	2
 1812              		.global	xTaskIncrementTick
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 125


 1813              		.code	16
 1814              		.thumb_func
 1815              		.type	xTaskIncrementTick, %function
 1816              	xTaskIncrementTick:
 1817              	.LFB54:
2590:..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
 1818              		.loc 1 2590 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1823              		.cfi_def_cfa_offset 24
 1824              		.cfi_offset 3, -24
 1825              		.cfi_offset 4, -20
 1826              		.cfi_offset 5, -16
 1827              		.cfi_offset 6, -12
 1828              		.cfi_offset 7, -8
 1829              		.cfi_offset 14, -4
 1830              	.LVL183:
2599:..\FreeRTOS/tasks.c **** 	{
 1831              		.loc 1 2599 0
 1832 0002 324B     		ldr	r3, .L165
 1833 0004 1B6F     		ldr	r3, [r3, #112]
 1834 0006 002B     		cmp	r3, #0
 1835 0008 53D1     		bne	.L149
 1836              	.LBB4:
2603:..\FreeRTOS/tasks.c **** 
 1837              		.loc 1 2603 0
 1838 000a 304B     		ldr	r3, .L165
 1839 000c DF6E     		ldr	r7, [r3, #108]
 1840 000e 0137     		adds	r7, r7, #1
 1841              	.LVL184:
2607:..\FreeRTOS/tasks.c **** 
 1842              		.loc 1 2607 0
 1843 0010 DF66     		str	r7, [r3, #108]
2609:..\FreeRTOS/tasks.c **** 		{
 1844              		.loc 1 2609 0
 1845 0012 002F     		cmp	r7, #0
 1846 0014 09D1     		bne	.L150
 1847              	.LBB5:
2611:..\FreeRTOS/tasks.c **** 		}
 1848              		.loc 1 2611 0
 1849 0016 2E4A     		ldr	r2, .L165+4
 1850 0018 916A     		ldr	r1, [r2, #40]
 1851              	.LVL185:
 1852 001a 186D     		ldr	r0, [r3, #80]
 1853 001c 9062     		str	r0, [r2, #40]
 1854 001e 1965     		str	r1, [r3, #80]
 1855 0020 9A6F     		ldr	r2, [r3, #120]
 1856 0022 0132     		adds	r2, r2, #1
 1857 0024 9A67     		str	r2, [r3, #120]
 1858 0026 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1859              	.LVL186:
 1860              	.L150:
 1861              	.LBE5:
2622:..\FreeRTOS/tasks.c **** 		{
 1862              		.loc 1 2622 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 126


 1863 002a 294B     		ldr	r3, .L165+4
 1864 002c DB6A     		ldr	r3, [r3, #44]
 1865 002e 9F42     		cmp	r7, r3
 1866 0030 03D2     		bcs	.L161
 1867              	.LBE4:
2593:..\FreeRTOS/tasks.c **** 
 1868              		.loc 1 2593 0
 1869 0032 0025     		movs	r5, #0
 1870 0034 42E0     		b	.L152
 1871              	.LVL187:
 1872              	.L163:
 1873              	.LBB6:
2688:..\FreeRTOS/tasks.c **** 						}
 1874              		.loc 1 2688 0
 1875 0036 0125     		movs	r5, #1
 1876              	.LVL188:
 1877 0038 00E0     		b	.L151
 1878              	.LVL189:
 1879              	.L161:
 1880 003a 0025     		movs	r5, #0
 1881              	.LVL190:
 1882              	.L151:
2626:..\FreeRTOS/tasks.c **** 				{
 1883              		.loc 1 2626 0
 1884 003c 244B     		ldr	r3, .L165+4
 1885 003e 9B6A     		ldr	r3, [r3, #40]
 1886 0040 1B68     		ldr	r3, [r3]
 1887 0042 002B     		cmp	r3, #0
 1888 0044 01D1     		bne	.L162
 1889 0046 0133     		adds	r3, r3, #1
 1890 0048 00E0     		b	.L153
 1891              	.L162:
 1892 004a 0023     		movs	r3, #0
 1893              	.L153:
2626:..\FreeRTOS/tasks.c **** 				{
 1894              		.loc 1 2626 0 is_stmt 0 discriminator 4
 1895 004c 002B     		cmp	r3, #0
 1896 004e 04D0     		beq	.L154
2633:..\FreeRTOS/tasks.c **** 					break;
 1897              		.loc 1 2633 0 is_stmt 1
 1898 0050 0122     		movs	r2, #1
 1899 0052 5242     		rsbs	r2, r2, #0
 1900 0054 1E4B     		ldr	r3, .L165+4
 1901 0056 DA62     		str	r2, [r3, #44]
2634:..\FreeRTOS/tasks.c **** 				}
 1902              		.loc 1 2634 0
 1903 0058 30E0     		b	.L152
 1904              	.L154:
2642:..\FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1905              		.loc 1 2642 0
 1906 005a 1D4B     		ldr	r3, .L165+4
 1907 005c 9B6A     		ldr	r3, [r3, #40]
 1908 005e DB68     		ldr	r3, [r3, #12]
 1909 0060 DE68     		ldr	r6, [r3, #12]
 1910              	.LVL191:
2643:..\FreeRTOS/tasks.c **** 
 1911              		.loc 1 2643 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 127


 1912 0062 7368     		ldr	r3, [r6, #4]
 1913              	.LVL192:
2645:..\FreeRTOS/tasks.c **** 					{
 1914              		.loc 1 2645 0
 1915 0064 9F42     		cmp	r7, r3
 1916 0066 02D2     		bcs	.L155
2652:..\FreeRTOS/tasks.c **** 						break;
 1917              		.loc 1 2652 0
 1918 0068 194A     		ldr	r2, .L165+4
 1919 006a D362     		str	r3, [r2, #44]
2653:..\FreeRTOS/tasks.c **** 					}
 1920              		.loc 1 2653 0
 1921 006c 26E0     		b	.L152
 1922              	.L155:
2661:..\FreeRTOS/tasks.c **** 
 1923              		.loc 1 2661 0
 1924 006e 341D     		adds	r4, r6, #4
 1925 0070 2000     		movs	r0, r4
 1926 0072 FFF7FEFF 		bl	uxListRemove
 1927              	.LVL193:
2665:..\FreeRTOS/tasks.c **** 					{
 1928              		.loc 1 2665 0
 1929 0076 B36A     		ldr	r3, [r6, #40]
 1930 0078 002B     		cmp	r3, #0
 1931 007a 03D0     		beq	.L156
2667:..\FreeRTOS/tasks.c **** 					}
 1932              		.loc 1 2667 0
 1933 007c 3000     		movs	r0, r6
 1934 007e 1830     		adds	r0, r0, #24
 1935 0080 FFF7FEFF 		bl	uxListRemove
 1936              	.LVL194:
 1937              	.L156:
2676:..\FreeRTOS/tasks.c **** 
 1938              		.loc 1 2676 0
 1939 0084 F36A     		ldr	r3, [r6, #44]
 1940 0086 114A     		ldr	r2, .L165
 1941 0088 526E     		ldr	r2, [r2, #100]
 1942 008a 9342     		cmp	r3, r2
 1943 008c 01D9     		bls	.L157
2676:..\FreeRTOS/tasks.c **** 
 1944              		.loc 1 2676 0 is_stmt 0 discriminator 1
 1945 008e 0F4A     		ldr	r2, .L165
 1946 0090 5366     		str	r3, [r2, #100]
 1947              	.L157:
2676:..\FreeRTOS/tasks.c **** 
 1948              		.loc 1 2676 0 discriminator 3
 1949 0092 9A00     		lsls	r2, r3, #2
 1950 0094 D318     		adds	r3, r2, r3
 1951 0096 9A00     		lsls	r2, r3, #2
 1952 0098 0D48     		ldr	r0, .L165+4
 1953 009a 3030     		adds	r0, r0, #48
 1954 009c 8018     		adds	r0, r0, r2
 1955 009e 2100     		movs	r1, r4
 1956 00a0 FFF7FEFF 		bl	vListInsertEnd
 1957              	.LVL195:
2686:..\FreeRTOS/tasks.c **** 						{
 1958              		.loc 1 2686 0 is_stmt 1 discriminator 3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 128


 1959 00a4 F26A     		ldr	r2, [r6, #44]
 1960 00a6 094B     		ldr	r3, .L165
 1961 00a8 9B6D     		ldr	r3, [r3, #88]
 1962 00aa DB6A     		ldr	r3, [r3, #44]
 1963 00ac 9A42     		cmp	r2, r3
 1964 00ae C2D2     		bcs	.L163
 1965 00b0 C4E7     		b	.L151
 1966              	.LVL196:
 1967              	.L149:
 1968              	.LBE6:
2733:..\FreeRTOS/tasks.c **** 
 1969              		.loc 1 2733 0
 1970 00b2 064A     		ldr	r2, .L165
 1971 00b4 D36F     		ldr	r3, [r2, #124]
 1972 00b6 0133     		adds	r3, r3, #1
 1973 00b8 D367     		str	r3, [r2, #124]
2593:..\FreeRTOS/tasks.c **** 
 1974              		.loc 1 2593 0
 1975 00ba 0025     		movs	r5, #0
 1976              	.LVL197:
 1977              	.L152:
2746:..\FreeRTOS/tasks.c **** 		{
 1978              		.loc 1 2746 0
 1979 00bc 054B     		ldr	r3, .L165+8
 1980 00be 1B68     		ldr	r3, [r3]
 1981 00c0 002B     		cmp	r3, #0
 1982 00c2 00D0     		beq	.L160
2748:..\FreeRTOS/tasks.c **** 		}
 1983              		.loc 1 2748 0
 1984 00c4 0125     		movs	r5, #1
 1985              	.LVL198:
 1986              	.L160:
2758:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1987              		.loc 1 2758 0
 1988 00c6 2800     		movs	r0, r5
 1989              		@ sp needed
 1990              	.LVL199:
 1991 00c8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1992              	.L166:
 1993 00ca C046     		.align	2
 1994              	.L165:
 1995 00cc 80000000 		.word	.LANCHOR1
 1996 00d0 00000000 		.word	.LANCHOR0
 1997 00d4 00010000 		.word	.LANCHOR2
 1998              		.cfi_endproc
 1999              	.LFE54:
 2000              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2001              		.section	.text.xTaskResumeAll,"ax",%progbits
 2002              		.align	2
 2003              		.global	xTaskResumeAll
 2004              		.code	16
 2005              		.thumb_func
 2006              		.type	xTaskResumeAll, %function
 2007              	xTaskResumeAll:
 2008              	.LFB49:
2106:..\FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2009              		.loc 1 2106 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 129


 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 0
 2012              		@ frame_needed = 0, uses_anonymous_args = 0
 2013 0000 70B5     		push	{r4, r5, r6, lr}
 2014              		.cfi_def_cfa_offset 16
 2015              		.cfi_offset 4, -16
 2016              		.cfi_offset 5, -12
 2017              		.cfi_offset 6, -8
 2018              		.cfi_offset 14, -4
 2019              	.LVL200:
2119:..\FreeRTOS/tasks.c **** 	{
 2020              		.loc 1 2119 0
 2021 0002 FFF7FEFF 		bl	vPortEnterCritical
 2022              	.LVL201:
2121:..\FreeRTOS/tasks.c **** 
 2023              		.loc 1 2121 0
 2024 0006 2D4B     		ldr	r3, .L180
 2025 0008 1A6F     		ldr	r2, [r3, #112]
 2026 000a 013A     		subs	r2, r2, #1
 2027 000c 1A67     		str	r2, [r3, #112]
2123:..\FreeRTOS/tasks.c **** 		{
 2028              		.loc 1 2123 0
 2029 000e 1B6F     		ldr	r3, [r3, #112]
 2030 0010 002B     		cmp	r3, #0
 2031 0012 4CD1     		bne	.L177
2125:..\FreeRTOS/tasks.c **** 			{
 2032              		.loc 1 2125 0
 2033 0014 294B     		ldr	r3, .L180
 2034 0016 5B6D     		ldr	r3, [r3, #84]
 2035 0018 002B     		cmp	r3, #0
 2036 001a 26D1     		bne	.L178
2108:..\FreeRTOS/tasks.c **** 
 2037              		.loc 1 2108 0
 2038 001c 0024     		movs	r4, #0
 2039 001e 49E0     		b	.L168
 2040              	.LVL202:
 2041              	.L172:
2131:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2042              		.loc 1 2131 0
 2043 0020 274B     		ldr	r3, .L180+4
 2044 0022 1B6A     		ldr	r3, [r3, #32]
 2045 0024 DC68     		ldr	r4, [r3, #12]
 2046              	.LVL203:
2132:..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2047              		.loc 1 2132 0
 2048 0026 2000     		movs	r0, r4
 2049 0028 1830     		adds	r0, r0, #24
 2050 002a FFF7FEFF 		bl	uxListRemove
 2051              	.LVL204:
2133:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2052              		.loc 1 2133 0
 2053 002e 251D     		adds	r5, r4, #4
 2054 0030 2800     		movs	r0, r5
 2055 0032 FFF7FEFF 		bl	uxListRemove
 2056              	.LVL205:
2134:..\FreeRTOS/tasks.c **** 
 2057              		.loc 1 2134 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 130


 2058 0036 E36A     		ldr	r3, [r4, #44]
 2059 0038 204A     		ldr	r2, .L180
 2060 003a 526E     		ldr	r2, [r2, #100]
 2061 003c 9342     		cmp	r3, r2
 2062 003e 01D9     		bls	.L170
2134:..\FreeRTOS/tasks.c **** 
 2063              		.loc 1 2134 0 is_stmt 0 discriminator 1
 2064 0040 1E4A     		ldr	r2, .L180
 2065 0042 5366     		str	r3, [r2, #100]
 2066              	.L170:
2134:..\FreeRTOS/tasks.c **** 
 2067              		.loc 1 2134 0 discriminator 3
 2068 0044 9A00     		lsls	r2, r3, #2
 2069 0046 D318     		adds	r3, r2, r3
 2070 0048 9A00     		lsls	r2, r3, #2
 2071 004a 1D48     		ldr	r0, .L180+4
 2072 004c 3030     		adds	r0, r0, #48
 2073 004e 8018     		adds	r0, r0, r2
 2074 0050 2900     		movs	r1, r5
 2075 0052 FFF7FEFF 		bl	vListInsertEnd
 2076              	.LVL206:
2138:..\FreeRTOS/tasks.c **** 					{
 2077              		.loc 1 2138 0 is_stmt 1 discriminator 3
 2078 0056 194B     		ldr	r3, .L180
 2079 0058 9B6D     		ldr	r3, [r3, #88]
 2080 005a DB6A     		ldr	r3, [r3, #44]
 2081 005c E26A     		ldr	r2, [r4, #44]
 2082 005e 9A42     		cmp	r2, r3
 2083 0060 04D3     		bcc	.L169
2140:..\FreeRTOS/tasks.c **** 					}
 2084              		.loc 1 2140 0
 2085 0062 0122     		movs	r2, #1
 2086 0064 174B     		ldr	r3, .L180+8
 2087 0066 1A60     		str	r2, [r3]
 2088 0068 00E0     		b	.L169
 2089              	.LVL207:
 2090              	.L178:
 2091 006a 0024     		movs	r4, #0
 2092              	.LVL208:
 2093              	.L169:
2129:..\FreeRTOS/tasks.c **** 				{
 2094              		.loc 1 2129 0
 2095 006c 144B     		ldr	r3, .L180+4
 2096 006e 5B69     		ldr	r3, [r3, #20]
 2097 0070 002B     		cmp	r3, #0
 2098 0072 D5D1     		bne	.L172
2148:..\FreeRTOS/tasks.c **** 				{
 2099              		.loc 1 2148 0
 2100 0074 002C     		cmp	r4, #0
 2101 0076 01D0     		beq	.L173
2156:..\FreeRTOS/tasks.c **** 				}
 2102              		.loc 1 2156 0
 2103 0078 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2104              	.LVL209:
 2105              	.L173:
 2106              	.LBB7:
2164:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 131


 2107              		.loc 1 2164 0
 2108 007c 0F4B     		ldr	r3, .L180
 2109 007e DC6F     		ldr	r4, [r3, #124]
 2110              	.LVL210:
2166:..\FreeRTOS/tasks.c **** 					{
 2111              		.loc 1 2166 0
 2112 0080 002C     		cmp	r4, #0
 2113 0082 0CD0     		beq	.L174
 2114              	.L176:
2170:..\FreeRTOS/tasks.c **** 							{
 2115              		.loc 1 2170 0
 2116 0084 FFF7FEFF 		bl	xTaskIncrementTick
 2117              	.LVL211:
 2118 0088 0028     		cmp	r0, #0
 2119 008a 02D0     		beq	.L175
2172:..\FreeRTOS/tasks.c **** 							}
 2120              		.loc 1 2172 0
 2121 008c 0122     		movs	r2, #1
 2122 008e 0D4B     		ldr	r3, .L180+8
 2123 0090 1A60     		str	r2, [r3]
 2124              	.L175:
2178:..\FreeRTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2125              		.loc 1 2178 0
 2126 0092 013C     		subs	r4, r4, #1
 2127              	.LVL212:
2179:..\FreeRTOS/tasks.c **** 
 2128              		.loc 1 2179 0
 2129 0094 002C     		cmp	r4, #0
 2130 0096 F5D1     		bne	.L176
2181:..\FreeRTOS/tasks.c **** 					}
 2131              		.loc 1 2181 0
 2132 0098 0022     		movs	r2, #0
 2133 009a 084B     		ldr	r3, .L180
 2134 009c DA67     		str	r2, [r3, #124]
 2135              	.L174:
 2136              	.LBE7:
2189:..\FreeRTOS/tasks.c **** 				{
 2137              		.loc 1 2189 0
 2138 009e 094B     		ldr	r3, .L180+8
 2139 00a0 1B68     		ldr	r3, [r3]
 2140 00a2 002B     		cmp	r3, #0
 2141 00a4 05D0     		beq	.L179
 2142              	.LVL213:
2196:..\FreeRTOS/tasks.c **** 				}
 2143              		.loc 1 2196 0
 2144 00a6 FFF7FEFF 		bl	vPortYield
 2145              	.LVL214:
2193:..\FreeRTOS/tasks.c **** 					}
 2146              		.loc 1 2193 0
 2147 00aa 0124     		movs	r4, #1
 2148              	.LVL215:
 2149 00ac 02E0     		b	.L168
 2150              	.LVL216:
 2151              	.L177:
2108:..\FreeRTOS/tasks.c **** 
 2152              		.loc 1 2108 0
 2153 00ae 0024     		movs	r4, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 132


 2154 00b0 00E0     		b	.L168
 2155              	.LVL217:
 2156              	.L179:
 2157 00b2 0024     		movs	r4, #0
 2158              	.LVL218:
 2159              	.L168:
2209:..\FreeRTOS/tasks.c **** 
 2160              		.loc 1 2209 0
 2161 00b4 FFF7FEFF 		bl	vPortExitCritical
 2162              	.LVL219:
2212:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2163              		.loc 1 2212 0
 2164 00b8 2000     		movs	r0, r4
 2165              		@ sp needed
 2166              	.LVL220:
 2167 00ba 70BD     		pop	{r4, r5, r6, pc}
 2168              	.L181:
 2169              		.align	2
 2170              	.L180:
 2171 00bc 80000000 		.word	.LANCHOR1
 2172 00c0 00000000 		.word	.LANCHOR0
 2173 00c4 00010000 		.word	.LANCHOR2
 2174              		.cfi_endproc
 2175              	.LFE49:
 2176              		.size	xTaskResumeAll, .-xTaskResumeAll
 2177              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2178              		.align	2
 2179              		.global	vTaskDelayUntil
 2180              		.code	16
 2181              		.thumb_func
 2182              		.type	vTaskDelayUntil, %function
 2183              	vTaskDelayUntil:
 2184              	.LFB36:
1205:..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 2185              		.loc 1 1205 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
 2189              	.LVL221:
 2190 0000 70B5     		push	{r4, r5, r6, lr}
 2191              		.cfi_def_cfa_offset 16
 2192              		.cfi_offset 4, -16
 2193              		.cfi_offset 5, -12
 2194              		.cfi_offset 6, -8
 2195              		.cfi_offset 14, -4
 2196 0002 0500     		movs	r5, r0
 2197 0004 0C00     		movs	r4, r1
 2198              	.LVL222:
1213:..\FreeRTOS/tasks.c **** 		{
 2199              		.loc 1 1213 0
 2200 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2201              	.LVL223:
 2202              	.LBB8:
1217:..\FreeRTOS/tasks.c **** 
 2203              		.loc 1 1217 0
 2204 000a 134B     		ldr	r3, .L191
 2205 000c D86E     		ldr	r0, [r3, #108]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 133


 2206              	.LVL224:
1220:..\FreeRTOS/tasks.c **** 
 2207              		.loc 1 1220 0
 2208 000e 2B68     		ldr	r3, [r5]
 2209 0010 1919     		adds	r1, r3, r4
 2210              	.LVL225:
1222:..\FreeRTOS/tasks.c **** 			{
 2211              		.loc 1 1222 0
 2212 0012 9842     		cmp	r0, r3
 2213 0014 05D2     		bcs	.L183
1229:..\FreeRTOS/tasks.c **** 				{
 2214              		.loc 1 1229 0
 2215 0016 8B42     		cmp	r3, r1
 2216 0018 09D9     		bls	.L187
1229:..\FreeRTOS/tasks.c **** 				{
 2217              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2218 001a 8842     		cmp	r0, r1
 2219 001c 09D3     		bcc	.L188
 2220              	.LBE8:
1207:..\FreeRTOS/tasks.c **** 
 2221              		.loc 1 1207 0 is_stmt 1
 2222 001e 0023     		movs	r3, #0
 2223 0020 0CE0     		b	.L184
 2224              	.L183:
 2225              	.LBB9:
1243:..\FreeRTOS/tasks.c **** 				{
 2226              		.loc 1 1243 0
 2227 0022 8B42     		cmp	r3, r1
 2228 0024 07D8     		bhi	.L189
1243:..\FreeRTOS/tasks.c **** 				{
 2229              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2230 0026 8842     		cmp	r0, r1
 2231 0028 07D3     		bcc	.L190
 2232              	.LBE9:
1207:..\FreeRTOS/tasks.c **** 
 2233              		.loc 1 1207 0 is_stmt 1
 2234 002a 0023     		movs	r3, #0
 2235 002c 06E0     		b	.L184
 2236              	.L187:
 2237 002e 0023     		movs	r3, #0
 2238 0030 04E0     		b	.L184
 2239              	.L188:
 2240              	.LBB10:
1231:..\FreeRTOS/tasks.c **** 				}
 2241              		.loc 1 1231 0
 2242 0032 0123     		movs	r3, #1
 2243 0034 02E0     		b	.L184
 2244              	.L189:
1245:..\FreeRTOS/tasks.c **** 				}
 2245              		.loc 1 1245 0
 2246 0036 0123     		movs	r3, #1
 2247 0038 00E0     		b	.L184
 2248              	.L190:
 2249 003a 0123     		movs	r3, #1
 2250              	.L184:
 2251              	.LVL226:
1254:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 134


 2252              		.loc 1 1254 0
 2253 003c 2960     		str	r1, [r5]
1256:..\FreeRTOS/tasks.c **** 			{
 2254              		.loc 1 1256 0
 2255 003e 002B     		cmp	r3, #0
 2256 0040 03D0     		beq	.L185
1262:..\FreeRTOS/tasks.c **** 			}
 2257              		.loc 1 1262 0
 2258 0042 081A     		subs	r0, r1, r0
 2259              	.LVL227:
 2260 0044 0021     		movs	r1, #0
 2261              	.LVL228:
 2262 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2263              	.LVL229:
 2264              	.L185:
 2265              	.LBE10:
1269:..\FreeRTOS/tasks.c **** 
 2266              		.loc 1 1269 0
 2267 004a FFF7FEFF 		bl	xTaskResumeAll
 2268              	.LVL230:
1273:..\FreeRTOS/tasks.c **** 		{
 2269              		.loc 1 1273 0
 2270 004e 0028     		cmp	r0, #0
 2271 0050 01D1     		bne	.L182
1275:..\FreeRTOS/tasks.c **** 		}
 2272              		.loc 1 1275 0
 2273 0052 FFF7FEFF 		bl	vPortYield
 2274              	.LVL231:
 2275              	.L182:
1281:..\FreeRTOS/tasks.c **** 
 2276              		.loc 1 1281 0
 2277              		@ sp needed
 2278              	.LVL232:
 2279              	.LVL233:
 2280 0056 70BD     		pop	{r4, r5, r6, pc}
 2281              	.L192:
 2282              		.align	2
 2283              	.L191:
 2284 0058 80000000 		.word	.LANCHOR1
 2285              		.cfi_endproc
 2286              	.LFE36:
 2287              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2288              		.section	.text.vTaskDelay,"ax",%progbits
 2289              		.align	2
 2290              		.global	vTaskDelay
 2291              		.code	16
 2292              		.thumb_func
 2293              		.type	vTaskDelay, %function
 2294              	vTaskDelay:
 2295              	.LFB37:
1289:..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2296              		.loc 1 1289 0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              	.LVL234:
 2301 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 135


 2302              		.cfi_def_cfa_offset 8
 2303              		.cfi_offset 4, -8
 2304              		.cfi_offset 14, -4
 2305 0002 041E     		subs	r4, r0, #0
 2306              	.LVL235:
1293:..\FreeRTOS/tasks.c **** 		{
 2307              		.loc 1 1293 0
 2308 0004 08D0     		beq	.L196
1296:..\FreeRTOS/tasks.c **** 			{
 2309              		.loc 1 1296 0
 2310 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2311              	.LVL236:
1307:..\FreeRTOS/tasks.c **** 			}
 2312              		.loc 1 1307 0
 2313 000a 0021     		movs	r1, #0
 2314 000c 2000     		movs	r0, r4
 2315 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2316              	.LVL237:
1309:..\FreeRTOS/tasks.c **** 		}
 2317              		.loc 1 1309 0
 2318 0012 FFF7FEFF 		bl	xTaskResumeAll
 2319              	.LVL238:
 2320 0016 00E0     		b	.L194
 2321              	.LVL239:
 2322              	.L196:
1290:..\FreeRTOS/tasks.c **** 
 2323              		.loc 1 1290 0
 2324 0018 0020     		movs	r0, #0
 2325              	.LVL240:
 2326              	.L194:
1318:..\FreeRTOS/tasks.c **** 		{
 2327              		.loc 1 1318 0
 2328 001a 0028     		cmp	r0, #0
 2329 001c 01D1     		bne	.L193
1320:..\FreeRTOS/tasks.c **** 		}
 2330              		.loc 1 1320 0
 2331 001e FFF7FEFF 		bl	vPortYield
 2332              	.LVL241:
 2333              	.L193:
1326:..\FreeRTOS/tasks.c **** 
 2334              		.loc 1 1326 0
 2335              		@ sp needed
 2336              	.LVL242:
 2337 0022 10BD     		pop	{r4, pc}
 2338              		.cfi_endproc
 2339              	.LFE37:
 2340              		.size	vTaskDelay, .-vTaskDelay
 2341              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2342              		.align	2
 2343              		.global	vTaskSwitchContext
 2344              		.code	16
 2345              		.thumb_func
 2346              		.type	vTaskSwitchContext, %function
 2347              	vTaskSwitchContext:
 2348              	.LFB55:
2852:..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2349              		.loc 1 2852 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 136


 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 0, uses_anonymous_args = 0
 2353 0000 10B5     		push	{r4, lr}
 2354              		.cfi_def_cfa_offset 8
 2355              		.cfi_offset 4, -8
 2356              		.cfi_offset 14, -4
2853:..\FreeRTOS/tasks.c **** 	{
 2357              		.loc 1 2853 0
 2358 0002 284B     		ldr	r3, .L205
 2359 0004 1B6F     		ldr	r3, [r3, #112]
 2360 0006 002B     		cmp	r3, #0
 2361 0008 03D0     		beq	.L198
2857:..\FreeRTOS/tasks.c **** 	}
 2362              		.loc 1 2857 0
 2363 000a 0122     		movs	r2, #1
 2364 000c 264B     		ldr	r3, .L205+4
 2365 000e 1A60     		str	r2, [r3]
 2366 0010 46E0     		b	.L197
 2367              	.L198:
2861:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2368              		.loc 1 2861 0
 2369 0012 0022     		movs	r2, #0
 2370 0014 244B     		ldr	r3, .L205+4
 2371 0016 1A60     		str	r2, [r3]
 2372              	.LBB11:
2892:..\FreeRTOS/tasks.c **** 
 2373              		.loc 1 2892 0
 2374 0018 224B     		ldr	r3, .L205
 2375 001a 9B6D     		ldr	r3, [r3, #88]
 2376 001c 1B6B     		ldr	r3, [r3, #48]
 2377              	.LVL243:
 2378 001e 234A     		ldr	r2, .L205+8
 2379 0020 1968     		ldr	r1, [r3]
 2380 0022 9142     		cmp	r1, r2
 2381 0024 09D1     		bne	.L200
2892:..\FreeRTOS/tasks.c **** 
 2382              		.loc 1 2892 0 is_stmt 0 discriminator 2
 2383 0026 5968     		ldr	r1, [r3, #4]
 2384 0028 9142     		cmp	r1, r2
 2385 002a 06D1     		bne	.L200
2892:..\FreeRTOS/tasks.c **** 
 2386              		.loc 1 2892 0 discriminator 4
 2387 002c 9968     		ldr	r1, [r3, #8]
 2388 002e 9142     		cmp	r1, r2
 2389 0030 03D1     		bne	.L200
2892:..\FreeRTOS/tasks.c **** 
 2390              		.loc 1 2892 0 discriminator 6
 2391 0032 DA68     		ldr	r2, [r3, #12]
 2392 0034 1D4B     		ldr	r3, .L205+8
 2393              	.LVL244:
 2394 0036 9A42     		cmp	r2, r3
 2395 0038 05D0     		beq	.L201
 2396              	.L200:
2892:..\FreeRTOS/tasks.c **** 
 2397              		.loc 1 2892 0 discriminator 7
 2398 003a 1A4B     		ldr	r3, .L205
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 137


 2399 003c 986D     		ldr	r0, [r3, #88]
 2400 003e 996D     		ldr	r1, [r3, #88]
 2401 0040 3431     		adds	r1, r1, #52
 2402 0042 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2403              	.LVL245:
 2404              	.L201:
 2405              	.LBE11:
 2406              	.LBB12:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2407              		.loc 1 2896 0 is_stmt 1
 2408 0046 174B     		ldr	r3, .L205
 2409 0048 5B6E     		ldr	r3, [r3, #100]
 2410              	.LVL246:
 2411 004a 00E0     		b	.L202
 2412              	.L203:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2413              		.loc 1 2896 0 is_stmt 0 discriminator 3
 2414 004c 013B     		subs	r3, r3, #1
 2415              	.LVL247:
 2416              	.L202:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2417              		.loc 1 2896 0 discriminator 1
 2418 004e 9900     		lsls	r1, r3, #2
 2419 0050 C918     		adds	r1, r1, r3
 2420 0052 8A00     		lsls	r2, r1, #2
 2421 0054 1649     		ldr	r1, .L205+12
 2422 0056 8A18     		adds	r2, r1, r2
 2423 0058 126B     		ldr	r2, [r2, #48]
 2424 005a 002A     		cmp	r2, #0
 2425 005c F6D0     		beq	.L203
 2426              	.LVL248:
 2427              	.LBB13:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2428              		.loc 1 2896 0 discriminator 4
 2429 005e 0A00     		movs	r2, r1
 2430 0060 9900     		lsls	r1, r3, #2
 2431 0062 CC18     		adds	r4, r1, r3
 2432 0064 A000     		lsls	r0, r4, #2
 2433 0066 1018     		adds	r0, r2, r0
 2434 0068 446B     		ldr	r4, [r0, #52]
 2435 006a 6468     		ldr	r4, [r4, #4]
 2436 006c 4463     		str	r4, [r0, #52]
 2437 006e 3032     		adds	r2, r2, #48
 2438 0070 1000     		movs	r0, r2
 2439 0072 C918     		adds	r1, r1, r3
 2440 0074 8A00     		lsls	r2, r1, #2
 2441 0076 0832     		adds	r2, r2, #8
 2442 0078 8218     		adds	r2, r0, r2
 2443 007a 9442     		cmp	r4, r2
 2444 007c 06D1     		bne	.L204
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2445              		.loc 1 2896 0 discriminator 5
 2446 007e 6068     		ldr	r0, [r4, #4]
 2447 0080 9900     		lsls	r1, r3, #2
 2448 0082 C918     		adds	r1, r1, r3
 2449 0084 8A00     		lsls	r2, r1, #2
 2450 0086 0A49     		ldr	r1, .L205+12
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 138


 2451 0088 8A18     		adds	r2, r1, r2
 2452 008a 5063     		str	r0, [r2, #52]
 2453              	.L204:
2896:..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2454              		.loc 1 2896 0 discriminator 7
 2455 008c 9900     		lsls	r1, r3, #2
 2456 008e C918     		adds	r1, r1, r3
 2457 0090 8A00     		lsls	r2, r1, #2
 2458 0092 0749     		ldr	r1, .L205+12
 2459 0094 8A18     		adds	r2, r1, r2
 2460 0096 526B     		ldr	r2, [r2, #52]
 2461 0098 D168     		ldr	r1, [r2, #12]
 2462 009a 024A     		ldr	r2, .L205
 2463 009c 9165     		str	r1, [r2, #88]
 2464              	.LBE13:
 2465 009e 5366     		str	r3, [r2, #100]
 2466              	.LVL249:
 2467              	.L197:
 2468              	.LBE12:
2907:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2469              		.loc 1 2907 0 is_stmt 1
 2470              		@ sp needed
 2471 00a0 10BD     		pop	{r4, pc}
 2472              	.L206:
 2473 00a2 C046     		.align	2
 2474              	.L205:
 2475 00a4 80000000 		.word	.LANCHOR1
 2476 00a8 00010000 		.word	.LANCHOR2
 2477 00ac A5A5A5A5 		.word	-1515870811
 2478 00b0 00000000 		.word	.LANCHOR0
 2479              		.cfi_endproc
 2480              	.LFE55:
 2481              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2482              		.section	.text.vTaskSuspend,"ax",%progbits
 2483              		.align	2
 2484              		.global	vTaskSuspend
 2485              		.code	16
 2486              		.thumb_func
 2487              		.type	vTaskSuspend, %function
 2488              	vTaskSuspend:
 2489              	.LFB42:
1631:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2490              		.loc 1 1631 0
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 0
 2493              		@ frame_needed = 0, uses_anonymous_args = 0
 2494              	.LVL250:
 2495 0000 70B5     		push	{r4, r5, r6, lr}
 2496              		.cfi_def_cfa_offset 16
 2497              		.cfi_offset 4, -16
 2498              		.cfi_offset 5, -12
 2499              		.cfi_offset 6, -8
 2500              		.cfi_offset 14, -4
 2501 0002 0400     		movs	r4, r0
1634:..\FreeRTOS/tasks.c **** 		{
 2502              		.loc 1 1634 0
 2503 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 139


 2504              	.LVL251:
1638:..\FreeRTOS/tasks.c **** 
 2505              		.loc 1 1638 0
 2506 0008 002C     		cmp	r4, #0
 2507 000a 01D1     		bne	.L208
1638:..\FreeRTOS/tasks.c **** 
 2508              		.loc 1 1638 0 is_stmt 0 discriminator 1
 2509 000c 1D4B     		ldr	r3, .L215
 2510 000e 9C6D     		ldr	r4, [r3, #88]
 2511              	.LVL252:
 2512              	.L208:
1644:..\FreeRTOS/tasks.c **** 			{
 2513              		.loc 1 1644 0 is_stmt 1 discriminator 4
 2514 0010 251D     		adds	r5, r4, #4
 2515 0012 2800     		movs	r0, r5
 2516 0014 FFF7FEFF 		bl	uxListRemove
 2517              	.LVL253:
1654:..\FreeRTOS/tasks.c **** 			{
 2518              		.loc 1 1654 0 discriminator 4
 2519 0018 A36A     		ldr	r3, [r4, #40]
 2520 001a 002B     		cmp	r3, #0
 2521 001c 03D0     		beq	.L209
1656:..\FreeRTOS/tasks.c **** 			}
 2522              		.loc 1 1656 0
 2523 001e 2000     		movs	r0, r4
 2524 0020 1830     		adds	r0, r0, #24
 2525 0022 FFF7FEFF 		bl	uxListRemove
 2526              	.LVL254:
 2527              	.L209:
1663:..\FreeRTOS/tasks.c **** 
 2528              		.loc 1 1663 0
 2529 0026 2900     		movs	r1, r5
 2530 0028 1748     		ldr	r0, .L215+4
 2531 002a FFF7FEFF 		bl	vListInsertEnd
 2532              	.LVL255:
1667:..\FreeRTOS/tasks.c **** 				{
 2533              		.loc 1 1667 0
 2534 002e 6423     		movs	r3, #100
 2535 0030 E35C     		ldrb	r3, [r4, r3]
 2536 0032 012B     		cmp	r3, #1
 2537 0034 02D1     		bne	.L210
1671:..\FreeRTOS/tasks.c **** 				}
 2538              		.loc 1 1671 0
 2539 0036 0022     		movs	r2, #0
 2540 0038 6333     		adds	r3, r3, #99
 2541 003a E254     		strb	r2, [r4, r3]
 2542              	.L210:
1676:..\FreeRTOS/tasks.c **** 
 2543              		.loc 1 1676 0
 2544 003c FFF7FEFF 		bl	vPortExitCritical
 2545              	.LVL256:
1678:..\FreeRTOS/tasks.c **** 		{
 2546              		.loc 1 1678 0
 2547 0040 104B     		ldr	r3, .L215
 2548 0042 DB6D     		ldr	r3, [r3, #92]
 2549 0044 002B     		cmp	r3, #0
 2550 0046 05D0     		beq	.L211
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 140


1682:..\FreeRTOS/tasks.c **** 			{
 2551              		.loc 1 1682 0
 2552 0048 FFF7FEFF 		bl	vPortEnterCritical
 2553              	.LVL257:
1684:..\FreeRTOS/tasks.c **** 			}
 2554              		.loc 1 1684 0
 2555 004c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2556              	.LVL258:
1686:..\FreeRTOS/tasks.c **** 		}
 2557              		.loc 1 1686 0
 2558 0050 FFF7FEFF 		bl	vPortExitCritical
 2559              	.LVL259:
 2560              	.L211:
1693:..\FreeRTOS/tasks.c **** 		{
 2561              		.loc 1 1693 0
 2562 0054 0B4B     		ldr	r3, .L215
 2563 0056 9B6D     		ldr	r3, [r3, #88]
 2564 0058 9C42     		cmp	r4, r3
 2565 005a 12D1     		bne	.L207
1695:..\FreeRTOS/tasks.c **** 			{
 2566              		.loc 1 1695 0
 2567 005c 094B     		ldr	r3, .L215
 2568 005e DB6D     		ldr	r3, [r3, #92]
 2569 0060 002B     		cmp	r3, #0
 2570 0062 02D0     		beq	.L213
1699:..\FreeRTOS/tasks.c **** 			}
 2571              		.loc 1 1699 0
 2572 0064 FFF7FEFF 		bl	vPortYield
 2573              	.LVL260:
 2574 0068 0BE0     		b	.L207
 2575              	.L213:
1706:..\FreeRTOS/tasks.c **** 				{
 2576              		.loc 1 1706 0
 2577 006a 074B     		ldr	r3, .L215+4
 2578 006c 1A68     		ldr	r2, [r3]
 2579 006e 054B     		ldr	r3, .L215
 2580 0070 5B6D     		ldr	r3, [r3, #84]
 2581 0072 9A42     		cmp	r2, r3
 2582 0074 03D1     		bne	.L214
1712:..\FreeRTOS/tasks.c **** 				}
 2583              		.loc 1 1712 0
 2584 0076 0022     		movs	r2, #0
 2585 0078 024B     		ldr	r3, .L215
 2586 007a 9A65     		str	r2, [r3, #88]
 2587 007c 01E0     		b	.L207
 2588              	.L214:
1716:..\FreeRTOS/tasks.c **** 				}
 2589              		.loc 1 1716 0
 2590 007e FFF7FEFF 		bl	vTaskSwitchContext
 2591              	.LVL261:
 2592              	.L207:
1724:..\FreeRTOS/tasks.c **** 
 2593              		.loc 1 1724 0
 2594              		@ sp needed
 2595              	.LVL262:
 2596              	.LVL263:
 2597 0082 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 141


 2598              	.L216:
 2599              		.align	2
 2600              	.L215:
 2601 0084 80000000 		.word	.LANCHOR1
 2602 0088 00000000 		.word	.LANCHOR0
 2603              		.cfi_endproc
 2604              	.LFE42:
 2605              		.size	vTaskSuspend, .-vTaskSuspend
 2606              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2607              		.align	2
 2608              		.global	vTaskPlaceOnEventList
 2609              		.code	16
 2610              		.thumb_func
 2611              		.type	vTaskPlaceOnEventList, %function
 2612              	vTaskPlaceOnEventList:
 2613              	.LFB56:
2911:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2614              		.loc 1 2911 0
 2615              		.cfi_startproc
 2616              		@ args = 0, pretend = 0, frame = 0
 2617              		@ frame_needed = 0, uses_anonymous_args = 0
 2618              	.LVL264:
 2619 0000 10B5     		push	{r4, lr}
 2620              		.cfi_def_cfa_offset 8
 2621              		.cfi_offset 4, -8
 2622              		.cfi_offset 14, -4
 2623 0002 0C00     		movs	r4, r1
2921:..\FreeRTOS/tasks.c **** 
 2624              		.loc 1 2921 0
 2625 0004 044B     		ldr	r3, .L218
 2626 0006 996D     		ldr	r1, [r3, #88]
 2627              	.LVL265:
 2628 0008 1831     		adds	r1, r1, #24
 2629 000a FFF7FEFF 		bl	vListInsert
 2630              	.LVL266:
2923:..\FreeRTOS/tasks.c **** }
 2631              		.loc 1 2923 0
 2632 000e 0121     		movs	r1, #1
 2633 0010 2000     		movs	r0, r4
 2634 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2635              	.LVL267:
2924:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2636              		.loc 1 2924 0
 2637              		@ sp needed
 2638              	.LVL268:
 2639 0016 10BD     		pop	{r4, pc}
 2640              	.L219:
 2641              		.align	2
 2642              	.L218:
 2643 0018 80000000 		.word	.LANCHOR1
 2644              		.cfi_endproc
 2645              	.LFE56:
 2646              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2647              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2648              		.align	2
 2649              		.global	vTaskPlaceOnUnorderedEventList
 2650              		.code	16
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 142


 2651              		.thumb_func
 2652              		.type	vTaskPlaceOnUnorderedEventList, %function
 2653              	vTaskPlaceOnUnorderedEventList:
 2654              	.LFB57:
2928:..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2655              		.loc 1 2928 0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 0
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 2659              	.LVL269:
 2660 0000 70B5     		push	{r4, r5, r6, lr}
 2661              		.cfi_def_cfa_offset 16
 2662              		.cfi_offset 4, -16
 2663              		.cfi_offset 5, -12
 2664              		.cfi_offset 6, -8
 2665              		.cfi_offset 14, -4
 2666 0002 1400     		movs	r4, r2
2938:..\FreeRTOS/tasks.c **** 
 2667              		.loc 1 2938 0
 2668 0004 074B     		ldr	r3, .L221
 2669 0006 9A6D     		ldr	r2, [r3, #88]
 2670              	.LVL270:
 2671 0008 8025     		movs	r5, #128
 2672 000a 2D06     		lsls	r5, r5, #24
 2673 000c 2943     		orrs	r1, r5
 2674              	.LVL271:
 2675 000e 9161     		str	r1, [r2, #24]
2945:..\FreeRTOS/tasks.c **** 
 2676              		.loc 1 2945 0
 2677 0010 996D     		ldr	r1, [r3, #88]
 2678 0012 1831     		adds	r1, r1, #24
 2679 0014 FFF7FEFF 		bl	vListInsertEnd
 2680              	.LVL272:
2947:..\FreeRTOS/tasks.c **** }
 2681              		.loc 1 2947 0
 2682 0018 0121     		movs	r1, #1
 2683 001a 2000     		movs	r0, r4
 2684 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2685              	.LVL273:
2948:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2686              		.loc 1 2948 0
 2687              		@ sp needed
 2688              	.LVL274:
 2689 0020 70BD     		pop	{r4, r5, r6, pc}
 2690              	.L222:
 2691 0022 C046     		.align	2
 2692              	.L221:
 2693 0024 80000000 		.word	.LANCHOR1
 2694              		.cfi_endproc
 2695              	.LFE57:
 2696              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2697              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2698              		.align	2
 2699              		.global	xTaskRemoveFromEventList
 2700              		.code	16
 2701              		.thumb_func
 2702              		.type	xTaskRemoveFromEventList, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 143


 2703              	xTaskRemoveFromEventList:
 2704              	.LFB58:
2985:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2705              		.loc 1 2985 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 0
 2708              		@ frame_needed = 0, uses_anonymous_args = 0
 2709              	.LVL275:
 2710 0000 70B5     		push	{r4, r5, r6, lr}
 2711              		.cfi_def_cfa_offset 16
 2712              		.cfi_offset 4, -16
 2713              		.cfi_offset 5, -12
 2714              		.cfi_offset 6, -8
 2715              		.cfi_offset 14, -4
3002:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2716              		.loc 1 3002 0
 2717 0002 C368     		ldr	r3, [r0, #12]
 2718 0004 DC68     		ldr	r4, [r3, #12]
 2719              	.LVL276:
3004:..\FreeRTOS/tasks.c **** 
 2720              		.loc 1 3004 0
 2721 0006 2500     		movs	r5, r4
 2722 0008 1835     		adds	r5, r5, #24
 2723 000a 2800     		movs	r0, r5
 2724              	.LVL277:
 2725 000c FFF7FEFF 		bl	uxListRemove
 2726              	.LVL278:
3006:..\FreeRTOS/tasks.c **** 	{
 2727              		.loc 1 3006 0
 2728 0010 154B     		ldr	r3, .L229
 2729 0012 1B6F     		ldr	r3, [r3, #112]
 2730 0014 002B     		cmp	r3, #0
 2731 0016 14D1     		bne	.L224
3008:..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2732              		.loc 1 3008 0
 2733 0018 251D     		adds	r5, r4, #4
 2734 001a 2800     		movs	r0, r5
 2735 001c FFF7FEFF 		bl	uxListRemove
 2736              	.LVL279:
3009:..\FreeRTOS/tasks.c **** 	}
 2737              		.loc 1 3009 0
 2738 0020 E36A     		ldr	r3, [r4, #44]
 2739 0022 114A     		ldr	r2, .L229
 2740 0024 526E     		ldr	r2, [r2, #100]
 2741 0026 9342     		cmp	r3, r2
 2742 0028 01D9     		bls	.L225
3009:..\FreeRTOS/tasks.c **** 	}
 2743              		.loc 1 3009 0 is_stmt 0 discriminator 1
 2744 002a 0F4A     		ldr	r2, .L229
 2745 002c 5366     		str	r3, [r2, #100]
 2746              	.L225:
3009:..\FreeRTOS/tasks.c **** 	}
 2747              		.loc 1 3009 0 discriminator 3
 2748 002e 9A00     		lsls	r2, r3, #2
 2749 0030 D318     		adds	r3, r2, r3
 2750 0032 9A00     		lsls	r2, r3, #2
 2751 0034 0D48     		ldr	r0, .L229+4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 144


 2752 0036 3030     		adds	r0, r0, #48
 2753 0038 8018     		adds	r0, r0, r2
 2754 003a 2900     		movs	r1, r5
 2755 003c FFF7FEFF 		bl	vListInsertEnd
 2756              	.LVL280:
 2757 0040 04E0     		b	.L226
 2758              	.L224:
3015:..\FreeRTOS/tasks.c **** 	}
 2759              		.loc 1 3015 0 is_stmt 1
 2760 0042 2900     		movs	r1, r5
 2761 0044 0948     		ldr	r0, .L229+4
 2762 0046 1430     		adds	r0, r0, #20
 2763 0048 FFF7FEFF 		bl	vListInsertEnd
 2764              	.LVL281:
 2765              	.L226:
3018:..\FreeRTOS/tasks.c **** 	{
 2766              		.loc 1 3018 0
 2767 004c E26A     		ldr	r2, [r4, #44]
 2768 004e 064B     		ldr	r3, .L229
 2769 0050 9B6D     		ldr	r3, [r3, #88]
 2770 0052 DB6A     		ldr	r3, [r3, #44]
 2771 0054 9A42     		cmp	r2, r3
 2772 0056 04D9     		bls	.L228
 2773              	.LVL282:
3027:..\FreeRTOS/tasks.c **** 	}
 2774              		.loc 1 3027 0
 2775 0058 0122     		movs	r2, #1
 2776 005a 054B     		ldr	r3, .L229+8
 2777 005c 1A60     		str	r2, [r3]
3023:..\FreeRTOS/tasks.c **** 
 2778              		.loc 1 3023 0
 2779 005e 0120     		movs	r0, #1
 2780 0060 00E0     		b	.L227
 2781              	.LVL283:
 2782              	.L228:
3031:..\FreeRTOS/tasks.c **** 	}
 2783              		.loc 1 3031 0
 2784 0062 0020     		movs	r0, #0
 2785              	.L227:
 2786              	.LVL284:
3049:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2787              		.loc 1 3049 0
 2788              		@ sp needed
 2789              	.LVL285:
 2790 0064 70BD     		pop	{r4, r5, r6, pc}
 2791              	.L230:
 2792 0066 C046     		.align	2
 2793              	.L229:
 2794 0068 80000000 		.word	.LANCHOR1
 2795 006c 00000000 		.word	.LANCHOR0
 2796 0070 00010000 		.word	.LANCHOR2
 2797              		.cfi_endproc
 2798              	.LFE58:
 2799              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2800              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2801              		.align	2
 2802              		.global	vTaskRemoveFromUnorderedEventList
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 145


 2803              		.code	16
 2804              		.thumb_func
 2805              		.type	vTaskRemoveFromUnorderedEventList, %function
 2806              	vTaskRemoveFromUnorderedEventList:
 2807              	.LFB59:
3053:..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2808              		.loc 1 3053 0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 0
 2811              		@ frame_needed = 0, uses_anonymous_args = 0
 2812              	.LVL286:
 2813 0000 70B5     		push	{r4, r5, r6, lr}
 2814              		.cfi_def_cfa_offset 16
 2815              		.cfi_offset 4, -16
 2816              		.cfi_offset 5, -12
 2817              		.cfi_offset 6, -8
 2818              		.cfi_offset 14, -4
3061:..\FreeRTOS/tasks.c **** 
 2819              		.loc 1 3061 0
 2820 0002 8023     		movs	r3, #128
 2821 0004 1B06     		lsls	r3, r3, #24
 2822 0006 1943     		orrs	r1, r3
 2823              	.LVL287:
 2824 0008 0160     		str	r1, [r0]
3065:..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2825              		.loc 1 3065 0
 2826 000a C568     		ldr	r5, [r0, #12]
 2827              	.LVL288:
3067:..\FreeRTOS/tasks.c **** 
 2828              		.loc 1 3067 0
 2829 000c FFF7FEFF 		bl	uxListRemove
 2830              	.LVL289:
3072:..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2831              		.loc 1 3072 0
 2832 0010 2C1D     		adds	r4, r5, #4
 2833 0012 2000     		movs	r0, r4
 2834 0014 FFF7FEFF 		bl	uxListRemove
 2835              	.LVL290:
3073:..\FreeRTOS/tasks.c **** 
 2836              		.loc 1 3073 0
 2837 0018 EB6A     		ldr	r3, [r5, #44]
 2838 001a 0C4A     		ldr	r2, .L234
 2839 001c 526E     		ldr	r2, [r2, #100]
 2840 001e 9342     		cmp	r3, r2
 2841 0020 01D9     		bls	.L232
3073:..\FreeRTOS/tasks.c **** 
 2842              		.loc 1 3073 0 is_stmt 0 discriminator 1
 2843 0022 0A4A     		ldr	r2, .L234
 2844 0024 5366     		str	r3, [r2, #100]
 2845              	.L232:
3073:..\FreeRTOS/tasks.c **** 
 2846              		.loc 1 3073 0 discriminator 3
 2847 0026 9A00     		lsls	r2, r3, #2
 2848 0028 D318     		adds	r3, r2, r3
 2849 002a 9A00     		lsls	r2, r3, #2
 2850 002c 0848     		ldr	r0, .L234+4
 2851 002e 3030     		adds	r0, r0, #48
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 146


 2852 0030 8018     		adds	r0, r0, r2
 2853 0032 2100     		movs	r1, r4
 2854 0034 FFF7FEFF 		bl	vListInsertEnd
 2855              	.LVL291:
3075:..\FreeRTOS/tasks.c **** 	{
 2856              		.loc 1 3075 0 is_stmt 1 discriminator 3
 2857 0038 EA6A     		ldr	r2, [r5, #44]
 2858 003a 044B     		ldr	r3, .L234
 2859 003c 9B6D     		ldr	r3, [r3, #88]
 2860 003e DB6A     		ldr	r3, [r3, #44]
 2861 0040 9A42     		cmp	r2, r3
 2862 0042 02D9     		bls	.L231
3081:..\FreeRTOS/tasks.c **** 	}
 2863              		.loc 1 3081 0
 2864 0044 0122     		movs	r2, #1
 2865 0046 034B     		ldr	r3, .L234+8
 2866 0048 1A60     		str	r2, [r3]
 2867              	.L231:
3083:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2868              		.loc 1 3083 0
 2869              		@ sp needed
 2870              	.LVL292:
 2871 004a 70BD     		pop	{r4, r5, r6, pc}
 2872              	.L235:
 2873              		.align	2
 2874              	.L234:
 2875 004c 80000000 		.word	.LANCHOR1
 2876 0050 00000000 		.word	.LANCHOR0
 2877 0054 00010000 		.word	.LANCHOR2
 2878              		.cfi_endproc
 2879              	.LFE59:
 2880              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2881              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2882              		.align	2
 2883              		.global	vTaskSetTimeOutState
 2884              		.code	16
 2885              		.thumb_func
 2886              		.type	vTaskSetTimeOutState, %function
 2887              	vTaskSetTimeOutState:
 2888              	.LFB60:
3087:..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 2889              		.loc 1 3087 0
 2890              		.cfi_startproc
 2891              		@ args = 0, pretend = 0, frame = 0
 2892              		@ frame_needed = 0, uses_anonymous_args = 0
 2893              	.LVL293:
 2894 0000 10B5     		push	{r4, lr}
 2895              		.cfi_def_cfa_offset 8
 2896              		.cfi_offset 4, -8
 2897              		.cfi_offset 14, -4
 2898 0002 0400     		movs	r4, r0
3089:..\FreeRTOS/tasks.c **** 	{
 2899              		.loc 1 3089 0
 2900 0004 FFF7FEFF 		bl	vPortEnterCritical
 2901              	.LVL294:
3091:..\FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2902              		.loc 1 3091 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 147


 2903 0008 034B     		ldr	r3, .L237
 2904 000a 9A6F     		ldr	r2, [r3, #120]
 2905 000c 2260     		str	r2, [r4]
3092:..\FreeRTOS/tasks.c **** 	}
 2906              		.loc 1 3092 0
 2907 000e DB6E     		ldr	r3, [r3, #108]
 2908 0010 6360     		str	r3, [r4, #4]
3094:..\FreeRTOS/tasks.c **** }
 2909              		.loc 1 3094 0
 2910 0012 FFF7FEFF 		bl	vPortExitCritical
 2911              	.LVL295:
3095:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2912              		.loc 1 3095 0
 2913              		@ sp needed
 2914              	.LVL296:
 2915 0016 10BD     		pop	{r4, pc}
 2916              	.L238:
 2917              		.align	2
 2918              	.L237:
 2919 0018 80000000 		.word	.LANCHOR1
 2920              		.cfi_endproc
 2921              	.LFE60:
 2922              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2923              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2924              		.align	2
 2925              		.global	vTaskInternalSetTimeOutState
 2926              		.code	16
 2927              		.thumb_func
 2928              		.type	vTaskInternalSetTimeOutState, %function
 2929              	vTaskInternalSetTimeOutState:
 2930              	.LFB61:
3099:..\FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2931              		.loc 1 3099 0
 2932              		.cfi_startproc
 2933              		@ args = 0, pretend = 0, frame = 0
 2934              		@ frame_needed = 0, uses_anonymous_args = 0
 2935              		@ link register save eliminated.
 2936              	.LVL297:
3101:..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2937              		.loc 1 3101 0
 2938 0000 024B     		ldr	r3, .L240
 2939 0002 9A6F     		ldr	r2, [r3, #120]
 2940 0004 0260     		str	r2, [r0]
3102:..\FreeRTOS/tasks.c **** }
 2941              		.loc 1 3102 0
 2942 0006 DB6E     		ldr	r3, [r3, #108]
 2943 0008 4360     		str	r3, [r0, #4]
3103:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2944              		.loc 1 3103 0
 2945              		@ sp needed
 2946 000a 7047     		bx	lr
 2947              	.L241:
 2948              		.align	2
 2949              	.L240:
 2950 000c 80000000 		.word	.LANCHOR1
 2951              		.cfi_endproc
 2952              	.LFE61:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 148


 2953              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2954              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2955              		.align	2
 2956              		.global	xTaskCheckForTimeOut
 2957              		.code	16
 2958              		.thumb_func
 2959              		.type	xTaskCheckForTimeOut, %function
 2960              	xTaskCheckForTimeOut:
 2961              	.LFB62:
3107:..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 2962              		.loc 1 3107 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 0
 2965              		@ frame_needed = 0, uses_anonymous_args = 0
 2966              	.LVL298:
 2967 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2968              		.cfi_def_cfa_offset 24
 2969              		.cfi_offset 3, -24
 2970              		.cfi_offset 4, -20
 2971              		.cfi_offset 5, -16
 2972              		.cfi_offset 6, -12
 2973              		.cfi_offset 7, -8
 2974              		.cfi_offset 14, -4
 2975 0002 0400     		movs	r4, r0
 2976 0004 0D00     		movs	r5, r1
3113:..\FreeRTOS/tasks.c **** 	{
 2977              		.loc 1 3113 0
 2978 0006 FFF7FEFF 		bl	vPortEnterCritical
 2979              	.LVL299:
 2980              	.LBB14:
3116:..\FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2981              		.loc 1 3116 0
 2982 000a 114B     		ldr	r3, .L248
 2983 000c D96E     		ldr	r1, [r3, #108]
 2984              	.LVL300:
3117:..\FreeRTOS/tasks.c **** 
 2985              		.loc 1 3117 0
 2986 000e 6268     		ldr	r2, [r4, #4]
 2987 0010 881A     		subs	r0, r1, r2
 2988              	.LVL301:
3131:..\FreeRTOS/tasks.c **** 			{
 2989              		.loc 1 3131 0
 2990 0012 2B68     		ldr	r3, [r5]
 2991 0014 5E1C     		adds	r6, r3, #1
 2992 0016 13D0     		beq	.L246
3141:..\FreeRTOS/tasks.c **** 		{
 2993              		.loc 1 3141 0
 2994 0018 0D4E     		ldr	r6, .L248
 2995 001a B66F     		ldr	r6, [r6, #120]
 2996 001c 2768     		ldr	r7, [r4]
 2997 001e B742     		cmp	r7, r6
 2998 0020 01D0     		beq	.L244
3141:..\FreeRTOS/tasks.c **** 		{
 2999              		.loc 1 3141 0 is_stmt 0 discriminator 1
 3000 0022 9142     		cmp	r1, r2
 3001 0024 0ED2     		bcs	.L247
 3002              	.L244:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 149


3150:..\FreeRTOS/tasks.c **** 		{
 3003              		.loc 1 3150 0 is_stmt 1
 3004 0026 9842     		cmp	r0, r3
 3005 0028 06D2     		bcs	.L245
3153:..\FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3006              		.loc 1 3153 0
 3007 002a 1B1A     		subs	r3, r3, r0
 3008 002c 2B60     		str	r3, [r5]
3154:..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3009              		.loc 1 3154 0
 3010 002e 2000     		movs	r0, r4
 3011              	.LVL302:
 3012 0030 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3013              	.LVL303:
3155:..\FreeRTOS/tasks.c **** 		}
 3014              		.loc 1 3155 0
 3015 0034 0024     		movs	r4, #0
 3016              	.LVL304:
 3017 0036 06E0     		b	.L243
 3018              	.LVL305:
 3019              	.L245:
3159:..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3020              		.loc 1 3159 0
 3021 0038 0023     		movs	r3, #0
 3022 003a 2B60     		str	r3, [r5]
 3023              	.LVL306:
3160:..\FreeRTOS/tasks.c **** 		}
 3024              		.loc 1 3160 0
 3025 003c 0124     		movs	r4, #1
 3026              	.LVL307:
 3027 003e 02E0     		b	.L243
 3028              	.LVL308:
 3029              	.L246:
3136:..\FreeRTOS/tasks.c **** 			}
 3030              		.loc 1 3136 0
 3031 0040 0024     		movs	r4, #0
 3032              	.LVL309:
 3033 0042 00E0     		b	.L243
 3034              	.LVL310:
 3035              	.L247:
3148:..\FreeRTOS/tasks.c **** 		}
 3036              		.loc 1 3148 0
 3037 0044 0124     		movs	r4, #1
 3038              	.LVL311:
 3039              	.L243:
 3040              	.LBE14:
3163:..\FreeRTOS/tasks.c **** 
 3041              		.loc 1 3163 0
 3042 0046 FFF7FEFF 		bl	vPortExitCritical
 3043              	.LVL312:
3166:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3044              		.loc 1 3166 0
 3045 004a 2000     		movs	r0, r4
 3046              		@ sp needed
 3047              	.LVL313:
 3048              	.LVL314:
 3049 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 150


 3050              	.L249:
 3051 004e C046     		.align	2
 3052              	.L248:
 3053 0050 80000000 		.word	.LANCHOR1
 3054              		.cfi_endproc
 3055              	.LFE62:
 3056              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3057              		.section	.text.vTaskMissedYield,"ax",%progbits
 3058              		.align	2
 3059              		.global	vTaskMissedYield
 3060              		.code	16
 3061              		.thumb_func
 3062              		.type	vTaskMissedYield, %function
 3063              	vTaskMissedYield:
 3064              	.LFB63:
3170:..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3065              		.loc 1 3170 0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 0
 3068              		@ frame_needed = 0, uses_anonymous_args = 0
 3069              		@ link register save eliminated.
3171:..\FreeRTOS/tasks.c **** }
 3070              		.loc 1 3171 0
 3071 0000 0122     		movs	r2, #1
 3072 0002 014B     		ldr	r3, .L251
 3073 0004 1A60     		str	r2, [r3]
3172:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3074              		.loc 1 3172 0
 3075              		@ sp needed
 3076 0006 7047     		bx	lr
 3077              	.L252:
 3078              		.align	2
 3079              	.L251:
 3080 0008 00010000 		.word	.LANCHOR2
 3081              		.cfi_endproc
 3082              	.LFE63:
 3083              		.size	vTaskMissedYield, .-vTaskMissedYield
 3084              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3085              		.align	2
 3086              		.global	vTaskSetThreadLocalStoragePointer
 3087              		.code	16
 3088              		.thumb_func
 3089              		.type	vTaskSetThreadLocalStoragePointer, %function
 3090              	vTaskSetThreadLocalStoragePointer:
 3091              	.LFB65:
3384:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3092              		.loc 1 3384 0
 3093              		.cfi_startproc
 3094              		@ args = 0, pretend = 0, frame = 0
 3095              		@ frame_needed = 0, uses_anonymous_args = 0
 3096              		@ link register save eliminated.
 3097              	.LVL315:
3387:..\FreeRTOS/tasks.c **** 		{
 3098              		.loc 1 3387 0
 3099 0000 0429     		cmp	r1, #4
 3100 0002 07DC     		bgt	.L253
3389:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 151


 3101              		.loc 1 3389 0
 3102 0004 0028     		cmp	r0, #0
 3103 0006 01D1     		bne	.L255
3389:..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3104              		.loc 1 3389 0 is_stmt 0 discriminator 1
 3105 0008 034B     		ldr	r3, .L256
 3106 000a 986D     		ldr	r0, [r3, #88]
 3107              	.LVL316:
 3108              	.L255:
3390:..\FreeRTOS/tasks.c **** 		}
 3109              		.loc 1 3390 0 is_stmt 1 discriminator 4
 3110 000c 1231     		adds	r1, r1, #18
 3111              	.LVL317:
 3112 000e 8900     		lsls	r1, r1, #2
 3113              	.LVL318:
 3114 0010 4018     		adds	r0, r0, r1
 3115              	.LVL319:
 3116 0012 4260     		str	r2, [r0, #4]
 3117              	.L253:
3392:..\FreeRTOS/tasks.c **** 
 3118              		.loc 1 3392 0
 3119              		@ sp needed
 3120 0014 7047     		bx	lr
 3121              	.L257:
 3122 0016 C046     		.align	2
 3123              	.L256:
 3124 0018 80000000 		.word	.LANCHOR1
 3125              		.cfi_endproc
 3126              	.LFE65:
 3127              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 3128              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3129              		.align	2
 3130              		.global	pvTaskGetThreadLocalStoragePointer
 3131              		.code	16
 3132              		.thumb_func
 3133              		.type	pvTaskGetThreadLocalStoragePointer, %function
 3134              	pvTaskGetThreadLocalStoragePointer:
 3135              	.LFB66:
3400:..\FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
 3136              		.loc 1 3400 0
 3137              		.cfi_startproc
 3138              		@ args = 0, pretend = 0, frame = 0
 3139              		@ frame_needed = 0, uses_anonymous_args = 0
 3140              		@ link register save eliminated.
 3141              	.LVL320:
3404:..\FreeRTOS/tasks.c **** 		{
 3142              		.loc 1 3404 0
 3143 0000 0429     		cmp	r1, #4
 3144 0002 08DC     		bgt	.L261
3406:..\FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3145              		.loc 1 3406 0
 3146 0004 0028     		cmp	r0, #0
 3147 0006 01D1     		bne	.L260
3406:..\FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3148              		.loc 1 3406 0 is_stmt 0 discriminator 1
 3149 0008 044B     		ldr	r3, .L262
 3150 000a 986D     		ldr	r0, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 152


 3151              	.LVL321:
 3152              	.L260:
3407:..\FreeRTOS/tasks.c **** 		}
 3153              		.loc 1 3407 0 is_stmt 1 discriminator 4
 3154 000c 1231     		adds	r1, r1, #18
 3155              	.LVL322:
 3156 000e 8900     		lsls	r1, r1, #2
 3157              	.LVL323:
 3158 0010 4018     		adds	r0, r0, r1
 3159              	.LVL324:
 3160 0012 4068     		ldr	r0, [r0, #4]
 3161              	.LVL325:
 3162 0014 00E0     		b	.L259
 3163              	.LVL326:
 3164              	.L261:
3411:..\FreeRTOS/tasks.c **** 		}
 3165              		.loc 1 3411 0
 3166 0016 0020     		movs	r0, #0
 3167              	.LVL327:
 3168              	.L259:
3415:..\FreeRTOS/tasks.c **** 
 3169              		.loc 1 3415 0
 3170              		@ sp needed
 3171 0018 7047     		bx	lr
 3172              	.L263:
 3173 001a C046     		.align	2
 3174              	.L262:
 3175 001c 80000000 		.word	.LANCHOR1
 3176              		.cfi_endproc
 3177              	.LFE66:
 3178              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3179              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3180              		.align	2
 3181              		.global	uxTaskGetStackHighWaterMark
 3182              		.code	16
 3183              		.thumb_func
 3184              		.type	uxTaskGetStackHighWaterMark, %function
 3185              	uxTaskGetStackHighWaterMark:
 3186              	.LFB70:
3649:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3187              		.loc 1 3649 0
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 0
 3190              		@ frame_needed = 0, uses_anonymous_args = 0
 3191              	.LVL328:
 3192 0000 10B5     		push	{r4, lr}
 3193              		.cfi_def_cfa_offset 8
 3194              		.cfi_offset 4, -8
 3195              		.cfi_offset 14, -4
3654:..\FreeRTOS/tasks.c **** 
 3196              		.loc 1 3654 0
 3197 0002 0028     		cmp	r0, #0
 3198 0004 01D1     		bne	.L265
3654:..\FreeRTOS/tasks.c **** 
 3199              		.loc 1 3654 0 is_stmt 0 discriminator 1
 3200 0006 034B     		ldr	r3, .L266
 3201 0008 986D     		ldr	r0, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 153


 3202              	.LVL329:
 3203              	.L265:
3658:..\FreeRTOS/tasks.c **** 		}
 3204              		.loc 1 3658 0 is_stmt 1 discriminator 4
 3205 000a 006B     		ldr	r0, [r0, #48]
 3206              	.LVL330:
3666:..\FreeRTOS/tasks.c **** 
 3207              		.loc 1 3666 0 discriminator 4
 3208 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3209              	.LVL331:
3669:..\FreeRTOS/tasks.c **** 
 3210              		.loc 1 3669 0 discriminator 4
 3211              		@ sp needed
 3212 0010 10BD     		pop	{r4, pc}
 3213              	.L267:
 3214 0012 C046     		.align	2
 3215              	.L266:
 3216 0014 80000000 		.word	.LANCHOR1
 3217              		.cfi_endproc
 3218              	.LFE70:
 3219              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3220              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3221              		.align	2
 3222              		.global	xTaskGetCurrentTaskHandle
 3223              		.code	16
 3224              		.thumb_func
 3225              		.type	xTaskGetCurrentTaskHandle, %function
 3226              	xTaskGetCurrentTaskHandle:
 3227              	.LFB73:
3757:..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 3228              		.loc 1 3757 0
 3229              		.cfi_startproc
 3230              		@ args = 0, pretend = 0, frame = 0
 3231              		@ frame_needed = 0, uses_anonymous_args = 0
 3232              		@ link register save eliminated.
3763:..\FreeRTOS/tasks.c **** 
 3233              		.loc 1 3763 0
 3234 0000 014B     		ldr	r3, .L269
 3235 0002 986D     		ldr	r0, [r3, #88]
 3236              	.LVL332:
3766:..\FreeRTOS/tasks.c **** 
 3237              		.loc 1 3766 0
 3238              		@ sp needed
 3239 0004 7047     		bx	lr
 3240              	.L270:
 3241 0006 C046     		.align	2
 3242              	.L269:
 3243 0008 80000000 		.word	.LANCHOR1
 3244              		.cfi_endproc
 3245              	.LFE73:
 3246              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3247              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3248              		.align	2
 3249              		.global	xTaskGetSchedulerState
 3250              		.code	16
 3251              		.thumb_func
 3252              		.type	xTaskGetSchedulerState, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 154


 3253              	xTaskGetSchedulerState:
 3254              	.LFB74:
3774:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 3255              		.loc 1 3774 0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 0
 3258              		@ frame_needed = 0, uses_anonymous_args = 0
 3259              		@ link register save eliminated.
3777:..\FreeRTOS/tasks.c **** 		{
 3260              		.loc 1 3777 0
 3261 0000 064B     		ldr	r3, .L275
 3262 0002 DB6D     		ldr	r3, [r3, #92]
 3263 0004 002B     		cmp	r3, #0
 3264 0006 05D0     		beq	.L273
3783:..\FreeRTOS/tasks.c **** 			{
 3265              		.loc 1 3783 0
 3266 0008 044B     		ldr	r3, .L275
 3267 000a 1B6F     		ldr	r3, [r3, #112]
 3268 000c 002B     		cmp	r3, #0
 3269 000e 03D1     		bne	.L274
3785:..\FreeRTOS/tasks.c **** 			}
 3270              		.loc 1 3785 0
 3271 0010 0220     		movs	r0, #2
 3272 0012 02E0     		b	.L272
 3273              	.L273:
3779:..\FreeRTOS/tasks.c **** 		}
 3274              		.loc 1 3779 0
 3275 0014 0120     		movs	r0, #1
 3276 0016 00E0     		b	.L272
 3277              	.L274:
3789:..\FreeRTOS/tasks.c **** 			}
 3278              		.loc 1 3789 0
 3279 0018 0020     		movs	r0, #0
 3280              	.L272:
 3281              	.LVL333:
3794:..\FreeRTOS/tasks.c **** 
 3282              		.loc 1 3794 0
 3283              		@ sp needed
 3284 001a 7047     		bx	lr
 3285              	.L276:
 3286              		.align	2
 3287              	.L275:
 3288 001c 80000000 		.word	.LANCHOR1
 3289              		.cfi_endproc
 3290              	.LFE74:
 3291              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 3292              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3293              		.align	2
 3294              		.global	xTaskPriorityInherit
 3295              		.code	16
 3296              		.thumb_func
 3297              		.type	xTaskPriorityInherit, %function
 3298              	xTaskPriorityInherit:
 3299              	.LFB75:
3802:..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3300              		.loc 1 3802 0
 3301              		.cfi_startproc
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 155


 3302              		@ args = 0, pretend = 0, frame = 0
 3303              		@ frame_needed = 0, uses_anonymous_args = 0
 3304              	.LVL334:
 3305 0000 70B5     		push	{r4, r5, r6, lr}
 3306              		.cfi_def_cfa_offset 16
 3307              		.cfi_offset 4, -16
 3308              		.cfi_offset 5, -12
 3309              		.cfi_offset 6, -8
 3310              		.cfi_offset 14, -4
 3311 0002 041E     		subs	r4, r0, #0
 3312              	.LVL335:
3809:..\FreeRTOS/tasks.c **** 		{
 3313              		.loc 1 3809 0
 3314 0004 42D0     		beq	.L284
3814:..\FreeRTOS/tasks.c **** 			{
 3315              		.loc 1 3814 0
 3316 0006 C36A     		ldr	r3, [r0, #44]
 3317 0008 224A     		ldr	r2, .L287
 3318 000a 926D     		ldr	r2, [r2, #88]
 3319 000c D26A     		ldr	r2, [r2, #44]
 3320 000e 9342     		cmp	r3, r2
 3321 0010 34D2     		bcs	.L279
3819:..\FreeRTOS/tasks.c **** 				{
 3322              		.loc 1 3819 0
 3323 0012 8269     		ldr	r2, [r0, #24]
 3324 0014 002A     		cmp	r2, #0
 3325 0016 05DB     		blt	.L280
3821:..\FreeRTOS/tasks.c **** 				}
 3326              		.loc 1 3821 0
 3327 0018 1E4A     		ldr	r2, .L287
 3328 001a 926D     		ldr	r2, [r2, #88]
 3329 001c D16A     		ldr	r1, [r2, #44]
 3330 001e 0522     		movs	r2, #5
 3331 0020 521A     		subs	r2, r2, r1
 3332 0022 8261     		str	r2, [r0, #24]
 3333              	.L280:
3830:..\FreeRTOS/tasks.c **** 				{
 3334              		.loc 1 3830 0
 3335 0024 9A00     		lsls	r2, r3, #2
 3336 0026 D318     		adds	r3, r2, r3
 3337 0028 9A00     		lsls	r2, r3, #2
 3338 002a 1B4B     		ldr	r3, .L287+4
 3339 002c 3033     		adds	r3, r3, #48
 3340 002e 9A18     		adds	r2, r3, r2
 3341 0030 6369     		ldr	r3, [r4, #20]
 3342 0032 9342     		cmp	r3, r2
 3343 0034 01D1     		bne	.L285
 3344 0036 0123     		movs	r3, #1
 3345 0038 00E0     		b	.L281
 3346              	.L285:
 3347 003a 0023     		movs	r3, #0
 3348              	.L281:
3830:..\FreeRTOS/tasks.c **** 				{
 3349              		.loc 1 3830 0 is_stmt 0 discriminator 4
 3350 003c 002B     		cmp	r3, #0
 3351 003e 17D0     		beq	.L282
3832:..\FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 156


 3352              		.loc 1 3832 0 is_stmt 1
 3353 0040 251D     		adds	r5, r4, #4
 3354 0042 2800     		movs	r0, r5
 3355              	.LVL336:
 3356 0044 FFF7FEFF 		bl	uxListRemove
 3357              	.LVL337:
3842:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3358              		.loc 1 3842 0
 3359 0048 124A     		ldr	r2, .L287
 3360 004a 936D     		ldr	r3, [r2, #88]
 3361 004c DB6A     		ldr	r3, [r3, #44]
 3362 004e E362     		str	r3, [r4, #44]
3843:..\FreeRTOS/tasks.c **** 				}
 3363              		.loc 1 3843 0
 3364 0050 526E     		ldr	r2, [r2, #100]
 3365 0052 9342     		cmp	r3, r2
 3366 0054 01D9     		bls	.L283
3843:..\FreeRTOS/tasks.c **** 				}
 3367              		.loc 1 3843 0 is_stmt 0 discriminator 1
 3368 0056 0F4A     		ldr	r2, .L287
 3369 0058 5366     		str	r3, [r2, #100]
 3370              	.L283:
3843:..\FreeRTOS/tasks.c **** 				}
 3371              		.loc 1 3843 0 discriminator 3
 3372 005a 9A00     		lsls	r2, r3, #2
 3373 005c D318     		adds	r3, r2, r3
 3374 005e 9A00     		lsls	r2, r3, #2
 3375 0060 0D48     		ldr	r0, .L287+4
 3376 0062 3030     		adds	r0, r0, #48
 3377 0064 8018     		adds	r0, r0, r2
 3378 0066 2900     		movs	r1, r5
 3379 0068 FFF7FEFF 		bl	vListInsertEnd
 3380              	.LVL338:
3854:..\FreeRTOS/tasks.c **** 			}
 3381              		.loc 1 3854 0 is_stmt 1 discriminator 3
 3382 006c 0120     		movs	r0, #1
 3383 006e 10E0     		b	.L278
 3384              	.LVL339:
 3385              	.L282:
3848:..\FreeRTOS/tasks.c **** 				}
 3386              		.loc 1 3848 0
 3387 0070 084B     		ldr	r3, .L287
 3388 0072 9B6D     		ldr	r3, [r3, #88]
 3389 0074 DB6A     		ldr	r3, [r3, #44]
 3390 0076 E362     		str	r3, [r4, #44]
3854:..\FreeRTOS/tasks.c **** 			}
 3391              		.loc 1 3854 0
 3392 0078 0120     		movs	r0, #1
 3393              	.LVL340:
 3394 007a 0AE0     		b	.L278
 3395              	.LVL341:
 3396              	.L279:
3858:..\FreeRTOS/tasks.c **** 				{
 3397              		.loc 1 3858 0
 3398 007c 426C     		ldr	r2, [r0, #68]
 3399 007e 054B     		ldr	r3, .L287
 3400 0080 9B6D     		ldr	r3, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 157


 3401 0082 DB6A     		ldr	r3, [r3, #44]
 3402 0084 9A42     		cmp	r2, r3
 3403 0086 03D3     		bcc	.L286
3804:..\FreeRTOS/tasks.c **** 
 3404              		.loc 1 3804 0
 3405 0088 0020     		movs	r0, #0
 3406              	.LVL342:
 3407 008a 02E0     		b	.L278
 3408              	.LVL343:
 3409              	.L284:
 3410 008c 0020     		movs	r0, #0
 3411              	.LVL344:
 3412 008e 00E0     		b	.L278
 3413              	.LVL345:
 3414              	.L286:
3867:..\FreeRTOS/tasks.c **** 				}
 3415              		.loc 1 3867 0
 3416 0090 0120     		movs	r0, #1
 3417              	.LVL346:
 3418              	.L278:
3881:..\FreeRTOS/tasks.c **** 
 3419              		.loc 1 3881 0
 3420              		@ sp needed
 3421              	.LVL347:
 3422 0092 70BD     		pop	{r4, r5, r6, pc}
 3423              	.L288:
 3424              		.align	2
 3425              	.L287:
 3426 0094 80000000 		.word	.LANCHOR1
 3427 0098 00000000 		.word	.LANCHOR0
 3428              		.cfi_endproc
 3429              	.LFE75:
 3430              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3431              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3432              		.align	2
 3433              		.global	xTaskPriorityDisinherit
 3434              		.code	16
 3435              		.thumb_func
 3436              		.type	xTaskPriorityDisinherit, %function
 3437              	xTaskPriorityDisinherit:
 3438              	.LFB76:
3889:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3439              		.loc 1 3889 0
 3440              		.cfi_startproc
 3441              		@ args = 0, pretend = 0, frame = 0
 3442              		@ frame_needed = 0, uses_anonymous_args = 0
 3443              	.LVL348:
 3444 0000 70B5     		push	{r4, r5, r6, lr}
 3445              		.cfi_def_cfa_offset 16
 3446              		.cfi_offset 4, -16
 3447              		.cfi_offset 5, -12
 3448              		.cfi_offset 6, -8
 3449              		.cfi_offset 14, -4
 3450 0002 041E     		subs	r4, r0, #0
 3451              	.LVL349:
3893:..\FreeRTOS/tasks.c **** 		{
 3452              		.loc 1 3893 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 158


 3453 0004 22D0     		beq	.L292
3901:..\FreeRTOS/tasks.c **** 
 3454              		.loc 1 3901 0
 3455 0006 836C     		ldr	r3, [r0, #72]
 3456 0008 013B     		subs	r3, r3, #1
 3457 000a 8364     		str	r3, [r0, #72]
3905:..\FreeRTOS/tasks.c **** 			{
 3458              		.loc 1 3905 0
 3459 000c C26A     		ldr	r2, [r0, #44]
 3460 000e 416C     		ldr	r1, [r0, #68]
 3461 0010 8A42     		cmp	r2, r1
 3462 0012 1DD0     		beq	.L293
3908:..\FreeRTOS/tasks.c **** 				{
 3463              		.loc 1 3908 0
 3464 0014 002B     		cmp	r3, #0
 3465 0016 1DD1     		bne	.L294
3915:..\FreeRTOS/tasks.c **** 					{
 3466              		.loc 1 3915 0
 3467 0018 051D     		adds	r5, r0, #4
 3468 001a 2800     		movs	r0, r5
 3469              	.LVL350:
 3470 001c FFF7FEFF 		bl	uxListRemove
 3471              	.LVL351:
3927:..\FreeRTOS/tasks.c **** 
 3472              		.loc 1 3927 0
 3473 0020 636C     		ldr	r3, [r4, #68]
 3474 0022 E362     		str	r3, [r4, #44]
3932:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3475              		.loc 1 3932 0
 3476 0024 0522     		movs	r2, #5
 3477 0026 D21A     		subs	r2, r2, r3
 3478 0028 A261     		str	r2, [r4, #24]
3933:..\FreeRTOS/tasks.c **** 
 3479              		.loc 1 3933 0
 3480 002a 0B4A     		ldr	r2, .L295
 3481 002c 526E     		ldr	r2, [r2, #100]
 3482 002e 9342     		cmp	r3, r2
 3483 0030 01D9     		bls	.L291
3933:..\FreeRTOS/tasks.c **** 
 3484              		.loc 1 3933 0 is_stmt 0 discriminator 1
 3485 0032 094A     		ldr	r2, .L295
 3486 0034 5366     		str	r3, [r2, #100]
 3487              	.L291:
3933:..\FreeRTOS/tasks.c **** 
 3488              		.loc 1 3933 0 discriminator 3
 3489 0036 9A00     		lsls	r2, r3, #2
 3490 0038 D318     		adds	r3, r2, r3
 3491 003a 9A00     		lsls	r2, r3, #2
 3492 003c 0748     		ldr	r0, .L295+4
 3493 003e 3030     		adds	r0, r0, #48
 3494 0040 8018     		adds	r0, r0, r2
 3495 0042 2900     		movs	r1, r5
 3496 0044 FFF7FEFF 		bl	vListInsertEnd
 3497              	.LVL352:
3943:..\FreeRTOS/tasks.c **** 				}
 3498              		.loc 1 3943 0 is_stmt 1 discriminator 3
 3499 0048 0120     		movs	r0, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 159


 3500 004a 04E0     		b	.L290
 3501              	.LVL353:
 3502              	.L292:
3891:..\FreeRTOS/tasks.c **** 
 3503              		.loc 1 3891 0
 3504 004c 0020     		movs	r0, #0
 3505              	.LVL354:
 3506 004e 02E0     		b	.L290
 3507              	.LVL355:
 3508              	.L293:
 3509 0050 0020     		movs	r0, #0
 3510              	.LVL356:
 3511 0052 00E0     		b	.L290
 3512              	.LVL357:
 3513              	.L294:
 3514 0054 0020     		movs	r0, #0
 3515              	.LVL358:
 3516              	.L290:
3961:..\FreeRTOS/tasks.c **** 
 3517              		.loc 1 3961 0
 3518              		@ sp needed
 3519              	.LVL359:
 3520 0056 70BD     		pop	{r4, r5, r6, pc}
 3521              	.L296:
 3522              		.align	2
 3523              	.L295:
 3524 0058 80000000 		.word	.LANCHOR1
 3525 005c 00000000 		.word	.LANCHOR0
 3526              		.cfi_endproc
 3527              	.LFE76:
 3528              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3529              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3530              		.align	2
 3531              		.global	vTaskPriorityDisinheritAfterTimeout
 3532              		.code	16
 3533              		.thumb_func
 3534              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3535              	vTaskPriorityDisinheritAfterTimeout:
 3536              	.LFB77:
3969:..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3537              		.loc 1 3969 0
 3538              		.cfi_startproc
 3539              		@ args = 0, pretend = 0, frame = 0
 3540              		@ frame_needed = 0, uses_anonymous_args = 0
 3541              	.LVL360:
 3542 0000 70B5     		push	{r4, r5, r6, lr}
 3543              		.cfi_def_cfa_offset 16
 3544              		.cfi_offset 4, -16
 3545              		.cfi_offset 5, -12
 3546              		.cfi_offset 6, -8
 3547              		.cfi_offset 14, -4
 3548 0002 041E     		subs	r4, r0, #0
 3549              	.LVL361:
3974:..\FreeRTOS/tasks.c **** 		{
 3550              		.loc 1 3974 0
 3551 0004 32D0     		beq	.L297
3984:..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 160


 3552              		.loc 1 3984 0
 3553 0006 436C     		ldr	r3, [r0, #68]
 3554 0008 8B42     		cmp	r3, r1
 3555 000a 00D2     		bcs	.L299
3986:..\FreeRTOS/tasks.c **** 			}
 3556              		.loc 1 3986 0
 3557 000c 0B00     		movs	r3, r1
 3558              	.L299:
 3559              	.LVL362:
3994:..\FreeRTOS/tasks.c **** 			{
 3560              		.loc 1 3994 0
 3561 000e E26A     		ldr	r2, [r4, #44]
 3562 0010 9342     		cmp	r3, r2
 3563 0012 2BD0     		beq	.L297
4000:..\FreeRTOS/tasks.c **** 				{
 3564              		.loc 1 4000 0
 3565 0014 A16C     		ldr	r1, [r4, #72]
 3566              	.LVL363:
 3567 0016 0129     		cmp	r1, #1
 3568 0018 28D1     		bne	.L297
 3569              	.LVL364:
4012:..\FreeRTOS/tasks.c **** 
 3570              		.loc 1 4012 0
 3571 001a E362     		str	r3, [r4, #44]
4016:..\FreeRTOS/tasks.c **** 					{
 3572              		.loc 1 4016 0
 3573 001c A169     		ldr	r1, [r4, #24]
 3574 001e 0029     		cmp	r1, #0
 3575 0020 02DB     		blt	.L300
4018:..\FreeRTOS/tasks.c **** 					}
 3576              		.loc 1 4018 0
 3577 0022 0521     		movs	r1, #5
 3578 0024 CB1A     		subs	r3, r1, r3
 3579              	.LVL365:
 3580 0026 A361     		str	r3, [r4, #24]
 3581              	.L300:
4031:..\FreeRTOS/tasks.c **** 					{
 3582              		.loc 1 4031 0
 3583 0028 9300     		lsls	r3, r2, #2
 3584 002a 9A18     		adds	r2, r3, r2
 3585              	.LVL366:
 3586 002c 9300     		lsls	r3, r2, #2
 3587 002e 104A     		ldr	r2, .L304
 3588 0030 3032     		adds	r2, r2, #48
 3589 0032 D318     		adds	r3, r2, r3
 3590 0034 6269     		ldr	r2, [r4, #20]
 3591 0036 9A42     		cmp	r2, r3
 3592 0038 01D1     		bne	.L303
 3593 003a 0123     		movs	r3, #1
 3594 003c 00E0     		b	.L301
 3595              	.L303:
 3596 003e 0023     		movs	r3, #0
 3597              	.L301:
4031:..\FreeRTOS/tasks.c **** 					{
 3598              		.loc 1 4031 0 is_stmt 0 discriminator 4
 3599 0040 002B     		cmp	r3, #0
 3600 0042 13D0     		beq	.L297
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 161


4033:..\FreeRTOS/tasks.c **** 						{
 3601              		.loc 1 4033 0 is_stmt 1
 3602 0044 251D     		adds	r5, r4, #4
 3603 0046 2800     		movs	r0, r5
 3604              	.LVL367:
 3605 0048 FFF7FEFF 		bl	uxListRemove
 3606              	.LVL368:
4042:..\FreeRTOS/tasks.c **** 					}
 3607              		.loc 1 4042 0
 3608 004c E36A     		ldr	r3, [r4, #44]
 3609 004e 094A     		ldr	r2, .L304+4
 3610 0050 526E     		ldr	r2, [r2, #100]
 3611 0052 9342     		cmp	r3, r2
 3612 0054 01D9     		bls	.L302
4042:..\FreeRTOS/tasks.c **** 					}
 3613              		.loc 1 4042 0 is_stmt 0 discriminator 1
 3614 0056 074A     		ldr	r2, .L304+4
 3615 0058 5366     		str	r3, [r2, #100]
 3616              	.L302:
4042:..\FreeRTOS/tasks.c **** 					}
 3617              		.loc 1 4042 0 discriminator 3
 3618 005a 9A00     		lsls	r2, r3, #2
 3619 005c D318     		adds	r3, r2, r3
 3620 005e 9A00     		lsls	r2, r3, #2
 3621 0060 0348     		ldr	r0, .L304
 3622 0062 3030     		adds	r0, r0, #48
 3623 0064 8018     		adds	r0, r0, r2
 3624 0066 2900     		movs	r1, r5
 3625 0068 FFF7FEFF 		bl	vListInsertEnd
 3626              	.LVL369:
 3627              	.L297:
4063:..\FreeRTOS/tasks.c **** 
 3628              		.loc 1 4063 0 is_stmt 1
 3629              		@ sp needed
 3630              	.LVL370:
 3631 006c 70BD     		pop	{r4, r5, r6, pc}
 3632              	.L305:
 3633 006e C046     		.align	2
 3634              	.L304:
 3635 0070 00000000 		.word	.LANCHOR0
 3636 0074 80000000 		.word	.LANCHOR1
 3637              		.cfi_endproc
 3638              	.LFE77:
 3639              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3640              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3641              		.align	2
 3642              		.global	uxTaskResetEventItemValue
 3643              		.code	16
 3644              		.thumb_func
 3645              		.type	uxTaskResetEventItemValue, %function
 3646              	uxTaskResetEventItemValue:
 3647              	.LFB78:
4380:..\FreeRTOS/tasks.c **** TickType_t uxReturn;
 3648              		.loc 1 4380 0
 3649              		.cfi_startproc
 3650              		@ args = 0, pretend = 0, frame = 0
 3651              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 162


 3652              		@ link register save eliminated.
4383:..\FreeRTOS/tasks.c **** 
 3653              		.loc 1 4383 0
 3654 0000 044B     		ldr	r3, .L307
 3655 0002 9A6D     		ldr	r2, [r3, #88]
 3656 0004 9069     		ldr	r0, [r2, #24]
 3657              	.LVL371:
4387:..\FreeRTOS/tasks.c **** 
 3658              		.loc 1 4387 0
 3659 0006 9A6D     		ldr	r2, [r3, #88]
 3660 0008 9B6D     		ldr	r3, [r3, #88]
 3661 000a D96A     		ldr	r1, [r3, #44]
 3662 000c 0523     		movs	r3, #5
 3663 000e 5B1A     		subs	r3, r3, r1
 3664 0010 9361     		str	r3, [r2, #24]
4390:..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3665              		.loc 1 4390 0
 3666              		@ sp needed
 3667 0012 7047     		bx	lr
 3668              	.L308:
 3669              		.align	2
 3670              	.L307:
 3671 0014 80000000 		.word	.LANCHOR1
 3672              		.cfi_endproc
 3673              	.LFE78:
 3674              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3675              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3676              		.align	2
 3677              		.global	pvTaskIncrementMutexHeldCount
 3678              		.code	16
 3679              		.thumb_func
 3680              		.type	pvTaskIncrementMutexHeldCount, %function
 3681              	pvTaskIncrementMutexHeldCount:
 3682              	.LFB79:
4396:..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3683              		.loc 1 4396 0
 3684              		.cfi_startproc
 3685              		@ args = 0, pretend = 0, frame = 0
 3686              		@ frame_needed = 0, uses_anonymous_args = 0
 3687              		@ link register save eliminated.
4399:..\FreeRTOS/tasks.c **** 		{
 3688              		.loc 1 4399 0
 3689 0000 054B     		ldr	r3, .L311
 3690 0002 9B6D     		ldr	r3, [r3, #88]
 3691 0004 002B     		cmp	r3, #0
 3692 0006 04D0     		beq	.L310
4401:..\FreeRTOS/tasks.c **** 		}
 3693              		.loc 1 4401 0
 3694 0008 034B     		ldr	r3, .L311
 3695 000a 9A6D     		ldr	r2, [r3, #88]
 3696 000c 936C     		ldr	r3, [r2, #72]
 3697 000e 0133     		adds	r3, r3, #1
 3698 0010 9364     		str	r3, [r2, #72]
 3699              	.L310:
4404:..\FreeRTOS/tasks.c **** 	}
 3700              		.loc 1 4404 0
 3701 0012 014B     		ldr	r3, .L311
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 163


 3702 0014 986D     		ldr	r0, [r3, #88]
4405:..\FreeRTOS/tasks.c **** 
 3703              		.loc 1 4405 0
 3704              		@ sp needed
 3705 0016 7047     		bx	lr
 3706              	.L312:
 3707              		.align	2
 3708              	.L311:
 3709 0018 80000000 		.word	.LANCHOR1
 3710              		.cfi_endproc
 3711              	.LFE79:
 3712              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3713              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3714              		.align	2
 3715              		.global	ulTaskNotifyTake
 3716              		.code	16
 3717              		.thumb_func
 3718              		.type	ulTaskNotifyTake, %function
 3719              	ulTaskNotifyTake:
 3720              	.LFB80:
4413:..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
 3721              		.loc 1 4413 0
 3722              		.cfi_startproc
 3723              		@ args = 0, pretend = 0, frame = 0
 3724              		@ frame_needed = 0, uses_anonymous_args = 0
 3725              	.LVL372:
 3726 0000 70B5     		push	{r4, r5, r6, lr}
 3727              		.cfi_def_cfa_offset 16
 3728              		.cfi_offset 4, -16
 3729              		.cfi_offset 5, -12
 3730              		.cfi_offset 6, -8
 3731              		.cfi_offset 14, -4
 3732 0002 0500     		movs	r5, r0
 3733 0004 0C00     		movs	r4, r1
4416:..\FreeRTOS/tasks.c **** 		{
 3734              		.loc 1 4416 0
 3735 0006 FFF7FEFF 		bl	vPortEnterCritical
 3736              	.LVL373:
4419:..\FreeRTOS/tasks.c **** 			{
 3737              		.loc 1 4419 0
 3738 000a 174B     		ldr	r3, .L317
 3739 000c 9B6D     		ldr	r3, [r3, #88]
 3740 000e 1B6E     		ldr	r3, [r3, #96]
 3741 0010 002B     		cmp	r3, #0
 3742 0012 0BD1     		bne	.L314
4422:..\FreeRTOS/tasks.c **** 
 3743              		.loc 1 4422 0
 3744 0014 144B     		ldr	r3, .L317
 3745 0016 9A6D     		ldr	r2, [r3, #88]
 3746 0018 0121     		movs	r1, #1
 3747 001a 6423     		movs	r3, #100
 3748 001c D154     		strb	r1, [r2, r3]
4424:..\FreeRTOS/tasks.c **** 				{
 3749              		.loc 1 4424 0
 3750 001e 002C     		cmp	r4, #0
 3751 0020 04D0     		beq	.L314
4426:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 164


 3752              		.loc 1 4426 0
 3753 0022 2000     		movs	r0, r4
 3754 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3755              	.LVL374:
4433:..\FreeRTOS/tasks.c **** 				}
 3756              		.loc 1 4433 0
 3757 0028 FFF7FEFF 		bl	vPortYield
 3758              	.LVL375:
 3759              	.L314:
4445:..\FreeRTOS/tasks.c **** 
 3760              		.loc 1 4445 0
 3761 002c FFF7FEFF 		bl	vPortExitCritical
 3762              	.LVL376:
4447:..\FreeRTOS/tasks.c **** 		{
 3763              		.loc 1 4447 0
 3764 0030 FFF7FEFF 		bl	vPortEnterCritical
 3765              	.LVL377:
4450:..\FreeRTOS/tasks.c **** 
 3766              		.loc 1 4450 0
 3767 0034 0C4B     		ldr	r3, .L317
 3768 0036 9B6D     		ldr	r3, [r3, #88]
 3769 0038 1C6E     		ldr	r4, [r3, #96]
 3770              	.LVL378:
4452:..\FreeRTOS/tasks.c **** 			{
 3771              		.loc 1 4452 0
 3772 003a 002C     		cmp	r4, #0
 3773 003c 0AD0     		beq	.L315
4454:..\FreeRTOS/tasks.c **** 				{
 3774              		.loc 1 4454 0
 3775 003e 002D     		cmp	r5, #0
 3776 0040 04D0     		beq	.L316
4456:..\FreeRTOS/tasks.c **** 				}
 3777              		.loc 1 4456 0
 3778 0042 094B     		ldr	r3, .L317
 3779 0044 9B6D     		ldr	r3, [r3, #88]
 3780 0046 0022     		movs	r2, #0
 3781 0048 1A66     		str	r2, [r3, #96]
 3782 004a 03E0     		b	.L315
 3783              	.L316:
4460:..\FreeRTOS/tasks.c **** 				}
 3784              		.loc 1 4460 0
 3785 004c 064B     		ldr	r3, .L317
 3786 004e 9B6D     		ldr	r3, [r3, #88]
 3787 0050 621E     		subs	r2, r4, #1
 3788 0052 1A66     		str	r2, [r3, #96]
 3789              	.L315:
4468:..\FreeRTOS/tasks.c **** 		}
 3790              		.loc 1 4468 0
 3791 0054 044B     		ldr	r3, .L317
 3792 0056 9A6D     		ldr	r2, [r3, #88]
 3793 0058 0021     		movs	r1, #0
 3794 005a 6423     		movs	r3, #100
 3795 005c D154     		strb	r1, [r2, r3]
4470:..\FreeRTOS/tasks.c **** 
 3796              		.loc 1 4470 0
 3797 005e FFF7FEFF 		bl	vPortExitCritical
 3798              	.LVL379:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 165


4473:..\FreeRTOS/tasks.c **** 
 3799              		.loc 1 4473 0
 3800 0062 2000     		movs	r0, r4
 3801              		@ sp needed
 3802              	.LVL380:
 3803              	.LVL381:
 3804 0064 70BD     		pop	{r4, r5, r6, pc}
 3805              	.L318:
 3806 0066 C046     		.align	2
 3807              	.L317:
 3808 0068 80000000 		.word	.LANCHOR1
 3809              		.cfi_endproc
 3810              	.LFE80:
 3811              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3812              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3813              		.align	2
 3814              		.global	xTaskNotifyWait
 3815              		.code	16
 3816              		.thumb_func
 3817              		.type	xTaskNotifyWait, %function
 3818              	xTaskNotifyWait:
 3819              	.LFB81:
4481:..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 3820              		.loc 1 4481 0
 3821              		.cfi_startproc
 3822              		@ args = 0, pretend = 0, frame = 0
 3823              		@ frame_needed = 0, uses_anonymous_args = 0
 3824              	.LVL382:
 3825 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3826              		.cfi_def_cfa_offset 24
 3827              		.cfi_offset 3, -24
 3828              		.cfi_offset 4, -20
 3829              		.cfi_offset 5, -16
 3830              		.cfi_offset 6, -12
 3831              		.cfi_offset 7, -8
 3832              		.cfi_offset 14, -4
 3833 0002 0600     		movs	r6, r0
 3834 0004 0D00     		movs	r5, r1
 3835 0006 1700     		movs	r7, r2
 3836 0008 1C00     		movs	r4, r3
4484:..\FreeRTOS/tasks.c **** 		{
 3837              		.loc 1 4484 0
 3838 000a FFF7FEFF 		bl	vPortEnterCritical
 3839              	.LVL383:
4487:..\FreeRTOS/tasks.c **** 			{
 3840              		.loc 1 4487 0
 3841 000e 1B4B     		ldr	r3, .L324
 3842 0010 9A6D     		ldr	r2, [r3, #88]
 3843 0012 6423     		movs	r3, #100
 3844 0014 D35C     		ldrb	r3, [r2, r3]
 3845 0016 022B     		cmp	r3, #2
 3846 0018 0FD0     		beq	.L320
4492:..\FreeRTOS/tasks.c **** 
 3847              		.loc 1 4492 0
 3848 001a 184A     		ldr	r2, .L324
 3849 001c 916D     		ldr	r1, [r2, #88]
 3850 001e 0B6E     		ldr	r3, [r1, #96]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 166


 3851 0020 B343     		bics	r3, r6
 3852 0022 0B66     		str	r3, [r1, #96]
4495:..\FreeRTOS/tasks.c **** 
 3853              		.loc 1 4495 0
 3854 0024 926D     		ldr	r2, [r2, #88]
 3855 0026 0121     		movs	r1, #1
 3856 0028 6423     		movs	r3, #100
 3857 002a D154     		strb	r1, [r2, r3]
4497:..\FreeRTOS/tasks.c **** 				{
 3858              		.loc 1 4497 0
 3859 002c 002C     		cmp	r4, #0
 3860 002e 04D0     		beq	.L320
4499:..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3861              		.loc 1 4499 0
 3862 0030 2000     		movs	r0, r4
 3863 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3864              	.LVL384:
4506:..\FreeRTOS/tasks.c **** 				}
 3865              		.loc 1 4506 0
 3866 0036 FFF7FEFF 		bl	vPortYield
 3867              	.LVL385:
 3868              	.L320:
4518:..\FreeRTOS/tasks.c **** 
 3869              		.loc 1 4518 0
 3870 003a FFF7FEFF 		bl	vPortExitCritical
 3871              	.LVL386:
4520:..\FreeRTOS/tasks.c **** 		{
 3872              		.loc 1 4520 0
 3873 003e FFF7FEFF 		bl	vPortEnterCritical
 3874              	.LVL387:
4524:..\FreeRTOS/tasks.c **** 			{
 3875              		.loc 1 4524 0
 3876 0042 002F     		cmp	r7, #0
 3877 0044 03D0     		beq	.L321
4528:..\FreeRTOS/tasks.c **** 			}
 3878              		.loc 1 4528 0
 3879 0046 0D4B     		ldr	r3, .L324
 3880 0048 9B6D     		ldr	r3, [r3, #88]
 3881 004a 1B6E     		ldr	r3, [r3, #96]
 3882 004c 3B60     		str	r3, [r7]
 3883              	.L321:
4535:..\FreeRTOS/tasks.c **** 			{
 3884              		.loc 1 4535 0
 3885 004e 0B4B     		ldr	r3, .L324
 3886 0050 9A6D     		ldr	r2, [r3, #88]
 3887 0052 6423     		movs	r3, #100
 3888 0054 D35C     		ldrb	r3, [r2, r3]
 3889 0056 022B     		cmp	r3, #2
 3890 0058 06D1     		bne	.L323
4544:..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 3891              		.loc 1 4544 0
 3892 005a 084B     		ldr	r3, .L324
 3893 005c 9A6D     		ldr	r2, [r3, #88]
 3894 005e 136E     		ldr	r3, [r2, #96]
 3895 0060 AB43     		bics	r3, r5
 3896 0062 1366     		str	r3, [r2, #96]
 3897              	.LVL388:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 167


4545:..\FreeRTOS/tasks.c **** 			}
 3898              		.loc 1 4545 0
 3899 0064 0124     		movs	r4, #1
 3900              	.LVL389:
 3901 0066 00E0     		b	.L322
 3902              	.LVL390:
 3903              	.L323:
4538:..\FreeRTOS/tasks.c **** 			}
 3904              		.loc 1 4538 0
 3905 0068 0024     		movs	r4, #0
 3906              	.LVL391:
 3907              	.L322:
4548:..\FreeRTOS/tasks.c **** 		}
 3908              		.loc 1 4548 0
 3909 006a 044B     		ldr	r3, .L324
 3910 006c 9A6D     		ldr	r2, [r3, #88]
 3911 006e 0021     		movs	r1, #0
 3912 0070 6423     		movs	r3, #100
 3913 0072 D154     		strb	r1, [r2, r3]
4550:..\FreeRTOS/tasks.c **** 
 3914              		.loc 1 4550 0
 3915 0074 FFF7FEFF 		bl	vPortExitCritical
 3916              	.LVL392:
4553:..\FreeRTOS/tasks.c **** 
 3917              		.loc 1 4553 0
 3918 0078 2000     		movs	r0, r4
 3919              		@ sp needed
 3920              	.LVL393:
 3921              	.LVL394:
 3922              	.LVL395:
 3923              	.LVL396:
 3924 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3925              	.L325:
 3926              		.align	2
 3927              	.L324:
 3928 007c 80000000 		.word	.LANCHOR1
 3929              		.cfi_endproc
 3930              	.LFE81:
 3931              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3932              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3933              		.align	2
 3934              		.global	xTaskGenericNotify
 3935              		.code	16
 3936              		.thumb_func
 3937              		.type	xTaskGenericNotify, %function
 3938              	xTaskGenericNotify:
 3939              	.LFB82:
4561:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 3940              		.loc 1 4561 0
 3941              		.cfi_startproc
 3942              		@ args = 0, pretend = 0, frame = 0
 3943              		@ frame_needed = 0, uses_anonymous_args = 0
 3944              	.LVL397:
 3945 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3946              		.cfi_def_cfa_offset 24
 3947              		.cfi_offset 3, -24
 3948              		.cfi_offset 4, -20
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 168


 3949              		.cfi_offset 5, -16
 3950              		.cfi_offset 6, -12
 3951              		.cfi_offset 7, -8
 3952              		.cfi_offset 14, -4
 3953 0002 0400     		movs	r4, r0
 3954 0004 0D00     		movs	r5, r1
 3955 0006 1600     		movs	r6, r2
 3956 0008 1F00     		movs	r7, r3
 3957              	.LVL398:
4569:..\FreeRTOS/tasks.c **** 		{
 3958              		.loc 1 4569 0
 3959 000a FFF7FEFF 		bl	vPortEnterCritical
 3960              	.LVL399:
4571:..\FreeRTOS/tasks.c **** 			{
 3961              		.loc 1 4571 0
 3962 000e 002F     		cmp	r7, #0
 3963 0010 01D0     		beq	.L327
4573:..\FreeRTOS/tasks.c **** 			}
 3964              		.loc 1 4573 0
 3965 0012 236E     		ldr	r3, [r4, #96]
 3966 0014 3B60     		str	r3, [r7]
 3967              	.L327:
4576:..\FreeRTOS/tasks.c **** 
 3968              		.loc 1 4576 0
 3969 0016 6422     		movs	r2, #100
 3970 0018 A35C     		ldrb	r3, [r4, r2]
 3971 001a DBB2     		uxtb	r3, r3
 3972              	.LVL400:
4578:..\FreeRTOS/tasks.c **** 
 3973              		.loc 1 4578 0
 3974 001c 0221     		movs	r1, #2
 3975 001e A154     		strb	r1, [r4, r2]
4580:..\FreeRTOS/tasks.c **** 			{
 3976              		.loc 1 4580 0
 3977 0020 022E     		cmp	r6, #2
 3978 0022 0DD0     		beq	.L329
 3979 0024 02D8     		bhi	.L330
 3980 0026 012E     		cmp	r6, #1
 3981 0028 05D0     		beq	.L331
 3982 002a 16E0     		b	.L336
 3983              	.L330:
 3984 002c 032E     		cmp	r6, #3
 3985 002e 0CD0     		beq	.L332
 3986 0030 042E     		cmp	r6, #4
 3987 0032 0DD0     		beq	.L333
 3988 0034 11E0     		b	.L336
 3989              	.L331:
4583:..\FreeRTOS/tasks.c **** 					break;
 3990              		.loc 1 4583 0
 3991 0036 226E     		ldr	r2, [r4, #96]
 3992 0038 1543     		orrs	r5, r2
 3993              	.LVL401:
 3994 003a 2566     		str	r5, [r4, #96]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3995              		.loc 1 4563 0
 3996 003c 0125     		movs	r5, #1
4584:..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 169


 3997              		.loc 1 4584 0
 3998 003e 0FE0     		b	.L328
 3999              	.LVL402:
 4000              	.L329:
4587:..\FreeRTOS/tasks.c **** 					break;
 4001              		.loc 1 4587 0
 4002 0040 226E     		ldr	r2, [r4, #96]
 4003 0042 0132     		adds	r2, r2, #1
 4004 0044 2266     		str	r2, [r4, #96]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4005              		.loc 1 4563 0
 4006 0046 0125     		movs	r5, #1
 4007              	.LVL403:
4588:..\FreeRTOS/tasks.c **** 
 4008              		.loc 1 4588 0
 4009 0048 0AE0     		b	.L328
 4010              	.LVL404:
 4011              	.L332:
4591:..\FreeRTOS/tasks.c **** 					break;
 4012              		.loc 1 4591 0
 4013 004a 2566     		str	r5, [r4, #96]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4014              		.loc 1 4563 0
 4015 004c 0125     		movs	r5, #1
 4016              	.LVL405:
4592:..\FreeRTOS/tasks.c **** 
 4017              		.loc 1 4592 0
 4018 004e 07E0     		b	.L328
 4019              	.LVL406:
 4020              	.L333:
4595:..\FreeRTOS/tasks.c **** 					{
 4021              		.loc 1 4595 0
 4022 0050 022B     		cmp	r3, #2
 4023 0052 04D0     		beq	.L337
4597:..\FreeRTOS/tasks.c **** 					}
 4024              		.loc 1 4597 0
 4025 0054 2566     		str	r5, [r4, #96]
4563:..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4026              		.loc 1 4563 0
 4027 0056 0125     		movs	r5, #1
 4028              	.LVL407:
 4029 0058 02E0     		b	.L328
 4030              	.LVL408:
 4031              	.L336:
 4032 005a 0125     		movs	r5, #1
 4033              	.LVL409:
 4034 005c 00E0     		b	.L328
 4035              	.LVL410:
 4036              	.L337:
4602:..\FreeRTOS/tasks.c **** 					}
 4037              		.loc 1 4602 0
 4038 005e 0025     		movs	r5, #0
 4039              	.LVL411:
 4040              	.L328:
4616:..\FreeRTOS/tasks.c **** 			{
 4041              		.loc 1 4616 0
 4042 0060 012B     		cmp	r3, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 170


 4043 0062 1BD1     		bne	.L334
4618:..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4044              		.loc 1 4618 0
 4045 0064 261D     		adds	r6, r4, #4
 4046 0066 3000     		movs	r0, r6
 4047 0068 FFF7FEFF 		bl	uxListRemove
 4048              	.LVL412:
4619:..\FreeRTOS/tasks.c **** 
 4049              		.loc 1 4619 0
 4050 006c E36A     		ldr	r3, [r4, #44]
 4051 006e 0D4A     		ldr	r2, .L338
 4052 0070 526E     		ldr	r2, [r2, #100]
 4053 0072 9342     		cmp	r3, r2
 4054 0074 01D9     		bls	.L335
4619:..\FreeRTOS/tasks.c **** 
 4055              		.loc 1 4619 0 is_stmt 0 discriminator 1
 4056 0076 0B4A     		ldr	r2, .L338
 4057 0078 5366     		str	r3, [r2, #100]
 4058              	.L335:
4619:..\FreeRTOS/tasks.c **** 
 4059              		.loc 1 4619 0 discriminator 3
 4060 007a 9A00     		lsls	r2, r3, #2
 4061 007c D318     		adds	r3, r2, r3
 4062 007e 9A00     		lsls	r2, r3, #2
 4063 0080 0948     		ldr	r0, .L338+4
 4064 0082 3030     		adds	r0, r0, #48
 4065 0084 8018     		adds	r0, r0, r2
 4066 0086 3100     		movs	r1, r6
 4067 0088 FFF7FEFF 		bl	vListInsertEnd
 4068              	.LVL413:
4640:..\FreeRTOS/tasks.c **** 				{
 4069              		.loc 1 4640 0 is_stmt 1 discriminator 3
 4070 008c E26A     		ldr	r2, [r4, #44]
 4071 008e 054B     		ldr	r3, .L338
 4072 0090 9B6D     		ldr	r3, [r3, #88]
 4073 0092 DB6A     		ldr	r3, [r3, #44]
 4074 0094 9A42     		cmp	r2, r3
 4075 0096 01D9     		bls	.L334
4644:..\FreeRTOS/tasks.c **** 				}
 4076              		.loc 1 4644 0
 4077 0098 FFF7FEFF 		bl	vPortYield
 4078              	.LVL414:
 4079              	.L334:
4656:..\FreeRTOS/tasks.c **** 
 4080              		.loc 1 4656 0
 4081 009c FFF7FEFF 		bl	vPortExitCritical
 4082              	.LVL415:
4659:..\FreeRTOS/tasks.c **** 
 4083              		.loc 1 4659 0
 4084 00a0 2800     		movs	r0, r5
 4085              		@ sp needed
 4086              	.LVL416:
 4087              	.LVL417:
 4088              	.LVL418:
 4089 00a2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4090              	.L339:
 4091              		.align	2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 171


 4092              	.L338:
 4093 00a4 80000000 		.word	.LANCHOR1
 4094 00a8 00000000 		.word	.LANCHOR0
 4095              		.cfi_endproc
 4096              	.LFE82:
 4097              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4098              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4099              		.align	2
 4100              		.global	xTaskGenericNotifyFromISR
 4101              		.code	16
 4102              		.thumb_func
 4103              		.type	xTaskGenericNotifyFromISR, %function
 4104              	xTaskGenericNotifyFromISR:
 4105              	.LFB83:
4667:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4106              		.loc 1 4667 0
 4107              		.cfi_startproc
 4108              		@ args = 4, pretend = 0, frame = 8
 4109              		@ frame_needed = 0, uses_anonymous_args = 0
 4110              	.LVL419:
 4111 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4112              		.cfi_def_cfa_offset 20
 4113              		.cfi_offset 4, -20
 4114              		.cfi_offset 5, -16
 4115              		.cfi_offset 6, -12
 4116              		.cfi_offset 7, -8
 4117              		.cfi_offset 14, -4
 4118 0002 83B0     		sub	sp, sp, #12
 4119              		.cfi_def_cfa_offset 32
 4120 0004 0400     		movs	r4, r0
 4121 0006 0E00     		movs	r6, r1
 4122 0008 1700     		movs	r7, r2
 4123 000a 1D00     		movs	r5, r3
 4124              	.LVL420:
4695:..\FreeRTOS/tasks.c **** 		{
 4125              		.loc 1 4695 0
 4126 000c FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4127              	.LVL421:
 4128 0010 0190     		str	r0, [sp, #4]
 4129              	.LVL422:
4697:..\FreeRTOS/tasks.c **** 			{
 4130              		.loc 1 4697 0
 4131 0012 002D     		cmp	r5, #0
 4132 0014 01D0     		beq	.L341
4699:..\FreeRTOS/tasks.c **** 			}
 4133              		.loc 1 4699 0
 4134 0016 236E     		ldr	r3, [r4, #96]
 4135 0018 2B60     		str	r3, [r5]
 4136              	.L341:
4702:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4137              		.loc 1 4702 0
 4138 001a 6422     		movs	r2, #100
 4139 001c A35C     		ldrb	r3, [r4, r2]
 4140 001e DBB2     		uxtb	r3, r3
 4141              	.LVL423:
4703:..\FreeRTOS/tasks.c **** 
 4142              		.loc 1 4703 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 172


 4143 0020 0221     		movs	r1, #2
 4144 0022 A154     		strb	r1, [r4, r2]
4705:..\FreeRTOS/tasks.c **** 			{
 4145              		.loc 1 4705 0
 4146 0024 022F     		cmp	r7, #2
 4147 0026 0DD0     		beq	.L343
 4148 0028 02D8     		bhi	.L344
 4149 002a 012F     		cmp	r7, #1
 4150 002c 05D0     		beq	.L345
 4151 002e 16E0     		b	.L353
 4152              	.L344:
 4153 0030 032F     		cmp	r7, #3
 4154 0032 0CD0     		beq	.L346
 4155 0034 042F     		cmp	r7, #4
 4156 0036 0DD0     		beq	.L347
 4157 0038 11E0     		b	.L353
 4158              	.L345:
4708:..\FreeRTOS/tasks.c **** 					break;
 4159              		.loc 1 4708 0
 4160 003a 226E     		ldr	r2, [r4, #96]
 4161 003c 1643     		orrs	r6, r2
 4162              	.LVL424:
 4163 003e 2666     		str	r6, [r4, #96]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4164              		.loc 1 4670 0
 4165 0040 0126     		movs	r6, #1
4709:..\FreeRTOS/tasks.c **** 
 4166              		.loc 1 4709 0
 4167 0042 0FE0     		b	.L342
 4168              	.LVL425:
 4169              	.L343:
4712:..\FreeRTOS/tasks.c **** 					break;
 4170              		.loc 1 4712 0
 4171 0044 226E     		ldr	r2, [r4, #96]
 4172 0046 0132     		adds	r2, r2, #1
 4173 0048 2266     		str	r2, [r4, #96]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4174              		.loc 1 4670 0
 4175 004a 0126     		movs	r6, #1
 4176              	.LVL426:
4713:..\FreeRTOS/tasks.c **** 
 4177              		.loc 1 4713 0
 4178 004c 0AE0     		b	.L342
 4179              	.LVL427:
 4180              	.L346:
4716:..\FreeRTOS/tasks.c **** 					break;
 4181              		.loc 1 4716 0
 4182 004e 2666     		str	r6, [r4, #96]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4183              		.loc 1 4670 0
 4184 0050 0126     		movs	r6, #1
 4185              	.LVL428:
4717:..\FreeRTOS/tasks.c **** 
 4186              		.loc 1 4717 0
 4187 0052 07E0     		b	.L342
 4188              	.LVL429:
 4189              	.L347:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 173


4720:..\FreeRTOS/tasks.c **** 					{
 4190              		.loc 1 4720 0
 4191 0054 022B     		cmp	r3, #2
 4192 0056 04D0     		beq	.L354
4722:..\FreeRTOS/tasks.c **** 					}
 4193              		.loc 1 4722 0
 4194 0058 2666     		str	r6, [r4, #96]
4670:..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4195              		.loc 1 4670 0
 4196 005a 0126     		movs	r6, #1
 4197              	.LVL430:
 4198 005c 02E0     		b	.L342
 4199              	.LVL431:
 4200              	.L353:
 4201 005e 0126     		movs	r6, #1
 4202              	.LVL432:
 4203 0060 00E0     		b	.L342
 4204              	.LVL433:
 4205              	.L354:
4727:..\FreeRTOS/tasks.c **** 					}
 4206              		.loc 1 4727 0
 4207 0062 0026     		movs	r6, #0
 4208              	.LVL434:
 4209              	.L342:
4741:..\FreeRTOS/tasks.c **** 			{
 4210              		.loc 1 4741 0
 4211 0064 012B     		cmp	r3, #1
 4212 0066 2ED1     		bne	.L348
4746:..\FreeRTOS/tasks.c **** 				{
 4213              		.loc 1 4746 0
 4214 0068 1A4B     		ldr	r3, .L355
 4215              	.LVL435:
 4216 006a 1B6F     		ldr	r3, [r3, #112]
 4217 006c 002B     		cmp	r3, #0
 4218 006e 14D1     		bne	.L349
4748:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4219              		.loc 1 4748 0
 4220 0070 271D     		adds	r7, r4, #4
 4221 0072 3800     		movs	r0, r7
 4222              	.LVL436:
 4223 0074 FFF7FEFF 		bl	uxListRemove
 4224              	.LVL437:
4749:..\FreeRTOS/tasks.c **** 				}
 4225              		.loc 1 4749 0
 4226 0078 E36A     		ldr	r3, [r4, #44]
 4227 007a 164A     		ldr	r2, .L355
 4228 007c 526E     		ldr	r2, [r2, #100]
 4229 007e 9342     		cmp	r3, r2
 4230 0080 01D9     		bls	.L350
4749:..\FreeRTOS/tasks.c **** 				}
 4231              		.loc 1 4749 0 is_stmt 0 discriminator 1
 4232 0082 144A     		ldr	r2, .L355
 4233 0084 5366     		str	r3, [r2, #100]
 4234              	.L350:
4749:..\FreeRTOS/tasks.c **** 				}
 4235              		.loc 1 4749 0 discriminator 3
 4236 0086 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 174


 4237 0088 D318     		adds	r3, r2, r3
 4238 008a 9A00     		lsls	r2, r3, #2
 4239 008c 1248     		ldr	r0, .L355+4
 4240 008e 3030     		adds	r0, r0, #48
 4241 0090 8018     		adds	r0, r0, r2
 4242 0092 3900     		movs	r1, r7
 4243 0094 FFF7FEFF 		bl	vListInsertEnd
 4244              	.LVL438:
 4245 0098 05E0     		b	.L351
 4246              	.LVL439:
 4247              	.L349:
4755:..\FreeRTOS/tasks.c **** 				}
 4248              		.loc 1 4755 0 is_stmt 1
 4249 009a 2100     		movs	r1, r4
 4250 009c 1831     		adds	r1, r1, #24
 4251 009e 0E48     		ldr	r0, .L355+4
 4252              	.LVL440:
 4253 00a0 1430     		adds	r0, r0, #20
 4254 00a2 FFF7FEFF 		bl	vListInsertEnd
 4255              	.LVL441:
 4256              	.L351:
4758:..\FreeRTOS/tasks.c **** 				{
 4257              		.loc 1 4758 0
 4258 00a6 E26A     		ldr	r2, [r4, #44]
 4259 00a8 0A4B     		ldr	r3, .L355
 4260 00aa 9B6D     		ldr	r3, [r3, #88]
 4261 00ac DB6A     		ldr	r3, [r3, #44]
 4262 00ae 9A42     		cmp	r2, r3
 4263 00b0 09D9     		bls	.L348
4762:..\FreeRTOS/tasks.c **** 					{
 4264              		.loc 1 4762 0
 4265 00b2 089B     		ldr	r3, [sp, #32]
 4266 00b4 002B     		cmp	r3, #0
 4267 00b6 03D0     		beq	.L352
4764:..\FreeRTOS/tasks.c **** 					}
 4268              		.loc 1 4764 0
 4269 00b8 0123     		movs	r3, #1
 4270 00ba 089A     		ldr	r2, [sp, #32]
 4271 00bc 1360     		str	r3, [r2]
 4272 00be 02E0     		b	.L348
 4273              	.L352:
4771:..\FreeRTOS/tasks.c **** 					}
 4274              		.loc 1 4771 0
 4275 00c0 0122     		movs	r2, #1
 4276 00c2 064B     		ldr	r3, .L355+8
 4277 00c4 1A60     		str	r2, [r3]
 4278              	.L348:
4780:..\FreeRTOS/tasks.c **** 
 4279              		.loc 1 4780 0
 4280 00c6 0198     		ldr	r0, [sp, #4]
 4281 00c8 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4282              	.LVL442:
4783:..\FreeRTOS/tasks.c **** 
 4283              		.loc 1 4783 0
 4284 00cc 3000     		movs	r0, r6
 4285 00ce 03B0     		add	sp, sp, #12
 4286              		@ sp needed
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 175


 4287              	.LVL443:
 4288              	.LVL444:
 4289              	.LVL445:
 4290 00d0 F0BD     		pop	{r4, r5, r6, r7, pc}
 4291              	.L356:
 4292 00d2 C046     		.align	2
 4293              	.L355:
 4294 00d4 80000000 		.word	.LANCHOR1
 4295 00d8 00000000 		.word	.LANCHOR0
 4296 00dc 00010000 		.word	.LANCHOR2
 4297              		.cfi_endproc
 4298              	.LFE83:
 4299              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4300              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4301              		.align	2
 4302              		.global	vTaskNotifyGiveFromISR
 4303              		.code	16
 4304              		.thumb_func
 4305              		.type	vTaskNotifyGiveFromISR, %function
 4306              	vTaskNotifyGiveFromISR:
 4307              	.LFB84:
4791:..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4308              		.loc 1 4791 0
 4309              		.cfi_startproc
 4310              		@ args = 0, pretend = 0, frame = 0
 4311              		@ frame_needed = 0, uses_anonymous_args = 0
 4312              	.LVL446:
 4313 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4314              		.cfi_def_cfa_offset 24
 4315              		.cfi_offset 3, -24
 4316              		.cfi_offset 4, -20
 4317              		.cfi_offset 5, -16
 4318              		.cfi_offset 6, -12
 4319              		.cfi_offset 7, -8
 4320              		.cfi_offset 14, -4
 4321 0002 0400     		movs	r4, r0
 4322 0004 0E00     		movs	r6, r1
 4323              	.LVL447:
4818:..\FreeRTOS/tasks.c **** 		{
 4324              		.loc 1 4818 0
 4325 0006 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4326              	.LVL448:
 4327 000a 0500     		movs	r5, r0
 4328              	.LVL449:
4820:..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4329              		.loc 1 4820 0
 4330 000c 6423     		movs	r3, #100
 4331 000e E25C     		ldrb	r2, [r4, r3]
 4332              	.LVL450:
4821:..\FreeRTOS/tasks.c **** 
 4333              		.loc 1 4821 0
 4334 0010 0221     		movs	r1, #2
 4335 0012 E154     		strb	r1, [r4, r3]
4825:..\FreeRTOS/tasks.c **** 
 4336              		.loc 1 4825 0
 4337 0014 236E     		ldr	r3, [r4, #96]
 4338 0016 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 176


 4339 0018 2366     		str	r3, [r4, #96]
4831:..\FreeRTOS/tasks.c **** 			{
 4340              		.loc 1 4831 0
 4341 001a 012A     		cmp	r2, #1
 4342 001c 2CD1     		bne	.L358
4836:..\FreeRTOS/tasks.c **** 				{
 4343              		.loc 1 4836 0
 4344 001e 184B     		ldr	r3, .L363
 4345 0020 1B6F     		ldr	r3, [r3, #112]
 4346 0022 002B     		cmp	r3, #0
 4347 0024 14D1     		bne	.L359
4838:..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4348              		.loc 1 4838 0
 4349 0026 271D     		adds	r7, r4, #4
 4350 0028 3800     		movs	r0, r7
 4351              	.LVL451:
 4352 002a FFF7FEFF 		bl	uxListRemove
 4353              	.LVL452:
4839:..\FreeRTOS/tasks.c **** 				}
 4354              		.loc 1 4839 0
 4355 002e E36A     		ldr	r3, [r4, #44]
 4356 0030 134A     		ldr	r2, .L363
 4357 0032 526E     		ldr	r2, [r2, #100]
 4358 0034 9342     		cmp	r3, r2
 4359 0036 01D9     		bls	.L360
4839:..\FreeRTOS/tasks.c **** 				}
 4360              		.loc 1 4839 0 is_stmt 0 discriminator 1
 4361 0038 114A     		ldr	r2, .L363
 4362 003a 5366     		str	r3, [r2, #100]
 4363              	.L360:
4839:..\FreeRTOS/tasks.c **** 				}
 4364              		.loc 1 4839 0 discriminator 3
 4365 003c 9A00     		lsls	r2, r3, #2
 4366 003e D318     		adds	r3, r2, r3
 4367 0040 9A00     		lsls	r2, r3, #2
 4368 0042 1048     		ldr	r0, .L363+4
 4369 0044 3030     		adds	r0, r0, #48
 4370 0046 8018     		adds	r0, r0, r2
 4371 0048 3900     		movs	r1, r7
 4372 004a FFF7FEFF 		bl	vListInsertEnd
 4373              	.LVL453:
 4374 004e 05E0     		b	.L361
 4375              	.LVL454:
 4376              	.L359:
4845:..\FreeRTOS/tasks.c **** 				}
 4377              		.loc 1 4845 0 is_stmt 1
 4378 0050 2100     		movs	r1, r4
 4379 0052 1831     		adds	r1, r1, #24
 4380 0054 0B48     		ldr	r0, .L363+4
 4381              	.LVL455:
 4382 0056 1430     		adds	r0, r0, #20
 4383 0058 FFF7FEFF 		bl	vListInsertEnd
 4384              	.LVL456:
 4385              	.L361:
4848:..\FreeRTOS/tasks.c **** 				{
 4386              		.loc 1 4848 0
 4387 005c E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 177


 4388 005e 084B     		ldr	r3, .L363
 4389 0060 9B6D     		ldr	r3, [r3, #88]
 4390 0062 DB6A     		ldr	r3, [r3, #44]
 4391 0064 9A42     		cmp	r2, r3
 4392 0066 07D9     		bls	.L358
4852:..\FreeRTOS/tasks.c **** 					{
 4393              		.loc 1 4852 0
 4394 0068 002E     		cmp	r6, #0
 4395 006a 02D0     		beq	.L362
4854:..\FreeRTOS/tasks.c **** 					}
 4396              		.loc 1 4854 0
 4397 006c 0123     		movs	r3, #1
 4398 006e 3360     		str	r3, [r6]
 4399 0070 02E0     		b	.L358
 4400              	.L362:
4861:..\FreeRTOS/tasks.c **** 					}
 4401              		.loc 1 4861 0
 4402 0072 0122     		movs	r2, #1
 4403 0074 044B     		ldr	r3, .L363+8
 4404 0076 1A60     		str	r2, [r3]
 4405              	.L358:
4870:..\FreeRTOS/tasks.c **** 	}
 4406              		.loc 1 4870 0
 4407 0078 2800     		movs	r0, r5
 4408 007a FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4409              	.LVL457:
4871:..\FreeRTOS/tasks.c **** 
 4410              		.loc 1 4871 0
 4411              		@ sp needed
 4412              	.LVL458:
 4413              	.LVL459:
 4414              	.LVL460:
 4415 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4416              	.L364:
 4417              		.align	2
 4418              	.L363:
 4419 0080 80000000 		.word	.LANCHOR1
 4420 0084 00000000 		.word	.LANCHOR0
 4421 0088 00010000 		.word	.LANCHOR2
 4422              		.cfi_endproc
 4423              	.LFE84:
 4424              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4425              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4426              		.align	2
 4427              		.global	xTaskNotifyStateClear
 4428              		.code	16
 4429              		.thumb_func
 4430              		.type	xTaskNotifyStateClear, %function
 4431              	xTaskNotifyStateClear:
 4432              	.LFB85:
4880:..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 4433              		.loc 1 4880 0
 4434              		.cfi_startproc
 4435              		@ args = 0, pretend = 0, frame = 0
 4436              		@ frame_needed = 0, uses_anonymous_args = 0
 4437              	.LVL461:
 4438 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 178


 4439              		.cfi_def_cfa_offset 8
 4440              		.cfi_offset 4, -8
 4441              		.cfi_offset 14, -4
 4442 0002 041E     		subs	r4, r0, #0
4886:..\FreeRTOS/tasks.c **** 
 4443              		.loc 1 4886 0
 4444 0004 01D1     		bne	.L366
4886:..\FreeRTOS/tasks.c **** 
 4445              		.loc 1 4886 0 is_stmt 0 discriminator 1
 4446 0006 094B     		ldr	r3, .L369
 4447 0008 9C6D     		ldr	r4, [r3, #88]
 4448              	.LVL462:
 4449              	.L366:
4888:..\FreeRTOS/tasks.c **** 		{
 4450              		.loc 1 4888 0 is_stmt 1 discriminator 4
 4451 000a FFF7FEFF 		bl	vPortEnterCritical
 4452              	.LVL463:
4890:..\FreeRTOS/tasks.c **** 			{
 4453              		.loc 1 4890 0 discriminator 4
 4454 000e 6423     		movs	r3, #100
 4455 0010 E35C     		ldrb	r3, [r4, r3]
 4456 0012 022B     		cmp	r3, #2
 4457 0014 04D1     		bne	.L368
4892:..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 4458              		.loc 1 4892 0
 4459 0016 0022     		movs	r2, #0
 4460 0018 6233     		adds	r3, r3, #98
 4461 001a E254     		strb	r2, [r4, r3]
 4462              	.LVL464:
4893:..\FreeRTOS/tasks.c **** 			}
 4463              		.loc 1 4893 0
 4464 001c 0124     		movs	r4, #1
 4465              	.LVL465:
 4466 001e 00E0     		b	.L367
 4467              	.LVL466:
 4468              	.L368:
4897:..\FreeRTOS/tasks.c **** 			}
 4469              		.loc 1 4897 0
 4470 0020 0024     		movs	r4, #0
 4471              	.LVL467:
 4472              	.L367:
4900:..\FreeRTOS/tasks.c **** 
 4473              		.loc 1 4900 0
 4474 0022 FFF7FEFF 		bl	vPortExitCritical
 4475              	.LVL468:
4903:..\FreeRTOS/tasks.c **** 
 4476              		.loc 1 4903 0
 4477 0026 2000     		movs	r0, r4
 4478              		@ sp needed
 4479              	.LVL469:
 4480 0028 10BD     		pop	{r4, pc}
 4481              	.L370:
 4482 002a C046     		.align	2
 4483              	.L369:
 4484 002c 80000000 		.word	.LANCHOR1
 4485              		.cfi_endproc
 4486              	.LFE85:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 179


 4487              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4488              		.global	pxCurrentTCB
 4489              		.section	.rodata.str1.4,"aMS",%progbits,1
 4490              		.align	2
 4491              	.LC32:
 4492 0000 49444C45 		.ascii	"IDLE\000"
 4492      00
 4493              		.bss
 4494              		.align	2
 4495              		.set	.LANCHOR0,. + 0
 4496              		.set	.LANCHOR1,. + 128
 4497              		.set	.LANCHOR2,. + 256
 4498              		.type	xSuspendedTaskList, %object
 4499              		.size	xSuspendedTaskList, 20
 4500              	xSuspendedTaskList:
 4501 0000 00000000 		.space	20
 4501      00000000 
 4501      00000000 
 4501      00000000 
 4501      00000000 
 4502              		.type	xPendingReadyList, %object
 4503              		.size	xPendingReadyList, 20
 4504              	xPendingReadyList:
 4505 0014 00000000 		.space	20
 4505      00000000 
 4505      00000000 
 4505      00000000 
 4505      00000000 
 4506              		.type	pxDelayedTaskList, %object
 4507              		.size	pxDelayedTaskList, 4
 4508              	pxDelayedTaskList:
 4509 0028 00000000 		.space	4
 4510              		.type	xNextTaskUnblockTime, %object
 4511              		.size	xNextTaskUnblockTime, 4
 4512              	xNextTaskUnblockTime:
 4513 002c 00000000 		.space	4
 4514              		.type	pxReadyTasksLists, %object
 4515              		.size	pxReadyTasksLists, 100
 4516              	pxReadyTasksLists:
 4517 0030 00000000 		.space	100
 4517      00000000 
 4517      00000000 
 4517      00000000 
 4517      00000000 
 4518              		.type	xDelayedTaskList1, %object
 4519              		.size	xDelayedTaskList1, 20
 4520              	xDelayedTaskList1:
 4521 0094 00000000 		.space	20
 4521      00000000 
 4521      00000000 
 4521      00000000 
 4521      00000000 
 4522              		.type	xDelayedTaskList2, %object
 4523              		.size	xDelayedTaskList2, 20
 4524              	xDelayedTaskList2:
 4525 00a8 00000000 		.space	20
 4525      00000000 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 180


 4525      00000000 
 4525      00000000 
 4525      00000000 
 4526              		.type	xTasksWaitingTermination, %object
 4527              		.size	xTasksWaitingTermination, 20
 4528              	xTasksWaitingTermination:
 4529 00bc 00000000 		.space	20
 4529      00000000 
 4529      00000000 
 4529      00000000 
 4529      00000000 
 4530              		.type	pxOverflowDelayedTaskList, %object
 4531              		.size	pxOverflowDelayedTaskList, 4
 4532              	pxOverflowDelayedTaskList:
 4533 00d0 00000000 		.space	4
 4534              		.type	uxCurrentNumberOfTasks, %object
 4535              		.size	uxCurrentNumberOfTasks, 4
 4536              	uxCurrentNumberOfTasks:
 4537 00d4 00000000 		.space	4
 4538              		.type	pxCurrentTCB, %object
 4539              		.size	pxCurrentTCB, 4
 4540              	pxCurrentTCB:
 4541 00d8 00000000 		.space	4
 4542              		.type	xSchedulerRunning, %object
 4543              		.size	xSchedulerRunning, 4
 4544              	xSchedulerRunning:
 4545 00dc 00000000 		.space	4
 4546              		.type	uxTaskNumber, %object
 4547              		.size	uxTaskNumber, 4
 4548              	uxTaskNumber:
 4549 00e0 00000000 		.space	4
 4550              		.type	uxTopReadyPriority, %object
 4551              		.size	uxTopReadyPriority, 4
 4552              	uxTopReadyPriority:
 4553 00e4 00000000 		.space	4
 4554              		.type	uxDeletedTasksWaitingCleanUp, %object
 4555              		.size	uxDeletedTasksWaitingCleanUp, 4
 4556              	uxDeletedTasksWaitingCleanUp:
 4557 00e8 00000000 		.space	4
 4558              		.type	xTickCount, %object
 4559              		.size	xTickCount, 4
 4560              	xTickCount:
 4561 00ec 00000000 		.space	4
 4562              		.type	uxSchedulerSuspended, %object
 4563              		.size	uxSchedulerSuspended, 4
 4564              	uxSchedulerSuspended:
 4565 00f0 00000000 		.space	4
 4566              		.type	xIdleTaskHandle, %object
 4567              		.size	xIdleTaskHandle, 4
 4568              	xIdleTaskHandle:
 4569 00f4 00000000 		.space	4
 4570              		.type	xNumOfOverflows, %object
 4571              		.size	xNumOfOverflows, 4
 4572              	xNumOfOverflows:
 4573 00f8 00000000 		.space	4
 4574              		.type	uxPendedTicks, %object
 4575              		.size	uxPendedTicks, 4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 181


 4576              	uxPendedTicks:
 4577 00fc 00000000 		.space	4
 4578              		.type	xYieldPending, %object
 4579              		.size	xYieldPending, 4
 4580              	xYieldPending:
 4581 0100 00000000 		.space	4
 4582              		.text
 4583              	.Letext0:
 4584              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4585              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4586              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4587              		.file 5 "..\\FreeRTOS\\include/projdefs.h"
 4588              		.file 6 "..\\FreeRTOS\\portable\\GCC\\ARM_CM0/portmacro.h"
 4589              		.file 7 "..\\FreeRTOS\\include/list.h"
 4590              		.file 8 "..\\FreeRTOS\\include/task.h"
 4591              		.file 9 "Generated_Source\\PSoC4/RF1_REGS.h"
 4592              		.file 10 "..\\FreeRTOS\\include/portable.h"
 4593              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4
 4594              		.section	.debug_info,"",%progbits
 4595              	.Ldebug_info0:
 4596 0000 84200000 		.4byte	0x2084
 4597 0004 0400     		.2byte	0x4
 4598 0006 00000000 		.4byte	.Ldebug_abbrev0
 4599 000a 04       		.byte	0x4
 4600 000b 01       		.uleb128 0x1
 4601 000c 9A010000 		.4byte	.LASF265
 4602 0010 0C       		.byte	0xc
 4603 0011 52020000 		.4byte	.LASF266
 4604 0015 36040000 		.4byte	.LASF267
 4605 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 4606 001d 00000000 		.4byte	0
 4607 0021 00000000 		.4byte	.Ldebug_line0
 4608 0025 02       		.uleb128 0x2
 4609 0026 1D000000 		.4byte	.LASF4
 4610 002a 02       		.byte	0x2
 4611 002b D8       		.byte	0xd8
 4612 002c 30000000 		.4byte	0x30
 4613 0030 03       		.uleb128 0x3
 4614 0031 04       		.byte	0x4
 4615 0032 07       		.byte	0x7
 4616 0033 EC090000 		.4byte	.LASF0
 4617 0037 04       		.uleb128 0x4
 4618 0038 04       		.byte	0x4
 4619 0039 05       		.byte	0x5
 4620 003a 696E7400 		.ascii	"int\000"
 4621 003e 03       		.uleb128 0x3
 4622 003f 08       		.byte	0x8
 4623 0040 05       		.byte	0x5
 4624 0041 2F090000 		.4byte	.LASF1
 4625 0045 03       		.uleb128 0x3
 4626 0046 08       		.byte	0x8
 4627 0047 04       		.byte	0x4
 4628 0048 A10B0000 		.4byte	.LASF2
 4629 004c 03       		.uleb128 0x3
 4630 004d 01       		.byte	0x1
 4631 004e 06       		.byte	0x6
 4632 004f 01040000 		.4byte	.LASF3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 182


 4633 0053 02       		.uleb128 0x2
 4634 0054 92020000 		.4byte	.LASF5
 4635 0058 03       		.byte	0x3
 4636 0059 1D       		.byte	0x1d
 4637 005a 5E000000 		.4byte	0x5e
 4638 005e 03       		.uleb128 0x3
 4639 005f 01       		.byte	0x1
 4640 0060 08       		.byte	0x8
 4641 0061 8B040000 		.4byte	.LASF6
 4642 0065 03       		.uleb128 0x3
 4643 0066 02       		.byte	0x2
 4644 0067 05       		.byte	0x5
 4645 0068 280F0000 		.4byte	.LASF7
 4646 006c 02       		.uleb128 0x2
 4647 006d D9050000 		.4byte	.LASF8
 4648 0071 03       		.byte	0x3
 4649 0072 2B       		.byte	0x2b
 4650 0073 77000000 		.4byte	0x77
 4651 0077 03       		.uleb128 0x3
 4652 0078 02       		.byte	0x2
 4653 0079 07       		.byte	0x7
 4654 007a 5E100000 		.4byte	.LASF9
 4655 007e 03       		.uleb128 0x3
 4656 007f 04       		.byte	0x4
 4657 0080 05       		.byte	0x5
 4658 0081 D8020000 		.4byte	.LASF10
 4659 0085 02       		.uleb128 0x2
 4660 0086 0D090000 		.4byte	.LASF11
 4661 008a 03       		.byte	0x3
 4662 008b 41       		.byte	0x41
 4663 008c 90000000 		.4byte	0x90
 4664 0090 03       		.uleb128 0x3
 4665 0091 04       		.byte	0x4
 4666 0092 07       		.byte	0x7
 4667 0093 EE070000 		.4byte	.LASF12
 4668 0097 03       		.uleb128 0x3
 4669 0098 08       		.byte	0x8
 4670 0099 07       		.byte	0x7
 4671 009a 870C0000 		.4byte	.LASF13
 4672 009e 03       		.uleb128 0x3
 4673 009f 04       		.byte	0x4
 4674 00a0 07       		.byte	0x7
 4675 00a1 35000000 		.4byte	.LASF14
 4676 00a5 05       		.uleb128 0x5
 4677 00a6 04       		.byte	0x4
 4678 00a7 06       		.uleb128 0x6
 4679 00a8 04       		.byte	0x4
 4680 00a9 AD000000 		.4byte	0xad
 4681 00ad 03       		.uleb128 0x3
 4682 00ae 01       		.byte	0x1
 4683 00af 08       		.byte	0x8
 4684 00b0 9C050000 		.4byte	.LASF15
 4685 00b4 06       		.uleb128 0x6
 4686 00b5 04       		.byte	0x4
 4687 00b6 BA000000 		.4byte	0xba
 4688 00ba 07       		.uleb128 0x7
 4689 00bb AD000000 		.4byte	0xad
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 183


 4690 00bf 02       		.uleb128 0x2
 4691 00c0 18040000 		.4byte	.LASF16
 4692 00c4 04       		.byte	0x4
 4693 00c5 18       		.byte	0x18
 4694 00c6 53000000 		.4byte	0x53
 4695 00ca 02       		.uleb128 0x2
 4696 00cb B90C0000 		.4byte	.LASF17
 4697 00cf 04       		.byte	0x4
 4698 00d0 24       		.byte	0x24
 4699 00d1 6C000000 		.4byte	0x6c
 4700 00d5 02       		.uleb128 0x2
 4701 00d6 01100000 		.4byte	.LASF18
 4702 00da 04       		.byte	0x4
 4703 00db 30       		.byte	0x30
 4704 00dc 85000000 		.4byte	0x85
 4705 00e0 03       		.uleb128 0x3
 4706 00e1 04       		.byte	0x4
 4707 00e2 04       		.byte	0x4
 4708 00e3 C2090000 		.4byte	.LASF19
 4709 00e7 03       		.uleb128 0x3
 4710 00e8 08       		.byte	0x8
 4711 00e9 04       		.byte	0x4
 4712 00ea 60090000 		.4byte	.LASF20
 4713 00ee 08       		.uleb128 0x8
 4714 00ef 01       		.byte	0x1
 4715 00f0 5E000000 		.4byte	0x5e
 4716 00f4 09       		.byte	0x9
 4717 00f5 1F       		.byte	0x1f
 4718 00f6 97010000 		.4byte	0x197
 4719 00fa 09       		.uleb128 0x9
 4720 00fb E40D0000 		.4byte	.LASF21
 4721 00ff 00       		.byte	0
 4722 0100 09       		.uleb128 0x9
 4723 0101 EF0B0000 		.4byte	.LASF22
 4724 0105 01       		.byte	0x1
 4725 0106 09       		.uleb128 0x9
 4726 0107 92030000 		.4byte	.LASF23
 4727 010b 02       		.byte	0x2
 4728 010c 09       		.uleb128 0x9
 4729 010d 230A0000 		.4byte	.LASF24
 4730 0111 03       		.byte	0x3
 4731 0112 09       		.uleb128 0x9
 4732 0113 68000000 		.4byte	.LASF25
 4733 0117 04       		.byte	0x4
 4734 0118 09       		.uleb128 0x9
 4735 0119 930A0000 		.4byte	.LASF26
 4736 011d 05       		.byte	0x5
 4737 011e 09       		.uleb128 0x9
 4738 011f 4D0F0000 		.4byte	.LASF27
 4739 0123 06       		.byte	0x6
 4740 0124 09       		.uleb128 0x9
 4741 0125 F9090000 		.4byte	.LASF28
 4742 0129 07       		.byte	0x7
 4743 012a 09       		.uleb128 0x9
 4744 012b C20C0000 		.4byte	.LASF29
 4745 012f 08       		.byte	0x8
 4746 0130 09       		.uleb128 0x9
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 184


 4747 0131 B4030000 		.4byte	.LASF30
 4748 0135 09       		.byte	0x9
 4749 0136 09       		.uleb128 0x9
 4750 0137 AD0B0000 		.4byte	.LASF31
 4751 013b 0A       		.byte	0xa
 4752 013c 09       		.uleb128 0x9
 4753 013d BB080000 		.4byte	.LASF32
 4754 0141 0B       		.byte	0xb
 4755 0142 09       		.uleb128 0x9
 4756 0143 BF060000 		.4byte	.LASF33
 4757 0147 0C       		.byte	0xc
 4758 0148 09       		.uleb128 0x9
 4759 0149 6A030000 		.4byte	.LASF34
 4760 014d 0D       		.byte	0xd
 4761 014e 09       		.uleb128 0x9
 4762 014f 7B000000 		.4byte	.LASF35
 4763 0153 0E       		.byte	0xe
 4764 0154 09       		.uleb128 0x9
 4765 0155 C20F0000 		.4byte	.LASF36
 4766 0159 0F       		.byte	0xf
 4767 015a 09       		.uleb128 0x9
 4768 015b B2020000 		.4byte	.LASF37
 4769 015f 10       		.byte	0x10
 4770 0160 09       		.uleb128 0x9
 4771 0161 5D0B0000 		.4byte	.LASF38
 4772 0165 11       		.byte	0x11
 4773 0166 09       		.uleb128 0x9
 4774 0167 E4080000 		.4byte	.LASF39
 4775 016b 12       		.byte	0x12
 4776 016c 09       		.uleb128 0x9
 4777 016d 87060000 		.4byte	.LASF40
 4778 0171 13       		.byte	0x13
 4779 0172 09       		.uleb128 0x9
 4780 0173 23030000 		.4byte	.LASF41
 4781 0177 14       		.byte	0x14
 4782 0178 09       		.uleb128 0x9
 4783 0179 24000000 		.4byte	.LASF42
 4784 017d 15       		.byte	0x15
 4785 017e 09       		.uleb128 0x9
 4786 017f 840F0000 		.4byte	.LASF43
 4787 0183 16       		.byte	0x16
 4788 0184 09       		.uleb128 0x9
 4789 0185 73060000 		.4byte	.LASF44
 4790 0189 17       		.byte	0x17
 4791 018a 09       		.uleb128 0x9
 4792 018b 21110000 		.4byte	.LASF45
 4793 018f 1C       		.byte	0x1c
 4794 0190 09       		.uleb128 0x9
 4795 0191 9F070000 		.4byte	.LASF46
 4796 0195 1D       		.byte	0x1d
 4797 0196 00       		.byte	0
 4798 0197 0A       		.uleb128 0xa
 4799 0198 D5000000 		.4byte	0xd5
 4800 019c 02       		.uleb128 0x2
 4801 019d D1090000 		.4byte	.LASF47
 4802 01a1 05       		.byte	0x5
 4803 01a2 24       		.byte	0x24
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 185


 4804 01a3 A7010000 		.4byte	0x1a7
 4805 01a7 06       		.uleb128 0x6
 4806 01a8 04       		.byte	0x4
 4807 01a9 AD010000 		.4byte	0x1ad
 4808 01ad 0B       		.uleb128 0xb
 4809 01ae B8010000 		.4byte	0x1b8
 4810 01b2 0C       		.uleb128 0xc
 4811 01b3 A5000000 		.4byte	0xa5
 4812 01b7 00       		.byte	0
 4813 01b8 02       		.uleb128 0x2
 4814 01b9 44100000 		.4byte	.LASF48
 4815 01bd 06       		.byte	0x6
 4816 01be 38       		.byte	0x38
 4817 01bf D5000000 		.4byte	0xd5
 4818 01c3 02       		.uleb128 0x2
 4819 01c4 3C010000 		.4byte	.LASF49
 4820 01c8 06       		.byte	0x6
 4821 01c9 39       		.byte	0x39
 4822 01ca 7E000000 		.4byte	0x7e
 4823 01ce 02       		.uleb128 0x2
 4824 01cf 400D0000 		.4byte	.LASF50
 4825 01d3 06       		.byte	0x6
 4826 01d4 3A       		.byte	0x3a
 4827 01d5 90000000 		.4byte	0x90
 4828 01d9 02       		.uleb128 0x2
 4829 01da 960D0000 		.4byte	.LASF51
 4830 01de 06       		.byte	0x6
 4831 01df 40       		.byte	0x40
 4832 01e0 D5000000 		.4byte	0xd5
 4833 01e4 06       		.uleb128 0x6
 4834 01e5 04       		.byte	0x4
 4835 01e6 BF000000 		.4byte	0xbf
 4836 01ea 0D       		.uleb128 0xd
 4837 01eb A5000000 		.4byte	0xa5
 4838 01ef FA010000 		.4byte	0x1fa
 4839 01f3 0E       		.uleb128 0xe
 4840 01f4 9E000000 		.4byte	0x9e
 4841 01f8 04       		.byte	0x4
 4842 01f9 00       		.byte	0
 4843 01fa 0F       		.uleb128 0xf
 4844 01fb 77090000 		.4byte	.LASF58
 4845 01ff 14       		.byte	0x14
 4846 0200 07       		.byte	0x7
 4847 0201 8C       		.byte	0x8c
 4848 0202 43020000 		.4byte	0x243
 4849 0206 10       		.uleb128 0x10
 4850 0207 4A110000 		.4byte	.LASF52
 4851 020b 07       		.byte	0x7
 4852 020c 8F       		.byte	0x8f
 4853 020d D9010000 		.4byte	0x1d9
 4854 0211 00       		.byte	0
 4855 0212 10       		.uleb128 0x10
 4856 0213 64010000 		.4byte	.LASF53
 4857 0217 07       		.byte	0x7
 4858 0218 90       		.byte	0x90
 4859 0219 43020000 		.4byte	0x243
 4860 021d 04       		.byte	0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 186


 4861 021e 10       		.uleb128 0x10
 4862 021f 4C0D0000 		.4byte	.LASF54
 4863 0223 07       		.byte	0x7
 4864 0224 91       		.byte	0x91
 4865 0225 43020000 		.4byte	0x243
 4866 0229 08       		.byte	0x8
 4867 022a 10       		.uleb128 0x10
 4868 022b FD0B0000 		.4byte	.LASF55
 4869 022f 07       		.byte	0x7
 4870 0230 92       		.byte	0x92
 4871 0231 A5000000 		.4byte	0xa5
 4872 0235 0C       		.byte	0xc
 4873 0236 10       		.uleb128 0x10
 4874 0237 01090000 		.4byte	.LASF56
 4875 023b 07       		.byte	0x7
 4876 023c 93       		.byte	0x93
 4877 023d A5000000 		.4byte	0xa5
 4878 0241 10       		.byte	0x10
 4879 0242 00       		.byte	0
 4880 0243 06       		.uleb128 0x6
 4881 0244 04       		.byte	0x4
 4882 0245 FA010000 		.4byte	0x1fa
 4883 0249 02       		.uleb128 0x2
 4884 024a 950F0000 		.4byte	.LASF57
 4885 024e 07       		.byte	0x7
 4886 024f 96       		.byte	0x96
 4887 0250 FA010000 		.4byte	0x1fa
 4888 0254 0F       		.uleb128 0xf
 4889 0255 C9050000 		.4byte	.LASF59
 4890 0259 0C       		.byte	0xc
 4891 025a 07       		.byte	0x7
 4892 025b 98       		.byte	0x98
 4893 025c 85020000 		.4byte	0x285
 4894 0260 10       		.uleb128 0x10
 4895 0261 4A110000 		.4byte	.LASF52
 4896 0265 07       		.byte	0x7
 4897 0266 9B       		.byte	0x9b
 4898 0267 D9010000 		.4byte	0x1d9
 4899 026b 00       		.byte	0
 4900 026c 10       		.uleb128 0x10
 4901 026d 64010000 		.4byte	.LASF53
 4902 0271 07       		.byte	0x7
 4903 0272 9C       		.byte	0x9c
 4904 0273 43020000 		.4byte	0x243
 4905 0277 04       		.byte	0x4
 4906 0278 10       		.uleb128 0x10
 4907 0279 4C0D0000 		.4byte	.LASF54
 4908 027d 07       		.byte	0x7
 4909 027e 9D       		.byte	0x9d
 4910 027f 43020000 		.4byte	0x243
 4911 0283 08       		.byte	0x8
 4912 0284 00       		.byte	0
 4913 0285 02       		.uleb128 0x2
 4914 0286 B1040000 		.4byte	.LASF60
 4915 028a 07       		.byte	0x7
 4916 028b 9F       		.byte	0x9f
 4917 028c 54020000 		.4byte	0x254
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 187


 4918 0290 0F       		.uleb128 0xf
 4919 0291 EE020000 		.4byte	.LASF61
 4920 0295 14       		.byte	0x14
 4921 0296 07       		.byte	0x7
 4922 0297 A4       		.byte	0xa4
 4923 0298 C1020000 		.4byte	0x2c1
 4924 029c 10       		.uleb128 0x10
 4925 029d 490A0000 		.4byte	.LASF62
 4926 02a1 07       		.byte	0x7
 4927 02a2 A7       		.byte	0xa7
 4928 02a3 C1020000 		.4byte	0x2c1
 4929 02a7 00       		.byte	0
 4930 02a8 10       		.uleb128 0x10
 4931 02a9 5E050000 		.4byte	.LASF63
 4932 02ad 07       		.byte	0x7
 4933 02ae A8       		.byte	0xa8
 4934 02af C6020000 		.4byte	0x2c6
 4935 02b3 04       		.byte	0x4
 4936 02b4 10       		.uleb128 0x10
 4937 02b5 340B0000 		.4byte	.LASF64
 4938 02b9 07       		.byte	0x7
 4939 02ba A9       		.byte	0xa9
 4940 02bb 85020000 		.4byte	0x285
 4941 02bf 08       		.byte	0x8
 4942 02c0 00       		.byte	0
 4943 02c1 0A       		.uleb128 0xa
 4944 02c2 CE010000 		.4byte	0x1ce
 4945 02c6 06       		.uleb128 0x6
 4946 02c7 04       		.byte	0x4
 4947 02c8 49020000 		.4byte	0x249
 4948 02cc 02       		.uleb128 0x2
 4949 02cd D80A0000 		.4byte	.LASF65
 4950 02d1 07       		.byte	0x7
 4951 02d2 AB       		.byte	0xab
 4952 02d3 90020000 		.4byte	0x290
 4953 02d7 02       		.uleb128 0x2
 4954 02d8 CB0A0000 		.4byte	.LASF66
 4955 02dc 08       		.byte	0x8
 4956 02dd 3E       		.byte	0x3e
 4957 02de A5000000 		.4byte	0xa5
 4958 02e2 08       		.uleb128 0x8
 4959 02e3 01       		.byte	0x1
 4960 02e4 5E000000 		.4byte	0x5e
 4961 02e8 08       		.byte	0x8
 4962 02e9 48       		.byte	0x48
 4963 02ea 13030000 		.4byte	0x313
 4964 02ee 09       		.uleb128 0x9
 4965 02ef C8090000 		.4byte	.LASF67
 4966 02f3 00       		.byte	0
 4967 02f4 09       		.uleb128 0x9
 4968 02f5 DB070000 		.4byte	.LASF68
 4969 02f9 01       		.byte	0x1
 4970 02fa 09       		.uleb128 0x9
 4971 02fb 4D0B0000 		.4byte	.LASF69
 4972 02ff 02       		.byte	0x2
 4973 0300 09       		.uleb128 0x9
 4974 0301 0D040000 		.4byte	.LASF70
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 188


 4975 0305 03       		.byte	0x3
 4976 0306 09       		.uleb128 0x9
 4977 0307 47010000 		.4byte	.LASF71
 4978 030b 04       		.byte	0x4
 4979 030c 09       		.uleb128 0x9
 4980 030d 3C0E0000 		.4byte	.LASF72
 4981 0311 05       		.byte	0x5
 4982 0312 00       		.byte	0
 4983 0313 02       		.uleb128 0x2
 4984 0314 DB000000 		.4byte	.LASF73
 4985 0318 08       		.byte	0x8
 4986 0319 4F       		.byte	0x4f
 4987 031a E2020000 		.4byte	0x2e2
 4988 031e 08       		.uleb128 0x8
 4989 031f 01       		.byte	0x1
 4990 0320 5E000000 		.4byte	0x5e
 4991 0324 08       		.byte	0x8
 4992 0325 53       		.byte	0x53
 4993 0326 49030000 		.4byte	0x349
 4994 032a 09       		.uleb128 0x9
 4995 032b DA100000 		.4byte	.LASF74
 4996 032f 00       		.byte	0
 4997 0330 09       		.uleb128 0x9
 4998 0331 48030000 		.4byte	.LASF75
 4999 0335 01       		.byte	0x1
 5000 0336 09       		.uleb128 0x9
 5001 0337 C00B0000 		.4byte	.LASF76
 5002 033b 02       		.byte	0x2
 5003 033c 09       		.uleb128 0x9
 5004 033d D80B0000 		.4byte	.LASF77
 5005 0341 03       		.byte	0x3
 5006 0342 09       		.uleb128 0x9
 5007 0343 E4050000 		.4byte	.LASF78
 5008 0347 04       		.byte	0x4
 5009 0348 00       		.byte	0
 5010 0349 02       		.uleb128 0x2
 5011 034a 21100000 		.4byte	.LASF79
 5012 034e 08       		.byte	0x8
 5013 034f 59       		.byte	0x59
 5014 0350 1E030000 		.4byte	0x31e
 5015 0354 0F       		.uleb128 0xf
 5016 0355 E6000000 		.4byte	.LASF80
 5017 0359 08       		.byte	0x8
 5018 035a 08       		.byte	0x8
 5019 035b 5E       		.byte	0x5e
 5020 035c 79030000 		.4byte	0x379
 5021 0360 10       		.uleb128 0x10
 5022 0361 AF070000 		.4byte	.LASF81
 5023 0365 08       		.byte	0x8
 5024 0366 60       		.byte	0x60
 5025 0367 C3010000 		.4byte	0x1c3
 5026 036b 00       		.byte	0
 5027 036c 10       		.uleb128 0x10
 5028 036d 04050000 		.4byte	.LASF82
 5029 0371 08       		.byte	0x8
 5030 0372 61       		.byte	0x61
 5031 0373 D9010000 		.4byte	0x1d9
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 189


 5032 0377 04       		.byte	0x4
 5033 0378 00       		.byte	0
 5034 0379 02       		.uleb128 0x2
 5035 037a BF050000 		.4byte	.LASF83
 5036 037e 08       		.byte	0x8
 5037 037f 62       		.byte	0x62
 5038 0380 54030000 		.4byte	0x354
 5039 0384 0F       		.uleb128 0xf
 5040 0385 6E080000 		.4byte	.LASF84
 5041 0389 0C       		.byte	0xc
 5042 038a 08       		.byte	0x8
 5043 038b 67       		.byte	0x67
 5044 038c B5030000 		.4byte	0x3b5
 5045 0390 10       		.uleb128 0x10
 5046 0391 69070000 		.4byte	.LASF85
 5047 0395 08       		.byte	0x8
 5048 0396 69       		.byte	0x69
 5049 0397 A5000000 		.4byte	0xa5
 5050 039b 00       		.byte	0
 5051 039c 10       		.uleb128 0x10
 5052 039d 97090000 		.4byte	.LASF86
 5053 03a1 08       		.byte	0x8
 5054 03a2 6A       		.byte	0x6a
 5055 03a3 D5000000 		.4byte	0xd5
 5056 03a7 04       		.byte	0x4
 5057 03a8 10       		.uleb128 0x10
 5058 03a9 FB100000 		.4byte	.LASF87
 5059 03ad 08       		.byte	0x8
 5060 03ae 6B       		.byte	0x6b
 5061 03af D5000000 		.4byte	0xd5
 5062 03b3 08       		.byte	0x8
 5063 03b4 00       		.byte	0
 5064 03b5 02       		.uleb128 0x2
 5065 03b6 BD000000 		.4byte	.LASF88
 5066 03ba 08       		.byte	0x8
 5067 03bb 6C       		.byte	0x6c
 5068 03bc 84030000 		.4byte	0x384
 5069 03c0 07       		.uleb128 0x7
 5070 03c1 B4000000 		.4byte	0xb4
 5071 03c5 06       		.uleb128 0x6
 5072 03c6 04       		.byte	0x4
 5073 03c7 B8010000 		.4byte	0x1b8
 5074 03cb 11       		.uleb128 0x11
 5075 03cc 100C0000 		.4byte	.LASF89
 5076 03d0 68       		.byte	0x68
 5077 03d1 01       		.byte	0x1
 5078 03d2 0D01     		.2byte	0x10d
 5079 03d4 68040000 		.4byte	0x468
 5080 03d8 12       		.uleb128 0x12
 5081 03d9 66050000 		.4byte	.LASF90
 5082 03dd 01       		.byte	0x1
 5083 03de 0F01     		.2byte	0x10f
 5084 03e0 68040000 		.4byte	0x468
 5085 03e4 00       		.byte	0
 5086 03e5 12       		.uleb128 0x12
 5087 03e6 460C0000 		.4byte	.LASF91
 5088 03ea 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 190


 5089 03eb 1501     		.2byte	0x115
 5090 03ed 49020000 		.4byte	0x249
 5091 03f1 04       		.byte	0x4
 5092 03f2 12       		.uleb128 0x12
 5093 03f3 CC000000 		.4byte	.LASF92
 5094 03f7 01       		.byte	0x1
 5095 03f8 1601     		.2byte	0x116
 5096 03fa 49020000 		.4byte	0x249
 5097 03fe 18       		.byte	0x18
 5098 03ff 12       		.uleb128 0x12
 5099 0400 5B110000 		.4byte	.LASF93
 5100 0404 01       		.byte	0x1
 5101 0405 1701     		.2byte	0x117
 5102 0407 CE010000 		.4byte	0x1ce
 5103 040b 2C       		.byte	0x2c
 5104 040c 12       		.uleb128 0x12
 5105 040d 50010000 		.4byte	.LASF94
 5106 0411 01       		.byte	0x1
 5107 0412 1801     		.2byte	0x118
 5108 0414 C5030000 		.4byte	0x3c5
 5109 0418 30       		.byte	0x30
 5110 0419 12       		.uleb128 0x12
 5111 041a 050C0000 		.4byte	.LASF95
 5112 041e 01       		.byte	0x1
 5113 041f 1901     		.2byte	0x119
 5114 0421 73040000 		.4byte	0x473
 5115 0425 34       		.byte	0x34
 5116 0426 12       		.uleb128 0x12
 5117 0427 9C020000 		.4byte	.LASF96
 5118 042b 01       		.byte	0x1
 5119 042c 2901     		.2byte	0x129
 5120 042e CE010000 		.4byte	0x1ce
 5121 0432 44       		.byte	0x44
 5122 0433 12       		.uleb128 0x12
 5123 0434 A10A0000 		.4byte	.LASF97
 5124 0438 01       		.byte	0x1
 5125 0439 2A01     		.2byte	0x12a
 5126 043b CE010000 		.4byte	0x1ce
 5127 043f 48       		.byte	0x48
 5128 0440 12       		.uleb128 0x12
 5129 0441 570D0000 		.4byte	.LASF98
 5130 0445 01       		.byte	0x1
 5131 0446 3201     		.2byte	0x132
 5132 0448 EA010000 		.4byte	0x1ea
 5133 044c 4C       		.byte	0x4c
 5134 044d 12       		.uleb128 0x12
 5135 044e D2060000 		.4byte	.LASF99
 5136 0452 01       		.byte	0x1
 5137 0453 4501     		.2byte	0x145
 5138 0455 97010000 		.4byte	0x197
 5139 0459 60       		.byte	0x60
 5140 045a 12       		.uleb128 0x12
 5141 045b CF0D0000 		.4byte	.LASF100
 5142 045f 01       		.byte	0x1
 5143 0460 4601     		.2byte	0x146
 5144 0462 83040000 		.4byte	0x483
 5145 0466 64       		.byte	0x64
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 191


 5146 0467 00       		.byte	0
 5147 0468 06       		.uleb128 0x6
 5148 0469 04       		.byte	0x4
 5149 046a 6E040000 		.4byte	0x46e
 5150 046e 0A       		.uleb128 0xa
 5151 046f B8010000 		.4byte	0x1b8
 5152 0473 0D       		.uleb128 0xd
 5153 0474 AD000000 		.4byte	0xad
 5154 0478 83040000 		.4byte	0x483
 5155 047c 0E       		.uleb128 0xe
 5156 047d 9E000000 		.4byte	0x9e
 5157 0481 0F       		.byte	0xf
 5158 0482 00       		.byte	0
 5159 0483 0A       		.uleb128 0xa
 5160 0484 BF000000 		.4byte	0xbf
 5161 0488 13       		.uleb128 0x13
 5162 0489 AB020000 		.4byte	.LASF101
 5163 048d 01       		.byte	0x1
 5164 048e 5301     		.2byte	0x153
 5165 0490 CB030000 		.4byte	0x3cb
 5166 0494 13       		.uleb128 0x13
 5167 0495 D50F0000 		.4byte	.LASF102
 5168 0499 01       		.byte	0x1
 5169 049a 5701     		.2byte	0x157
 5170 049c 88040000 		.4byte	0x488
 5171 04a0 14       		.uleb128 0x14
 5172 04a1 85050000 		.4byte	.LASF105
 5173 04a5 01       		.byte	0x1
 5174 04a6 C306     		.2byte	0x6c3
 5175 04a8 C3010000 		.4byte	0x1c3
 5176 04ac 00000000 		.4byte	.LFB43
 5177 04b0 3C000000 		.4byte	.LFE43-.LFB43
 5178 04b4 01       		.uleb128 0x1
 5179 04b5 9C       		.byte	0x9c
 5180 04b6 EB040000 		.4byte	0x4eb
 5181 04ba 15       		.uleb128 0x15
 5182 04bb 43020000 		.4byte	.LASF107
 5183 04bf 01       		.byte	0x1
 5184 04c0 C306     		.2byte	0x6c3
 5185 04c2 EB040000 		.4byte	0x4eb
 5186 04c6 00000000 		.4byte	.LLST0
 5187 04ca 16       		.uleb128 0x16
 5188 04cb A9040000 		.4byte	.LASF103
 5189 04cf 01       		.byte	0x1
 5190 04d0 C506     		.2byte	0x6c5
 5191 04d2 C3010000 		.4byte	0x1c3
 5192 04d6 6C000000 		.4byte	.LLST1
 5193 04da 16       		.uleb128 0x16
 5194 04db 55110000 		.4byte	.LASF104
 5195 04df 01       		.byte	0x1
 5196 04e0 C606     		.2byte	0x6c6
 5197 04e2 FB040000 		.4byte	0x4fb
 5198 04e6 8B000000 		.4byte	.LLST2
 5199 04ea 00       		.byte	0
 5200 04eb 07       		.uleb128 0x7
 5201 04ec D7020000 		.4byte	0x2d7
 5202 04f0 06       		.uleb128 0x6
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 192


 5203 04f1 04       		.byte	0x4
 5204 04f2 F6040000 		.4byte	0x4f6
 5205 04f6 07       		.uleb128 0x7
 5206 04f7 94040000 		.4byte	0x494
 5207 04fb 07       		.uleb128 0x7
 5208 04fc F0040000 		.4byte	0x4f0
 5209 0500 14       		.uleb128 0x14
 5210 0501 690A0000 		.4byte	.LASF106
 5211 0505 01       		.byte	0x1
 5212 0506 2C0E     		.2byte	0xe2c
 5213 0508 CA000000 		.4byte	0xca
 5214 050c 00000000 		.4byte	.LFB69
 5215 0510 14000000 		.4byte	.LFE69-.LFB69
 5216 0514 01       		.uleb128 0x1
 5217 0515 9C       		.byte	0x9c
 5218 0516 3B050000 		.4byte	0x53b
 5219 051a 15       		.uleb128 0x15
 5220 051b 910E0000 		.4byte	.LASF108
 5221 051f 01       		.byte	0x1
 5222 0520 2C0E     		.2byte	0xe2c
 5223 0522 3B050000 		.4byte	0x53b
 5224 0526 F7000000 		.4byte	.LLST3
 5225 052a 16       		.uleb128 0x16
 5226 052b 20060000 		.4byte	.LASF109
 5227 052f 01       		.byte	0x1
 5228 0530 2E0E     		.2byte	0xe2e
 5229 0532 D5000000 		.4byte	0xd5
 5230 0536 15010000 		.4byte	.LLST4
 5231 053a 00       		.byte	0
 5232 053b 06       		.uleb128 0x6
 5233 053c 04       		.byte	0x4
 5234 053d 41050000 		.4byte	0x541
 5235 0541 07       		.uleb128 0x7
 5236 0542 BF000000 		.4byte	0xbf
 5237 0546 17       		.uleb128 0x17
 5238 0547 C0040000 		.4byte	.LASF110
 5239 054b 01       		.byte	0x1
 5240 054c 920E     		.2byte	0xe92
 5241 054e 00000000 		.4byte	.LFB72
 5242 0552 30000000 		.4byte	.LFE72-.LFB72
 5243 0556 01       		.uleb128 0x1
 5244 0557 9C       		.byte	0x9c
 5245 0558 6D050000 		.4byte	0x56d
 5246 055c 16       		.uleb128 0x16
 5247 055d 55110000 		.4byte	.LASF104
 5248 0561 01       		.byte	0x1
 5249 0562 940E     		.2byte	0xe94
 5250 0564 6D050000 		.4byte	0x56d
 5251 0568 34010000 		.4byte	.LLST5
 5252 056c 00       		.byte	0
 5253 056d 06       		.uleb128 0x6
 5254 056e 04       		.byte	0x4
 5255 056f 94040000 		.4byte	0x494
 5256 0573 17       		.uleb128 0x17
 5257 0574 340A0000 		.4byte	.LASF111
 5258 0578 01       		.byte	0x1
 5259 0579 5C0E     		.2byte	0xe5c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 193


 5260 057b 00000000 		.4byte	.LFB71
 5261 057f 12000000 		.4byte	.LFE71-.LFB71
 5262 0583 01       		.uleb128 0x1
 5263 0584 9C       		.byte	0x9c
 5264 0585 B3050000 		.4byte	0x5b3
 5265 0589 15       		.uleb128 0x15
 5266 058a 55110000 		.4byte	.LASF104
 5267 058e 01       		.byte	0x1
 5268 058f 5C0E     		.2byte	0xe5c
 5269 0591 6D050000 		.4byte	0x56d
 5270 0595 47010000 		.4byte	.LLST6
 5271 0599 18       		.uleb128 0x18
 5272 059a 0A000000 		.4byte	.LVL18
 5273 059e C61F0000 		.4byte	0x1fc6
 5274 05a2 19       		.uleb128 0x19
 5275 05a3 10000000 		.4byte	.LVL19
 5276 05a7 C61F0000 		.4byte	0x1fc6
 5277 05ab 1A       		.uleb128 0x1a
 5278 05ac 01       		.uleb128 0x1
 5279 05ad 50       		.byte	0x50
 5280 05ae 02       		.uleb128 0x2
 5281 05af 74       		.byte	0x74
 5282 05b0 00       		.sleb128 0
 5283 05b1 00       		.byte	0
 5284 05b2 00       		.byte	0
 5285 05b3 17       		.uleb128 0x17
 5286 05b4 DC040000 		.4byte	.LASF112
 5287 05b8 01       		.byte	0x1
 5288 05b9 3703     		.2byte	0x337
 5289 05bb 00000000 		.4byte	.LFB33
 5290 05bf AC000000 		.4byte	.LFE33-.LFB33
 5291 05c3 01       		.uleb128 0x1
 5292 05c4 9C       		.byte	0x9c
 5293 05c5 C7060000 		.4byte	0x6c7
 5294 05c9 15       		.uleb128 0x15
 5295 05ca 08010000 		.4byte	.LASF113
 5296 05ce 01       		.byte	0x1
 5297 05cf 3703     		.2byte	0x337
 5298 05d1 9C010000 		.4byte	0x19c
 5299 05d5 73010000 		.4byte	.LLST7
 5300 05d9 15       		.uleb128 0x15
 5301 05da 8B030000 		.4byte	.LASF114
 5302 05de 01       		.byte	0x1
 5303 05df 3803     		.2byte	0x338
 5304 05e1 C0030000 		.4byte	0x3c0
 5305 05e5 9E010000 		.4byte	.LLST8
 5306 05e9 15       		.uleb128 0x15
 5307 05ea AE080000 		.4byte	.LASF115
 5308 05ee 01       		.byte	0x1
 5309 05ef 3903     		.2byte	0x339
 5310 05f1 C7060000 		.4byte	0x6c7
 5311 05f5 CA010000 		.4byte	.LLST9
 5312 05f9 15       		.uleb128 0x15
 5313 05fa DB0F0000 		.4byte	.LASF116
 5314 05fe 01       		.byte	0x1
 5315 05ff 3A03     		.2byte	0x33a
 5316 0601 CC060000 		.4byte	0x6cc
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 194


 5317 0605 F6010000 		.4byte	.LLST10
 5318 0609 15       		.uleb128 0x15
 5319 060a 5B110000 		.4byte	.LASF93
 5320 060e 01       		.byte	0x1
 5321 060f 3B03     		.2byte	0x33b
 5322 0611 CE010000 		.4byte	0x1ce
 5323 0615 15020000 		.4byte	.LLST11
 5324 0619 1B       		.uleb128 0x1b
 5325 061a 1C070000 		.4byte	.LASF117
 5326 061e 01       		.byte	0x1
 5327 061f 3C03     		.2byte	0x33c
 5328 0621 D7060000 		.4byte	0x6d7
 5329 0625 02       		.uleb128 0x2
 5330 0626 91       		.byte	0x91
 5331 0627 04       		.sleb128 4
 5332 0628 1B       		.uleb128 0x1b
 5333 0629 66020000 		.4byte	.LASF118
 5334 062d 01       		.byte	0x1
 5335 062e 3D03     		.2byte	0x33d
 5336 0630 6D050000 		.4byte	0x56d
 5337 0634 02       		.uleb128 0x2
 5338 0635 91       		.byte	0x91
 5339 0636 08       		.sleb128 8
 5340 0637 1B       		.uleb128 0x1b
 5341 0638 18100000 		.4byte	.LASF119
 5342 063c 01       		.byte	0x1
 5343 063d 3E03     		.2byte	0x33e
 5344 063f E7060000 		.4byte	0x6e7
 5345 0643 02       		.uleb128 0x2
 5346 0644 91       		.byte	0x91
 5347 0645 0C       		.sleb128 12
 5348 0646 16       		.uleb128 0x16
 5349 0647 66050000 		.4byte	.LASF90
 5350 064b 01       		.byte	0x1
 5351 064c 4003     		.2byte	0x340
 5352 064e C5030000 		.4byte	0x3c5
 5353 0652 34020000 		.4byte	.LLST12
 5354 0656 1C       		.uleb128 0x1c
 5355 0657 7800     		.ascii	"x\000"
 5356 0659 01       		.byte	0x1
 5357 065a 4103     		.2byte	0x341
 5358 065c CE010000 		.4byte	0x1ce
 5359 0660 73020000 		.4byte	.LLST13
 5360 0664 1D       		.uleb128 0x1d
 5361 0665 1A000000 		.4byte	.LVL25
 5362 0669 D11F0000 		.4byte	0x1fd1
 5363 066d 80060000 		.4byte	0x680
 5364 0671 1A       		.uleb128 0x1a
 5365 0672 01       		.uleb128 0x1
 5366 0673 51       		.byte	0x51
 5367 0674 02       		.uleb128 0x2
 5368 0675 08       		.byte	0x8
 5369 0676 A5       		.byte	0xa5
 5370 0677 1A       		.uleb128 0x1a
 5371 0678 01       		.uleb128 0x1
 5372 0679 52       		.byte	0x52
 5373 067a 04       		.uleb128 0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 195


 5374 067b 77       		.byte	0x77
 5375 067c 00       		.sleb128 0
 5376 067d 32       		.byte	0x32
 5377 067e 24       		.byte	0x24
 5378 067f 00       		.byte	0
 5379 0680 1D       		.uleb128 0x1d
 5380 0681 60000000 		.4byte	.LVL34
 5381 0685 DC1F0000 		.4byte	0x1fdc
 5382 0689 94060000 		.4byte	0x694
 5383 068d 1A       		.uleb128 0x1a
 5384 068e 01       		.uleb128 0x1
 5385 068f 50       		.byte	0x50
 5386 0690 02       		.uleb128 0x2
 5387 0691 76       		.byte	0x76
 5388 0692 04       		.sleb128 4
 5389 0693 00       		.byte	0
 5390 0694 1D       		.uleb128 0x1d
 5391 0695 68000000 		.4byte	.LVL35
 5392 0699 DC1F0000 		.4byte	0x1fdc
 5393 069d A8060000 		.4byte	0x6a8
 5394 06a1 1A       		.uleb128 0x1a
 5395 06a2 01       		.uleb128 0x1
 5396 06a3 50       		.byte	0x50
 5397 06a4 02       		.uleb128 0x2
 5398 06a5 76       		.byte	0x76
 5399 06a6 18       		.sleb128 24
 5400 06a7 00       		.byte	0
 5401 06a8 19       		.uleb128 0x19
 5402 06a9 9A000000 		.4byte	.LVL41
 5403 06ad E81F0000 		.4byte	0x1fe8
 5404 06b1 1A       		.uleb128 0x1a
 5405 06b2 01       		.uleb128 0x1
 5406 06b3 50       		.byte	0x50
 5407 06b4 02       		.uleb128 0x2
 5408 06b5 77       		.byte	0x77
 5409 06b6 00       		.sleb128 0
 5410 06b7 1A       		.uleb128 0x1a
 5411 06b8 01       		.uleb128 0x1
 5412 06b9 51       		.byte	0x51
 5413 06ba 03       		.uleb128 0x3
 5414 06bb 7D       		.byte	0x7d
 5415 06bc 00       		.sleb128 0
 5416 06bd 06       		.byte	0x6
 5417 06be 1A       		.uleb128 0x1a
 5418 06bf 01       		.uleb128 0x1
 5419 06c0 52       		.byte	0x52
 5420 06c1 03       		.uleb128 0x3
 5421 06c2 91       		.byte	0x91
 5422 06c3 64       		.sleb128 -28
 5423 06c4 06       		.byte	0x6
 5424 06c5 00       		.byte	0
 5425 06c6 00       		.byte	0
 5426 06c7 07       		.uleb128 0x7
 5427 06c8 D5000000 		.4byte	0xd5
 5428 06cc 07       		.uleb128 0x7
 5429 06cd A5000000 		.4byte	0xa5
 5430 06d1 06       		.uleb128 0x6
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 196


 5431 06d2 04       		.byte	0x4
 5432 06d3 D7020000 		.4byte	0x2d7
 5433 06d7 07       		.uleb128 0x7
 5434 06d8 D1060000 		.4byte	0x6d1
 5435 06dc 06       		.uleb128 0x6
 5436 06dd 04       		.byte	0x4
 5437 06de E2060000 		.4byte	0x6e2
 5438 06e2 07       		.uleb128 0x7
 5439 06e3 B5030000 		.4byte	0x3b5
 5440 06e7 07       		.uleb128 0x7
 5441 06e8 DC060000 		.4byte	0x6dc
 5442 06ec 17       		.uleb128 0x17
 5443 06ed 83100000 		.4byte	.LASF120
 5444 06f1 01       		.byte	0x1
 5445 06f2 6C0D     		.2byte	0xd6c
 5446 06f4 00000000 		.4byte	.LFB67
 5447 06f8 58000000 		.4byte	.LFE67-.LFB67
 5448 06fc 01       		.uleb128 0x1
 5449 06fd 9C       		.byte	0x9c
 5450 06fe 94070000 		.4byte	0x794
 5451 0702 16       		.uleb128 0x16
 5452 0703 5B110000 		.4byte	.LASF93
 5453 0707 01       		.byte	0x1
 5454 0708 6E0D     		.2byte	0xd6e
 5455 070a CE010000 		.4byte	0x1ce
 5456 070e A9020000 		.4byte	.LLST14
 5457 0712 1D       		.uleb128 0x1d
 5458 0713 16000000 		.4byte	.LVL47
 5459 0717 F31F0000 		.4byte	0x1ff3
 5460 071b 33070000 		.4byte	0x733
 5461 071f 1A       		.uleb128 0x1a
 5462 0720 01       		.uleb128 0x1
 5463 0721 50       		.byte	0x50
 5464 0722 0F       		.uleb128 0xf
 5465 0723 74       		.byte	0x74
 5466 0724 00       		.sleb128 0
 5467 0725 32       		.byte	0x32
 5468 0726 24       		.byte	0x24
 5469 0727 74       		.byte	0x74
 5470 0728 00       		.sleb128 0
 5471 0729 22       		.byte	0x22
 5472 072a 32       		.byte	0x32
 5473 072b 24       		.byte	0x24
 5474 072c 03       		.byte	0x3
 5475 072d 30000000 		.4byte	.LANCHOR0+48
 5476 0731 22       		.byte	0x22
 5477 0732 00       		.byte	0
 5478 0733 1D       		.uleb128 0x1d
 5479 0734 28000000 		.4byte	.LVL50
 5480 0738 F31F0000 		.4byte	0x1ff3
 5481 073c 47070000 		.4byte	0x747
 5482 0740 1A       		.uleb128 0x1a
 5483 0741 01       		.uleb128 0x1
 5484 0742 50       		.byte	0x50
 5485 0743 02       		.uleb128 0x2
 5486 0744 77       		.byte	0x77
 5487 0745 00       		.sleb128 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 197


 5488 0746 00       		.byte	0
 5489 0747 1D       		.uleb128 0x1d
 5490 0748 32000000 		.4byte	.LVL51
 5491 074c F31F0000 		.4byte	0x1ff3
 5492 0750 5B070000 		.4byte	0x75b
 5493 0754 1A       		.uleb128 0x1a
 5494 0755 01       		.uleb128 0x1
 5495 0756 50       		.byte	0x50
 5496 0757 02       		.uleb128 0x2
 5497 0758 76       		.byte	0x76
 5498 0759 00       		.sleb128 0
 5499 075a 00       		.byte	0
 5500 075b 1D       		.uleb128 0x1d
 5501 075c 3C000000 		.4byte	.LVL52
 5502 0760 F31F0000 		.4byte	0x1ff3
 5503 0764 6F070000 		.4byte	0x76f
 5504 0768 1A       		.uleb128 0x1a
 5505 0769 01       		.uleb128 0x1
 5506 076a 50       		.byte	0x50
 5507 076b 02       		.uleb128 0x2
 5508 076c 75       		.byte	0x75
 5509 076d 14       		.sleb128 20
 5510 076e 00       		.byte	0
 5511 076f 1D       		.uleb128 0x1d
 5512 0770 44000000 		.4byte	.LVL53
 5513 0774 F31F0000 		.4byte	0x1ff3
 5514 0778 83070000 		.4byte	0x783
 5515 077c 1A       		.uleb128 0x1a
 5516 077d 01       		.uleb128 0x1
 5517 077e 50       		.byte	0x50
 5518 077f 02       		.uleb128 0x2
 5519 0780 74       		.byte	0x74
 5520 0781 3C       		.sleb128 60
 5521 0782 00       		.byte	0
 5522 0783 19       		.uleb128 0x19
 5523 0784 4A000000 		.4byte	.LVL54
 5524 0788 F31F0000 		.4byte	0x1ff3
 5525 078c 1A       		.uleb128 0x1a
 5526 078d 01       		.uleb128 0x1
 5527 078e 50       		.byte	0x50
 5528 078f 02       		.uleb128 0x2
 5529 0790 75       		.byte	0x75
 5530 0791 00       		.sleb128 0
 5531 0792 00       		.byte	0
 5532 0793 00       		.byte	0
 5533 0794 17       		.uleb128 0x17
 5534 0795 51030000 		.4byte	.LASF121
 5535 0799 01       		.byte	0x1
 5536 079a 0304     		.2byte	0x403
 5537 079c 00000000 		.4byte	.LFB34
 5538 07a0 8C000000 		.4byte	.LFE34-.LFB34
 5539 07a4 01       		.uleb128 0x1
 5540 07a5 9C       		.byte	0x9c
 5541 07a6 F3070000 		.4byte	0x7f3
 5542 07aa 15       		.uleb128 0x15
 5543 07ab 66020000 		.4byte	.LASF118
 5544 07af 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 198


 5545 07b0 0304     		.2byte	0x403
 5546 07b2 6D050000 		.4byte	0x56d
 5547 07b6 C8020000 		.4byte	.LLST15
 5548 07ba 18       		.uleb128 0x18
 5549 07bb 08000000 		.4byte	.LVL56
 5550 07bf FF1F0000 		.4byte	0x1fff
 5551 07c3 18       		.uleb128 0x18
 5552 07c4 24000000 		.4byte	.LVL57
 5553 07c8 EC060000 		.4byte	0x6ec
 5554 07cc 1D       		.uleb128 0x1d
 5555 07cd 64000000 		.4byte	.LVL58
 5556 07d1 0A200000 		.4byte	0x200a
 5557 07d5 E0070000 		.4byte	0x7e0
 5558 07d9 1A       		.uleb128 0x1a
 5559 07da 01       		.uleb128 0x1
 5560 07db 51       		.byte	0x51
 5561 07dc 02       		.uleb128 0x2
 5562 07dd 74       		.byte	0x74
 5563 07de 04       		.sleb128 4
 5564 07df 00       		.byte	0
 5565 07e0 18       		.uleb128 0x18
 5566 07e1 68000000 		.4byte	.LVL59
 5567 07e5 16200000 		.4byte	0x2016
 5568 07e9 18       		.uleb128 0x18
 5569 07ea 80000000 		.4byte	.LVL60
 5570 07ee 21200000 		.4byte	0x2021
 5571 07f2 00       		.byte	0
 5572 07f3 17       		.uleb128 0x17
 5573 07f4 A10D0000 		.4byte	.LASF122
 5574 07f8 01       		.byte	0x1
 5575 07f9 8C0D     		.2byte	0xd8c
 5576 07fb 00000000 		.4byte	.LFB68
 5577 07ff 38000000 		.4byte	.LFE68-.LFB68
 5578 0803 01       		.uleb128 0x1
 5579 0804 9C       		.byte	0x9c
 5580 0805 5A080000 		.4byte	0x85a
 5581 0809 1E       		.uleb128 0x1e
 5582 080a 02000000 		.4byte	.LBB2
 5583 080e 30000000 		.4byte	.LBE2-.LBB2
 5584 0812 16       		.uleb128 0x16
 5585 0813 55110000 		.4byte	.LASF104
 5586 0817 01       		.byte	0x1
 5587 0818 930D     		.2byte	0xd93
 5588 081a 6D050000 		.4byte	0x56d
 5589 081e F4020000 		.4byte	.LLST16
 5590 0822 18       		.uleb128 0x18
 5591 0823 08000000 		.4byte	.LVL62
 5592 0827 FF1F0000 		.4byte	0x1fff
 5593 082b 1D       		.uleb128 0x1d
 5594 082c 14000000 		.4byte	.LVL64
 5595 0830 2C200000 		.4byte	0x202c
 5596 0834 3F080000 		.4byte	0x83f
 5597 0838 1A       		.uleb128 0x1a
 5598 0839 01       		.uleb128 0x1
 5599 083a 50       		.byte	0x50
 5600 083b 02       		.uleb128 0x2
 5601 083c 75       		.byte	0x75
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 199


 5602 083d 04       		.sleb128 4
 5603 083e 00       		.byte	0
 5604 083f 18       		.uleb128 0x18
 5605 0840 24000000 		.4byte	.LVL65
 5606 0844 16200000 		.4byte	0x2016
 5607 0848 19       		.uleb128 0x19
 5608 0849 2A000000 		.4byte	.LVL66
 5609 084d 73050000 		.4byte	0x573
 5610 0851 1A       		.uleb128 0x1a
 5611 0852 01       		.uleb128 0x1
 5612 0853 50       		.byte	0x50
 5613 0854 02       		.uleb128 0x2
 5614 0855 75       		.byte	0x75
 5615 0856 00       		.sleb128 0
 5616 0857 00       		.byte	0
 5617 0858 00       		.byte	0
 5618 0859 00       		.byte	0
 5619 085a 1F       		.uleb128 0x1f
 5620 085b F5080000 		.4byte	.LASF123
 5621 085f 01       		.byte	0x1
 5622 0860 980C     		.2byte	0xc98
 5623 0862 00000000 		.4byte	.LFB64
 5624 0866 08000000 		.4byte	.LFE64-.LFB64
 5625 086a 01       		.uleb128 0x1
 5626 086b 9C       		.byte	0x9c
 5627 086c 8A080000 		.4byte	0x88a
 5628 0870 15       		.uleb128 0x15
 5629 0871 DB0F0000 		.4byte	.LASF116
 5630 0875 01       		.byte	0x1
 5631 0876 980C     		.2byte	0xc98
 5632 0878 A5000000 		.4byte	0xa5
 5633 087c 07030000 		.4byte	.LLST17
 5634 0880 18       		.uleb128 0x18
 5635 0881 06000000 		.4byte	.LVL69
 5636 0885 F3070000 		.4byte	0x7f3
 5637 0889 00       		.byte	0
 5638 088a 17       		.uleb128 0x17
 5639 088b 210D0000 		.4byte	.LASF124
 5640 088f 01       		.byte	0x1
 5641 0890 2D13     		.2byte	0x132d
 5642 0892 00000000 		.4byte	.LFB86
 5643 0896 64000000 		.4byte	.LFE86-.LFB86
 5644 089a 01       		.uleb128 0x1
 5645 089b 9C       		.byte	0x9c
 5646 089c 13090000 		.4byte	0x913
 5647 08a0 15       		.uleb128 0x15
 5648 08a1 DF0A0000 		.4byte	.LASF125
 5649 08a5 01       		.byte	0x1
 5650 08a6 2D13     		.2byte	0x132d
 5651 08a8 D9010000 		.4byte	0x1d9
 5652 08ac 28030000 		.4byte	.LLST18
 5653 08b0 15       		.uleb128 0x15
 5654 08b1 8E000000 		.4byte	.LASF126
 5655 08b5 01       		.byte	0x1
 5656 08b6 2D13     		.2byte	0x132d
 5657 08b8 13090000 		.4byte	0x913
 5658 08bc 54030000 		.4byte	.LLST19
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 200


 5659 08c0 16       		.uleb128 0x16
 5660 08c1 E0090000 		.4byte	.LASF127
 5661 08c5 01       		.byte	0x1
 5662 08c6 2F13     		.2byte	0x132f
 5663 08c8 D9010000 		.4byte	0x1d9
 5664 08cc 80030000 		.4byte	.LLST20
 5665 08d0 16       		.uleb128 0x16
 5666 08d1 3D0B0000 		.4byte	.LASF128
 5667 08d5 01       		.byte	0x1
 5668 08d6 3013     		.2byte	0x1330
 5669 08d8 18090000 		.4byte	0x918
 5670 08dc 93030000 		.4byte	.LLST21
 5671 08e0 18       		.uleb128 0x18
 5672 08e1 12000000 		.4byte	.LVL73
 5673 08e5 2C200000 		.4byte	0x202c
 5674 08e9 1D       		.uleb128 0x1d
 5675 08ea 26000000 		.4byte	.LVL74
 5676 08ee 0A200000 		.4byte	0x200a
 5677 08f2 00090000 		.4byte	0x900
 5678 08f6 1A       		.uleb128 0x1a
 5679 08f7 01       		.uleb128 0x1
 5680 08f8 50       		.byte	0x50
 5681 08f9 05       		.uleb128 0x5
 5682 08fa 03       		.byte	0x3
 5683 08fb 00000000 		.4byte	.LANCHOR0
 5684 08ff 00       		.byte	0
 5685 0900 18       		.uleb128 0x18
 5686 0901 40000000 		.4byte	.LVL76
 5687 0905 38200000 		.4byte	0x2038
 5688 0909 18       		.uleb128 0x18
 5689 090a 50000000 		.4byte	.LVL78
 5690 090e 38200000 		.4byte	0x2038
 5691 0912 00       		.byte	0
 5692 0913 07       		.uleb128 0x7
 5693 0914 C3010000 		.4byte	0x1c3
 5694 0918 07       		.uleb128 0x7
 5695 0919 D9010000 		.4byte	0x1d9
 5696 091d 20       		.uleb128 0x20
 5697 091e FB0A0000 		.4byte	.LASF131
 5698 0922 01       		.byte	0x1
 5699 0923 DC02     		.2byte	0x2dc
 5700 0925 C3010000 		.4byte	0x1c3
 5701 0929 00000000 		.4byte	.LFB32
 5702 092d 5E000000 		.4byte	.LFE32-.LFB32
 5703 0931 01       		.uleb128 0x1
 5704 0932 9C       		.byte	0x9c
 5705 0933 630A0000 		.4byte	0xa63
 5706 0937 15       		.uleb128 0x15
 5707 0938 08010000 		.4byte	.LASF113
 5708 093c 01       		.byte	0x1
 5709 093d DC02     		.2byte	0x2dc
 5710 093f 9C010000 		.4byte	0x19c
 5711 0943 A6030000 		.4byte	.LLST22
 5712 0947 15       		.uleb128 0x15
 5713 0948 8B030000 		.4byte	.LASF114
 5714 094c 01       		.byte	0x1
 5715 094d DD02     		.2byte	0x2dd
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 201


 5716 094f C0030000 		.4byte	0x3c0
 5717 0953 C5030000 		.4byte	.LLST23
 5718 0957 15       		.uleb128 0x15
 5719 0958 5B000000 		.4byte	.LASF129
 5720 095c 01       		.byte	0x1
 5721 095d DE02     		.2byte	0x2de
 5722 095f 630A0000 		.4byte	0xa63
 5723 0963 E4030000 		.4byte	.LLST24
 5724 0967 15       		.uleb128 0x15
 5725 0968 DB0F0000 		.4byte	.LASF116
 5726 096c 01       		.byte	0x1
 5727 096d DF02     		.2byte	0x2df
 5728 096f CC060000 		.4byte	0x6cc
 5729 0973 05040000 		.4byte	.LLST25
 5730 0977 1B       		.uleb128 0x1b
 5731 0978 5B110000 		.4byte	.LASF93
 5732 097c 01       		.byte	0x1
 5733 097d E002     		.2byte	0x2e0
 5734 097f CE010000 		.4byte	0x1ce
 5735 0983 02       		.uleb128 0x2
 5736 0984 91       		.byte	0x91
 5737 0985 00       		.sleb128 0
 5738 0986 1B       		.uleb128 0x1b
 5739 0987 1C070000 		.4byte	.LASF117
 5740 098b 01       		.byte	0x1
 5741 098c E102     		.2byte	0x2e1
 5742 098e D7060000 		.4byte	0x6d7
 5743 0992 02       		.uleb128 0x2
 5744 0993 91       		.byte	0x91
 5745 0994 04       		.sleb128 4
 5746 0995 16       		.uleb128 0x16
 5747 0996 66020000 		.4byte	.LASF118
 5748 099a 01       		.byte	0x1
 5749 099b E302     		.2byte	0x2e3
 5750 099d 6D050000 		.4byte	0x56d
 5751 09a1 31040000 		.4byte	.LLST26
 5752 09a5 16       		.uleb128 0x16
 5753 09a6 A9040000 		.4byte	.LASF103
 5754 09aa 01       		.byte	0x1
 5755 09ab E402     		.2byte	0x2e4
 5756 09ad C3010000 		.4byte	0x1c3
 5757 09b1 5A040000 		.4byte	.LLST27
 5758 09b5 21       		.uleb128 0x21
 5759 09b6 0C000000 		.4byte	.LBB3
 5760 09ba 22000000 		.4byte	.LBE3-.LBB3
 5761 09be 0D0A0000 		.4byte	0xa0d
 5762 09c2 16       		.uleb128 0x16
 5763 09c3 50010000 		.4byte	.LASF94
 5764 09c7 01       		.byte	0x1
 5765 09c8 0103     		.2byte	0x301
 5766 09ca C5030000 		.4byte	0x3c5
 5767 09ce 79040000 		.4byte	.LLST28
 5768 09d2 1D       		.uleb128 0x1d
 5769 09d3 12000000 		.4byte	.LVL83
 5770 09d7 44200000 		.4byte	0x2044
 5771 09db E8090000 		.4byte	0x9e8
 5772 09df 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 202


 5773 09e0 01       		.uleb128 0x1
 5774 09e1 50       		.byte	0x50
 5775 09e2 04       		.uleb128 0x4
 5776 09e3 74       		.byte	0x74
 5777 09e4 00       		.sleb128 0
 5778 09e5 32       		.byte	0x32
 5779 09e6 24       		.byte	0x24
 5780 09e7 00       		.byte	0
 5781 09e8 1D       		.uleb128 0x1d
 5782 09e9 1C000000 		.4byte	.LVL86
 5783 09ed 44200000 		.4byte	0x2044
 5784 09f1 FC090000 		.4byte	0x9fc
 5785 09f5 1A       		.uleb128 0x1a
 5786 09f6 01       		.uleb128 0x1
 5787 09f7 50       		.byte	0x50
 5788 09f8 02       		.uleb128 0x2
 5789 09f9 08       		.byte	0x8
 5790 09fa 68       		.byte	0x68
 5791 09fb 00       		.byte	0
 5792 09fc 19       		.uleb128 0x19
 5793 09fd 2A000000 		.4byte	.LVL89
 5794 0a01 C61F0000 		.4byte	0x1fc6
 5795 0a05 1A       		.uleb128 0x1a
 5796 0a06 01       		.uleb128 0x1
 5797 0a07 50       		.byte	0x50
 5798 0a08 02       		.uleb128 0x2
 5799 0a09 76       		.byte	0x76
 5800 0a0a 00       		.sleb128 0
 5801 0a0b 00       		.byte	0
 5802 0a0c 00       		.byte	0
 5803 0a0d 1D       		.uleb128 0x1d
 5804 0a0e 4C000000 		.4byte	.LVL92
 5805 0a12 B3050000 		.4byte	0x5b3
 5806 0a16 520A0000 		.4byte	0xa52
 5807 0a1a 1A       		.uleb128 0x1a
 5808 0a1b 01       		.uleb128 0x1
 5809 0a1c 50       		.byte	0x50
 5810 0a1d 03       		.uleb128 0x3
 5811 0a1e 91       		.byte	0x91
 5812 0a1f 60       		.sleb128 -32
 5813 0a20 06       		.byte	0x6
 5814 0a21 1A       		.uleb128 0x1a
 5815 0a22 01       		.uleb128 0x1
 5816 0a23 51       		.byte	0x51
 5817 0a24 03       		.uleb128 0x3
 5818 0a25 91       		.byte	0x91
 5819 0a26 64       		.sleb128 -28
 5820 0a27 06       		.byte	0x6
 5821 0a28 1A       		.uleb128 0x1a
 5822 0a29 01       		.uleb128 0x1
 5823 0a2a 52       		.byte	0x52
 5824 0a2b 02       		.uleb128 0x2
 5825 0a2c 74       		.byte	0x74
 5826 0a2d 00       		.sleb128 0
 5827 0a2e 1A       		.uleb128 0x1a
 5828 0a2f 01       		.uleb128 0x1
 5829 0a30 53       		.byte	0x53
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 203


 5830 0a31 02       		.uleb128 0x2
 5831 0a32 77       		.byte	0x77
 5832 0a33 00       		.sleb128 0
 5833 0a34 1A       		.uleb128 0x1a
 5834 0a35 02       		.uleb128 0x2
 5835 0a36 7D       		.byte	0x7d
 5836 0a37 00       		.sleb128 0
 5837 0a38 03       		.uleb128 0x3
 5838 0a39 91       		.byte	0x91
 5839 0a3a 00       		.sleb128 0
 5840 0a3b 06       		.byte	0x6
 5841 0a3c 1A       		.uleb128 0x1a
 5842 0a3d 02       		.uleb128 0x2
 5843 0a3e 7D       		.byte	0x7d
 5844 0a3f 04       		.sleb128 4
 5845 0a40 03       		.uleb128 0x3
 5846 0a41 91       		.byte	0x91
 5847 0a42 04       		.sleb128 4
 5848 0a43 06       		.byte	0x6
 5849 0a44 1A       		.uleb128 0x1a
 5850 0a45 02       		.uleb128 0x2
 5851 0a46 7D       		.byte	0x7d
 5852 0a47 08       		.sleb128 8
 5853 0a48 02       		.uleb128 0x2
 5854 0a49 75       		.byte	0x75
 5855 0a4a 00       		.sleb128 0
 5856 0a4b 1A       		.uleb128 0x1a
 5857 0a4c 02       		.uleb128 0x2
 5858 0a4d 7D       		.byte	0x7d
 5859 0a4e 0C       		.sleb128 12
 5860 0a4f 01       		.uleb128 0x1
 5861 0a50 30       		.byte	0x30
 5862 0a51 00       		.byte	0
 5863 0a52 19       		.uleb128 0x19
 5864 0a53 52000000 		.4byte	.LVL93
 5865 0a57 94070000 		.4byte	0x794
 5866 0a5b 1A       		.uleb128 0x1a
 5867 0a5c 01       		.uleb128 0x1
 5868 0a5d 50       		.byte	0x50
 5869 0a5e 02       		.uleb128 0x2
 5870 0a5f 75       		.byte	0x75
 5871 0a60 00       		.sleb128 0
 5872 0a61 00       		.byte	0
 5873 0a62 00       		.byte	0
 5874 0a63 07       		.uleb128 0x7
 5875 0a64 CA000000 		.4byte	0xca
 5876 0a68 22       		.uleb128 0x22
 5877 0a69 14060000 		.4byte	.LASF139
 5878 0a6d 01       		.byte	0x1
 5879 0a6e 5804     		.2byte	0x458
 5880 0a70 00000000 		.4byte	.LFB35
 5881 0a74 78000000 		.4byte	.LFE35-.LFB35
 5882 0a78 01       		.uleb128 0x1
 5883 0a79 9C       		.byte	0x9c
 5884 0a7a 190B0000 		.4byte	0xb19
 5885 0a7e 15       		.uleb128 0x15
 5886 0a7f 50100000 		.4byte	.LASF130
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 204


 5887 0a83 01       		.byte	0x1
 5888 0a84 5804     		.2byte	0x458
 5889 0a86 D7020000 		.4byte	0x2d7
 5890 0a8a AD040000 		.4byte	.LLST29
 5891 0a8e 16       		.uleb128 0x16
 5892 0a8f 55110000 		.4byte	.LASF104
 5893 0a93 01       		.byte	0x1
 5894 0a94 5A04     		.2byte	0x45a
 5895 0a96 6D050000 		.4byte	0x56d
 5896 0a9a CB040000 		.4byte	.LLST30
 5897 0a9e 18       		.uleb128 0x18
 5898 0a9f 08000000 		.4byte	.LVL100
 5899 0aa3 FF1F0000 		.4byte	0x1fff
 5900 0aa7 1D       		.uleb128 0x1d
 5901 0aa8 18000000 		.4byte	.LVL102
 5902 0aac 2C200000 		.4byte	0x202c
 5903 0ab0 BB0A0000 		.4byte	0xabb
 5904 0ab4 1A       		.uleb128 0x1a
 5905 0ab5 01       		.uleb128 0x1
 5906 0ab6 50       		.byte	0x50
 5907 0ab7 02       		.uleb128 0x2
 5908 0ab8 75       		.byte	0x75
 5909 0ab9 00       		.sleb128 0
 5910 0aba 00       		.byte	0
 5911 0abb 1D       		.uleb128 0x1d
 5912 0abc 26000000 		.4byte	.LVL103
 5913 0ac0 2C200000 		.4byte	0x202c
 5914 0ac4 CF0A0000 		.4byte	0xacf
 5915 0ac8 1A       		.uleb128 0x1a
 5916 0ac9 01       		.uleb128 0x1
 5917 0aca 50       		.byte	0x50
 5918 0acb 02       		.uleb128 0x2
 5919 0acc 74       		.byte	0x74
 5920 0acd 18       		.sleb128 24
 5921 0ace 00       		.byte	0
 5922 0acf 1D       		.uleb128 0x1d
 5923 0ad0 40000000 		.4byte	.LVL104
 5924 0ad4 0A200000 		.4byte	0x200a
 5925 0ad8 E90A0000 		.4byte	0xae9
 5926 0adc 1A       		.uleb128 0x1a
 5927 0add 01       		.uleb128 0x1
 5928 0ade 50       		.byte	0x50
 5929 0adf 02       		.uleb128 0x2
 5930 0ae0 76       		.byte	0x76
 5931 0ae1 3C       		.sleb128 60
 5932 0ae2 1A       		.uleb128 0x1a
 5933 0ae3 01       		.uleb128 0x1
 5934 0ae4 51       		.byte	0x51
 5935 0ae5 02       		.uleb128 0x2
 5936 0ae6 75       		.byte	0x75
 5937 0ae7 00       		.sleb128 0
 5938 0ae8 00       		.byte	0
 5939 0ae9 1D       		.uleb128 0x1d
 5940 0aea 56000000 		.4byte	.LVL105
 5941 0aee 73050000 		.4byte	0x573
 5942 0af2 FD0A0000 		.4byte	0xafd
 5943 0af6 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 205


 5944 0af7 01       		.uleb128 0x1
 5945 0af8 50       		.byte	0x50
 5946 0af9 02       		.uleb128 0x2
 5947 0afa 74       		.byte	0x74
 5948 0afb 00       		.sleb128 0
 5949 0afc 00       		.byte	0
 5950 0afd 18       		.uleb128 0x18
 5951 0afe 5A000000 		.4byte	.LVL106
 5952 0b02 46050000 		.4byte	0x546
 5953 0b06 18       		.uleb128 0x18
 5954 0b07 5E000000 		.4byte	.LVL107
 5955 0b0b 16200000 		.4byte	0x2016
 5956 0b0f 18       		.uleb128 0x18
 5957 0b10 72000000 		.4byte	.LVL108
 5958 0b14 21200000 		.4byte	0x2021
 5959 0b18 00       		.byte	0
 5960 0b19 20       		.uleb128 0x20
 5961 0b1a C10D0000 		.4byte	.LASF132
 5962 0b1e 01       		.byte	0x1
 5963 0b1f 3505     		.2byte	0x535
 5964 0b21 13030000 		.4byte	0x313
 5965 0b25 00000000 		.4byte	.LFB38
 5966 0b29 68000000 		.4byte	.LFE38-.LFB38
 5967 0b2d 01       		.uleb128 0x1
 5968 0b2e 9C       		.byte	0x9c
 5969 0b2f 840B0000 		.4byte	0xb84
 5970 0b33 15       		.uleb128 0x15
 5971 0b34 43020000 		.4byte	.LASF107
 5972 0b38 01       		.byte	0x1
 5973 0b39 3505     		.2byte	0x535
 5974 0b3b D7020000 		.4byte	0x2d7
 5975 0b3f EB040000 		.4byte	.LLST31
 5976 0b43 23       		.uleb128 0x23
 5977 0b44 08110000 		.4byte	.LASF133
 5978 0b48 01       		.byte	0x1
 5979 0b49 3705     		.2byte	0x537
 5980 0b4b 13030000 		.4byte	0x313
 5981 0b4f 01       		.uleb128 0x1
 5982 0b50 50       		.byte	0x50
 5983 0b51 16       		.uleb128 0x16
 5984 0b52 56070000 		.4byte	.LASF134
 5985 0b56 01       		.byte	0x1
 5986 0b57 3805     		.2byte	0x538
 5987 0b59 840B0000 		.4byte	0xb84
 5988 0b5d 2D050000 		.4byte	.LLST32
 5989 0b61 16       		.uleb128 0x16
 5990 0b62 55110000 		.4byte	.LASF104
 5991 0b66 01       		.byte	0x1
 5992 0b67 3905     		.2byte	0x539
 5993 0b69 FB040000 		.4byte	0x4fb
 5994 0b6d 4B050000 		.4byte	.LLST33
 5995 0b71 18       		.uleb128 0x18
 5996 0b72 10000000 		.4byte	.LVL113
 5997 0b76 FF1F0000 		.4byte	0x1fff
 5998 0b7a 18       		.uleb128 0x18
 5999 0b7b 16000000 		.4byte	.LVL115
 6000 0b7f 16200000 		.4byte	0x2016
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 206


 6001 0b83 00       		.byte	0
 6002 0b84 06       		.uleb128 0x6
 6003 0b85 04       		.byte	0x4
 6004 0b86 CC020000 		.4byte	0x2cc
 6005 0b8a 20       		.uleb128 0x20
 6006 0b8b 820B0000 		.4byte	.LASF135
 6007 0b8f 01       		.byte	0x1
 6008 0b90 7C05     		.2byte	0x57c
 6009 0b92 CE010000 		.4byte	0x1ce
 6010 0b96 00000000 		.4byte	.LFB39
 6011 0b9a 20000000 		.4byte	.LFE39-.LFB39
 6012 0b9e 01       		.uleb128 0x1
 6013 0b9f 9C       		.byte	0x9c
 6014 0ba0 E70B0000 		.4byte	0xbe7
 6015 0ba4 15       		.uleb128 0x15
 6016 0ba5 43020000 		.4byte	.LASF107
 6017 0ba9 01       		.byte	0x1
 6018 0baa 7C05     		.2byte	0x57c
 6019 0bac D7020000 		.4byte	0x2d7
 6020 0bb0 8D050000 		.4byte	.LLST34
 6021 0bb4 16       		.uleb128 0x16
 6022 0bb5 55110000 		.4byte	.LASF104
 6023 0bb9 01       		.byte	0x1
 6024 0bba 7E05     		.2byte	0x57e
 6025 0bbc 6D050000 		.4byte	0x56d
 6026 0bc0 AB050000 		.4byte	.LLST35
 6027 0bc4 16       		.uleb128 0x16
 6028 0bc5 49020000 		.4byte	.LASF136
 6029 0bc9 01       		.byte	0x1
 6030 0bca 7F05     		.2byte	0x57f
 6031 0bcc CE010000 		.4byte	0x1ce
 6032 0bd0 BE050000 		.4byte	.LLST36
 6033 0bd4 18       		.uleb128 0x18
 6034 0bd5 08000000 		.4byte	.LVL122
 6035 0bd9 FF1F0000 		.4byte	0x1fff
 6036 0bdd 18       		.uleb128 0x18
 6037 0bde 16000000 		.4byte	.LVL125
 6038 0be2 16200000 		.4byte	0x2016
 6039 0be6 00       		.byte	0
 6040 0be7 20       		.uleb128 0x20
 6041 0be8 E80F0000 		.4byte	.LASF137
 6042 0bec 01       		.byte	0x1
 6043 0bed 9205     		.2byte	0x592
 6044 0bef CE010000 		.4byte	0x1ce
 6045 0bf3 00000000 		.4byte	.LFB40
 6046 0bf7 20000000 		.4byte	.LFE40-.LFB40
 6047 0bfb 01       		.uleb128 0x1
 6048 0bfc 9C       		.byte	0x9c
 6049 0bfd 540C0000 		.4byte	0xc54
 6050 0c01 15       		.uleb128 0x15
 6051 0c02 43020000 		.4byte	.LASF107
 6052 0c06 01       		.byte	0x1
 6053 0c07 9205     		.2byte	0x592
 6054 0c09 D7020000 		.4byte	0x2d7
 6055 0c0d DC050000 		.4byte	.LLST37
 6056 0c11 16       		.uleb128 0x16
 6057 0c12 55110000 		.4byte	.LASF104
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 207


 6058 0c16 01       		.byte	0x1
 6059 0c17 9405     		.2byte	0x594
 6060 0c19 6D050000 		.4byte	0x56d
 6061 0c1d FA050000 		.4byte	.LLST38
 6062 0c21 16       		.uleb128 0x16
 6063 0c22 49020000 		.4byte	.LASF136
 6064 0c26 01       		.byte	0x1
 6065 0c27 9505     		.2byte	0x595
 6066 0c29 CE010000 		.4byte	0x1ce
 6067 0c2d 0D060000 		.4byte	.LLST39
 6068 0c31 16       		.uleb128 0x16
 6069 0c32 13010000 		.4byte	.LASF138
 6070 0c36 01       		.byte	0x1
 6071 0c37 9505     		.2byte	0x595
 6072 0c39 CE010000 		.4byte	0x1ce
 6073 0c3d 2B060000 		.4byte	.LLST40
 6074 0c41 18       		.uleb128 0x18
 6075 0c42 08000000 		.4byte	.LVL128
 6076 0c46 4F200000 		.4byte	0x204f
 6077 0c4a 18       		.uleb128 0x18
 6078 0c4b 16000000 		.4byte	.LVL131
 6079 0c4f 5A200000 		.4byte	0x205a
 6080 0c53 00       		.byte	0
 6081 0c54 22       		.uleb128 0x22
 6082 0c55 8E070000 		.4byte	.LASF140
 6083 0c59 01       		.byte	0x1
 6084 0c5a BA05     		.2byte	0x5ba
 6085 0c5c 00000000 		.4byte	.LFB41
 6086 0c60 BC000000 		.4byte	.LFE41-.LFB41
 6087 0c64 01       		.uleb128 0x1
 6088 0c65 9C       		.byte	0x9c
 6089 0c66 0E0D0000 		.4byte	0xd0e
 6090 0c6a 15       		.uleb128 0x15
 6091 0c6b 43020000 		.4byte	.LASF107
 6092 0c6f 01       		.byte	0x1
 6093 0c70 BA05     		.2byte	0x5ba
 6094 0c72 D7020000 		.4byte	0x2d7
 6095 0c76 3E060000 		.4byte	.LLST41
 6096 0c7a 15       		.uleb128 0x15
 6097 0c7b 3F0F0000 		.4byte	.LASF141
 6098 0c7f 01       		.byte	0x1
 6099 0c80 BA05     		.2byte	0x5ba
 6100 0c82 CE010000 		.4byte	0x1ce
 6101 0c86 5C060000 		.4byte	.LLST42
 6102 0c8a 16       		.uleb128 0x16
 6103 0c8b 55110000 		.4byte	.LASF104
 6104 0c8f 01       		.byte	0x1
 6105 0c90 BC05     		.2byte	0x5bc
 6106 0c92 6D050000 		.4byte	0x56d
 6107 0c96 87060000 		.4byte	.LLST43
 6108 0c9a 16       		.uleb128 0x16
 6109 0c9b C2020000 		.4byte	.LASF142
 6110 0c9f 01       		.byte	0x1
 6111 0ca0 BD05     		.2byte	0x5bd
 6112 0ca2 CE010000 		.4byte	0x1ce
 6113 0ca6 9A060000 		.4byte	.LLST44
 6114 0caa 16       		.uleb128 0x16
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 208


 6115 0cab 58080000 		.4byte	.LASF143
 6116 0caf 01       		.byte	0x1
 6117 0cb0 BD05     		.2byte	0x5bd
 6118 0cb2 CE010000 		.4byte	0x1ce
 6119 0cb6 AD060000 		.4byte	.LLST45
 6120 0cba 16       		.uleb128 0x16
 6121 0cbb 3D090000 		.4byte	.LASF144
 6122 0cbf 01       		.byte	0x1
 6123 0cc0 BE05     		.2byte	0x5be
 6124 0cc2 C3010000 		.4byte	0x1c3
 6125 0cc6 C0060000 		.4byte	.LLST46
 6126 0cca 18       		.uleb128 0x18
 6127 0ccb 10000000 		.4byte	.LVL136
 6128 0ccf FF1F0000 		.4byte	0x1fff
 6129 0cd3 1D       		.uleb128 0x1d
 6130 0cd4 86000000 		.4byte	.LVL144
 6131 0cd8 2C200000 		.4byte	0x202c
 6132 0cdc E70C0000 		.4byte	0xce7
 6133 0ce0 1A       		.uleb128 0x1a
 6134 0ce1 01       		.uleb128 0x1
 6135 0ce2 50       		.byte	0x50
 6136 0ce3 02       		.uleb128 0x2
 6137 0ce4 75       		.byte	0x75
 6138 0ce5 00       		.sleb128 0
 6139 0ce6 00       		.byte	0
 6140 0ce7 1D       		.uleb128 0x1d
 6141 0ce8 A6000000 		.4byte	.LVL145
 6142 0cec 0A200000 		.4byte	0x200a
 6143 0cf0 FB0C0000 		.4byte	0xcfb
 6144 0cf4 1A       		.uleb128 0x1a
 6145 0cf5 01       		.uleb128 0x1
 6146 0cf6 51       		.byte	0x51
 6147 0cf7 02       		.uleb128 0x2
 6148 0cf8 75       		.byte	0x75
 6149 0cf9 00       		.sleb128 0
 6150 0cfa 00       		.byte	0
 6151 0cfb 18       		.uleb128 0x18
 6152 0cfc AE000000 		.4byte	.LVL146
 6153 0d00 21200000 		.4byte	0x2021
 6154 0d04 18       		.uleb128 0x18
 6155 0d05 B2000000 		.4byte	.LVL147
 6156 0d09 16200000 		.4byte	0x2016
 6157 0d0d 00       		.byte	0
 6158 0d0e 22       		.uleb128 0x22
 6159 0d0f 58010000 		.4byte	.LASF145
 6160 0d13 01       		.byte	0x1
 6161 0d14 F106     		.2byte	0x6f1
 6162 0d16 00000000 		.4byte	.LFB44
 6163 0d1a 64000000 		.4byte	.LFE44-.LFB44
 6164 0d1e 01       		.uleb128 0x1
 6165 0d1f 9C       		.byte	0x9c
 6166 0d20 9C0D0000 		.4byte	0xd9c
 6167 0d24 15       		.uleb128 0x15
 6168 0d25 48070000 		.4byte	.LASF146
 6169 0d29 01       		.byte	0x1
 6170 0d2a F106     		.2byte	0x6f1
 6171 0d2c D7020000 		.4byte	0x2d7
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 209


 6172 0d30 DF060000 		.4byte	.LLST47
 6173 0d34 16       		.uleb128 0x16
 6174 0d35 55110000 		.4byte	.LASF104
 6175 0d39 01       		.byte	0x1
 6176 0d3a F306     		.2byte	0x6f3
 6177 0d3c 9C0D0000 		.4byte	0xd9c
 6178 0d40 0B070000 		.4byte	.LLST48
 6179 0d44 18       		.uleb128 0x18
 6180 0d45 12000000 		.4byte	.LVL151
 6181 0d49 FF1F0000 		.4byte	0x1fff
 6182 0d4d 1D       		.uleb128 0x1d
 6183 0d4e 18000000 		.4byte	.LVL152
 6184 0d52 A0040000 		.4byte	0x4a0
 6185 0d56 610D0000 		.4byte	0xd61
 6186 0d5a 1A       		.uleb128 0x1a
 6187 0d5b 01       		.uleb128 0x1
 6188 0d5c 50       		.byte	0x50
 6189 0d5d 02       		.uleb128 0x2
 6190 0d5e 74       		.byte	0x74
 6191 0d5f 00       		.sleb128 0
 6192 0d60 00       		.byte	0
 6193 0d61 1D       		.uleb128 0x1d
 6194 0d62 24000000 		.4byte	.LVL153
 6195 0d66 2C200000 		.4byte	0x202c
 6196 0d6a 750D0000 		.4byte	0xd75
 6197 0d6e 1A       		.uleb128 0x1a
 6198 0d6f 01       		.uleb128 0x1
 6199 0d70 50       		.byte	0x50
 6200 0d71 02       		.uleb128 0x2
 6201 0d72 75       		.byte	0x75
 6202 0d73 00       		.sleb128 0
 6203 0d74 00       		.byte	0
 6204 0d75 1D       		.uleb128 0x1d
 6205 0d76 44000000 		.4byte	.LVL154
 6206 0d7a 0A200000 		.4byte	0x200a
 6207 0d7e 890D0000 		.4byte	0xd89
 6208 0d82 1A       		.uleb128 0x1a
 6209 0d83 01       		.uleb128 0x1
 6210 0d84 51       		.byte	0x51
 6211 0d85 02       		.uleb128 0x2
 6212 0d86 75       		.byte	0x75
 6213 0d87 00       		.sleb128 0
 6214 0d88 00       		.byte	0
 6215 0d89 18       		.uleb128 0x18
 6216 0d8a 54000000 		.4byte	.LVL155
 6217 0d8e 21200000 		.4byte	0x2021
 6218 0d92 18       		.uleb128 0x18
 6219 0d93 58000000 		.4byte	.LVL156
 6220 0d97 16200000 		.4byte	0x2016
 6221 0d9b 00       		.byte	0
 6222 0d9c 07       		.uleb128 0x7
 6223 0d9d 6D050000 		.4byte	0x56d
 6224 0da1 20       		.uleb128 0x20
 6225 0da2 42060000 		.4byte	.LASF147
 6226 0da6 01       		.byte	0x1
 6227 0da7 2707     		.2byte	0x727
 6228 0da9 C3010000 		.4byte	0x1c3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 210


 6229 0dad 00000000 		.4byte	.LFB45
 6230 0db1 7C000000 		.4byte	.LFE45-.LFB45
 6231 0db5 01       		.uleb128 0x1
 6232 0db6 9C       		.byte	0x9c
 6233 0db7 6E0E0000 		.4byte	0xe6e
 6234 0dbb 15       		.uleb128 0x15
 6235 0dbc 48070000 		.4byte	.LASF146
 6236 0dc0 01       		.byte	0x1
 6237 0dc1 2707     		.2byte	0x727
 6238 0dc3 D7020000 		.4byte	0x2d7
 6239 0dc7 37070000 		.4byte	.LLST49
 6240 0dcb 16       		.uleb128 0x16
 6241 0dcc 3D090000 		.4byte	.LASF144
 6242 0dd0 01       		.byte	0x1
 6243 0dd1 2907     		.2byte	0x729
 6244 0dd3 C3010000 		.4byte	0x1c3
 6245 0dd7 63070000 		.4byte	.LLST50
 6246 0ddb 16       		.uleb128 0x16
 6247 0ddc 55110000 		.4byte	.LASF104
 6248 0de0 01       		.byte	0x1
 6249 0de1 2A07     		.2byte	0x72a
 6250 0de3 9C0D0000 		.4byte	0xd9c
 6251 0de7 A4070000 		.4byte	.LLST51
 6252 0deb 16       		.uleb128 0x16
 6253 0dec 18090000 		.4byte	.LASF148
 6254 0df0 01       		.byte	0x1
 6255 0df1 2B07     		.2byte	0x72b
 6256 0df3 CE010000 		.4byte	0x1ce
 6257 0df7 D0070000 		.4byte	.LLST52
 6258 0dfb 18       		.uleb128 0x18
 6259 0dfc 08000000 		.4byte	.LVL160
 6260 0e00 4F200000 		.4byte	0x204f
 6261 0e04 1D       		.uleb128 0x1d
 6262 0e05 10000000 		.4byte	.LVL163
 6263 0e09 A0040000 		.4byte	0x4a0
 6264 0e0d 180E0000 		.4byte	0xe18
 6265 0e11 1A       		.uleb128 0x1a
 6266 0e12 01       		.uleb128 0x1
 6267 0e13 50       		.byte	0x50
 6268 0e14 02       		.uleb128 0x2
 6269 0e15 74       		.byte	0x74
 6270 0e16 00       		.sleb128 0
 6271 0e17 00       		.byte	0
 6272 0e18 1D       		.uleb128 0x1d
 6273 0e19 36000000 		.4byte	.LVL165
 6274 0e1d 2C200000 		.4byte	0x202c
 6275 0e21 2C0E0000 		.4byte	0xe2c
 6276 0e25 1A       		.uleb128 0x1a
 6277 0e26 01       		.uleb128 0x1
 6278 0e27 50       		.byte	0x50
 6279 0e28 02       		.uleb128 0x2
 6280 0e29 77       		.byte	0x77
 6281 0e2a 00       		.sleb128 0
 6282 0e2b 00       		.byte	0
 6283 0e2c 1D       		.uleb128 0x1d
 6284 0e2d 56000000 		.4byte	.LVL166
 6285 0e31 0A200000 		.4byte	0x200a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 211


 6286 0e35 400E0000 		.4byte	0xe40
 6287 0e39 1A       		.uleb128 0x1a
 6288 0e3a 01       		.uleb128 0x1
 6289 0e3b 51       		.byte	0x51
 6290 0e3c 02       		.uleb128 0x2
 6291 0e3d 77       		.byte	0x77
 6292 0e3e 00       		.sleb128 0
 6293 0e3f 00       		.byte	0
 6294 0e40 1D       		.uleb128 0x1d
 6295 0e41 64000000 		.4byte	.LVL168
 6296 0e45 0A200000 		.4byte	0x200a
 6297 0e49 5D0E0000 		.4byte	0xe5d
 6298 0e4d 1A       		.uleb128 0x1a
 6299 0e4e 01       		.uleb128 0x1
 6300 0e4f 50       		.byte	0x50
 6301 0e50 05       		.uleb128 0x5
 6302 0e51 03       		.byte	0x3
 6303 0e52 14000000 		.4byte	.LANCHOR0+20
 6304 0e56 1A       		.uleb128 0x1a
 6305 0e57 01       		.uleb128 0x1
 6306 0e58 51       		.byte	0x51
 6307 0e59 02       		.uleb128 0x2
 6308 0e5a 74       		.byte	0x74
 6309 0e5b 18       		.sleb128 24
 6310 0e5c 00       		.byte	0
 6311 0e5d 19       		.uleb128 0x19
 6312 0e5e 70000000 		.4byte	.LVL170
 6313 0e62 5A200000 		.4byte	0x205a
 6314 0e66 1A       		.uleb128 0x1a
 6315 0e67 01       		.uleb128 0x1
 6316 0e68 50       		.byte	0x50
 6317 0e69 02       		.uleb128 0x2
 6318 0e6a 75       		.byte	0x75
 6319 0e6b 00       		.sleb128 0
 6320 0e6c 00       		.byte	0
 6321 0e6d 00       		.byte	0
 6322 0e6e 22       		.uleb128 0x22
 6323 0e6f 34030000 		.4byte	.LASF149
 6324 0e73 01       		.byte	0x1
 6325 0e74 6D07     		.2byte	0x76d
 6326 0e76 00000000 		.4byte	.LFB46
 6327 0e7a 48000000 		.4byte	.LFE46-.LFB46
 6328 0e7e 01       		.uleb128 0x1
 6329 0e7f 9C       		.byte	0x9c
 6330 0e80 D90E0000 		.4byte	0xed9
 6331 0e84 16       		.uleb128 0x16
 6332 0e85 A9040000 		.4byte	.LASF103
 6333 0e89 01       		.byte	0x1
 6334 0e8a 6F07     		.2byte	0x76f
 6335 0e8c C3010000 		.4byte	0x1c3
 6336 0e90 EE070000 		.4byte	.LLST53
 6337 0e94 1D       		.uleb128 0x1d
 6338 0e95 18000000 		.4byte	.LVL174
 6339 0e99 1D090000 		.4byte	0x91d
 6340 0e9d CF0E0000 		.4byte	0xecf
 6341 0ea1 1A       		.uleb128 0x1a
 6342 0ea2 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 212


 6343 0ea3 50       		.byte	0x50
 6344 0ea4 05       		.uleb128 0x5
 6345 0ea5 03       		.byte	0x3
 6346 0ea6 00000000 		.4byte	prvIdleTask
 6347 0eaa 1A       		.uleb128 0x1a
 6348 0eab 01       		.uleb128 0x1
 6349 0eac 51       		.byte	0x51
 6350 0ead 05       		.uleb128 0x5
 6351 0eae 03       		.byte	0x3
 6352 0eaf 00000000 		.4byte	.LC32
 6353 0eb3 1A       		.uleb128 0x1a
 6354 0eb4 01       		.uleb128 0x1
 6355 0eb5 52       		.byte	0x52
 6356 0eb6 02       		.uleb128 0x2
 6357 0eb7 08       		.byte	0x8
 6358 0eb8 32       		.byte	0x32
 6359 0eb9 1A       		.uleb128 0x1a
 6360 0eba 01       		.uleb128 0x1
 6361 0ebb 53       		.byte	0x53
 6362 0ebc 01       		.uleb128 0x1
 6363 0ebd 30       		.byte	0x30
 6364 0ebe 1A       		.uleb128 0x1a
 6365 0ebf 02       		.uleb128 0x2
 6366 0ec0 7D       		.byte	0x7d
 6367 0ec1 00       		.sleb128 0
 6368 0ec2 01       		.uleb128 0x1
 6369 0ec3 30       		.byte	0x30
 6370 0ec4 1A       		.uleb128 0x1a
 6371 0ec5 02       		.uleb128 0x2
 6372 0ec6 7D       		.byte	0x7d
 6373 0ec7 04       		.sleb128 4
 6374 0ec8 05       		.uleb128 0x5
 6375 0ec9 03       		.byte	0x3
 6376 0eca F4000000 		.4byte	.LANCHOR1+116
 6377 0ece 00       		.byte	0
 6378 0ecf 18       		.uleb128 0x18
 6379 0ed0 34000000 		.4byte	.LVL175
 6380 0ed4 65200000 		.4byte	0x2065
 6381 0ed8 00       		.byte	0
 6382 0ed9 22       		.uleb128 0x22
 6383 0eda 840D0000 		.4byte	.LASF150
 6384 0ede 01       		.byte	0x1
 6385 0edf E507     		.2byte	0x7e5
 6386 0ee1 00000000 		.4byte	.LFB47
 6387 0ee5 14000000 		.4byte	.LFE47-.LFB47
 6388 0ee9 01       		.uleb128 0x1
 6389 0eea 9C       		.byte	0x9c
 6390 0eeb F90E0000 		.4byte	0xef9
 6391 0eef 18       		.uleb128 0x18
 6392 0ef0 0E000000 		.4byte	.LVL176
 6393 0ef4 70200000 		.4byte	0x2070
 6394 0ef8 00       		.byte	0
 6395 0ef9 24       		.uleb128 0x24
 6396 0efa 590A0000 		.4byte	.LASF188
 6397 0efe 01       		.byte	0x1
 6398 0eff F007     		.2byte	0x7f0
 6399 0f01 00000000 		.4byte	.LFB48
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 213


 6400 0f05 10000000 		.4byte	.LFE48-.LFB48
 6401 0f09 01       		.uleb128 0x1
 6402 0f0a 9C       		.byte	0x9c
 6403 0f0b 20       		.uleb128 0x20
 6404 0f0c 11030000 		.4byte	.LASF151
 6405 0f10 01       		.byte	0x1
 6406 0f11 A708     		.2byte	0x8a7
 6407 0f13 D9010000 		.4byte	0x1d9
 6408 0f17 00000000 		.4byte	.LFB50
 6409 0f1b 0C000000 		.4byte	.LFE50-.LFB50
 6410 0f1f 01       		.uleb128 0x1
 6411 0f20 9C       		.byte	0x9c
 6412 0f21 340F0000 		.4byte	0xf34
 6413 0f25 23       		.uleb128 0x23
 6414 0f26 62070000 		.4byte	.LASF152
 6415 0f2a 01       		.byte	0x1
 6416 0f2b A908     		.2byte	0x8a9
 6417 0f2d D9010000 		.4byte	0x1d9
 6418 0f31 01       		.uleb128 0x1
 6419 0f32 50       		.byte	0x50
 6420 0f33 00       		.byte	0
 6421 0f34 20       		.uleb128 0x20
 6422 0f35 A4000000 		.4byte	.LASF153
 6423 0f39 01       		.byte	0x1
 6424 0f3a B608     		.2byte	0x8b6
 6425 0f3c D9010000 		.4byte	0x1d9
 6426 0f40 00000000 		.4byte	.LFB51
 6427 0f44 0C000000 		.4byte	.LFE51-.LFB51
 6428 0f48 01       		.uleb128 0x1
 6429 0f49 9C       		.byte	0x9c
 6430 0f4a 6A0F0000 		.4byte	0xf6a
 6431 0f4e 23       		.uleb128 0x23
 6432 0f4f A9040000 		.4byte	.LASF103
 6433 0f53 01       		.byte	0x1
 6434 0f54 B808     		.2byte	0x8b8
 6435 0f56 D9010000 		.4byte	0x1d9
 6436 0f5a 01       		.uleb128 0x1
 6437 0f5b 50       		.byte	0x50
 6438 0f5c 25       		.uleb128 0x25
 6439 0f5d 18090000 		.4byte	.LASF148
 6440 0f61 01       		.byte	0x1
 6441 0f62 B908     		.2byte	0x8b9
 6442 0f64 CE010000 		.4byte	0x1ce
 6443 0f68 00       		.byte	0
 6444 0f69 00       		.byte	0
 6445 0f6a 26       		.uleb128 0x26
 6446 0f6b 6B010000 		.4byte	.LASF209
 6447 0f6f 01       		.byte	0x1
 6448 0f70 D508     		.2byte	0x8d5
 6449 0f72 CE010000 		.4byte	0x1ce
 6450 0f76 00000000 		.4byte	.LFB52
 6451 0f7a 0C000000 		.4byte	.LFE52-.LFB52
 6452 0f7e 01       		.uleb128 0x1
 6453 0f7f 9C       		.byte	0x9c
 6454 0f80 20       		.uleb128 0x20
 6455 0f81 4A080000 		.4byte	.LASF154
 6456 0f85 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 214


 6457 0f86 DD08     		.2byte	0x8dd
 6458 0f88 A7000000 		.4byte	0xa7
 6459 0f8c 00000000 		.4byte	.LFB53
 6460 0f90 10000000 		.4byte	.LFE53-.LFB53
 6461 0f94 01       		.uleb128 0x1
 6462 0f95 9C       		.byte	0x9c
 6463 0f96 BB0F0000 		.4byte	0xfbb
 6464 0f9a 15       		.uleb128 0x15
 6465 0f9b 5E0F0000 		.4byte	.LASF155
 6466 0f9f 01       		.byte	0x1
 6467 0fa0 DD08     		.2byte	0x8dd
 6468 0fa2 D7020000 		.4byte	0x2d7
 6469 0fa6 01080000 		.4byte	.LLST54
 6470 0faa 16       		.uleb128 0x16
 6471 0fab 55110000 		.4byte	.LASF104
 6472 0faf 01       		.byte	0x1
 6473 0fb0 DF08     		.2byte	0x8df
 6474 0fb2 6D050000 		.4byte	0x56d
 6475 0fb6 14080000 		.4byte	.LLST55
 6476 0fba 00       		.byte	0
 6477 0fbb 20       		.uleb128 0x20
 6478 0fbc 0E0D0000 		.4byte	.LASF156
 6479 0fc0 01       		.byte	0x1
 6480 0fc1 1D0A     		.2byte	0xa1d
 6481 0fc3 C3010000 		.4byte	0x1c3
 6482 0fc7 00000000 		.4byte	.LFB54
 6483 0fcb D8000000 		.4byte	.LFE54-.LFB54
 6484 0fcf 01       		.uleb128 0x1
 6485 0fd0 9C       		.byte	0x9c
 6486 0fd1 7B100000 		.4byte	0x107b
 6487 0fd5 16       		.uleb128 0x16
 6488 0fd6 55110000 		.4byte	.LASF104
 6489 0fda 01       		.byte	0x1
 6490 0fdb 1F0A     		.2byte	0xa1f
 6491 0fdd 6D050000 		.4byte	0x56d
 6492 0fe1 34080000 		.4byte	.LLST56
 6493 0fe5 16       		.uleb128 0x16
 6494 0fe6 4A110000 		.4byte	.LASF52
 6495 0fea 01       		.byte	0x1
 6496 0feb 200A     		.2byte	0xa20
 6497 0fed D9010000 		.4byte	0x1d9
 6498 0ff1 52080000 		.4byte	.LLST57
 6499 0ff5 16       		.uleb128 0x16
 6500 0ff6 F30D0000 		.4byte	.LASF157
 6501 0ffa 01       		.byte	0x1
 6502 0ffb 210A     		.2byte	0xa21
 6503 0ffd C3010000 		.4byte	0x1c3
 6504 1001 65080000 		.4byte	.LLST58
 6505 1005 27       		.uleb128 0x27
 6506 1006 00000000 		.4byte	.Ldebug_ranges0+0
 6507 100a 16       		.uleb128 0x16
 6508 100b 3D0B0000 		.4byte	.LASF128
 6509 100f 01       		.byte	0x1
 6510 1010 2B0A     		.2byte	0xa2b
 6511 1012 18090000 		.4byte	0x918
 6512 1016 BD080000 		.4byte	.LLST59
 6513 101a 21       		.uleb128 0x21
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 215


 6514 101b 16000000 		.4byte	.LBB5
 6515 101f 14000000 		.4byte	.LBE5-.LBB5
 6516 1023 41100000 		.4byte	0x1041
 6517 1027 16       		.uleb128 0x16
 6518 1028 5F0E0000 		.4byte	.LASF158
 6519 102c 01       		.byte	0x1
 6520 102d 330A     		.2byte	0xa33
 6521 102f 840B0000 		.4byte	0xb84
 6522 1033 D0080000 		.4byte	.LLST60
 6523 1037 18       		.uleb128 0x18
 6524 1038 2A000000 		.4byte	.LVL186
 6525 103c 46050000 		.4byte	0x546
 6526 1040 00       		.byte	0
 6527 1041 1D       		.uleb128 0x1d
 6528 1042 76000000 		.4byte	.LVL193
 6529 1046 2C200000 		.4byte	0x202c
 6530 104a 55100000 		.4byte	0x1055
 6531 104e 1A       		.uleb128 0x1a
 6532 104f 01       		.uleb128 0x1
 6533 1050 50       		.byte	0x50
 6534 1051 02       		.uleb128 0x2
 6535 1052 74       		.byte	0x74
 6536 1053 00       		.sleb128 0
 6537 1054 00       		.byte	0
 6538 1055 1D       		.uleb128 0x1d
 6539 1056 84000000 		.4byte	.LVL194
 6540 105a 2C200000 		.4byte	0x202c
 6541 105e 69100000 		.4byte	0x1069
 6542 1062 1A       		.uleb128 0x1a
 6543 1063 01       		.uleb128 0x1
 6544 1064 50       		.byte	0x50
 6545 1065 02       		.uleb128 0x2
 6546 1066 76       		.byte	0x76
 6547 1067 18       		.sleb128 24
 6548 1068 00       		.byte	0
 6549 1069 19       		.uleb128 0x19
 6550 106a A4000000 		.4byte	.LVL195
 6551 106e 0A200000 		.4byte	0x200a
 6552 1072 1A       		.uleb128 0x1a
 6553 1073 01       		.uleb128 0x1
 6554 1074 51       		.byte	0x51
 6555 1075 02       		.uleb128 0x2
 6556 1076 74       		.byte	0x74
 6557 1077 00       		.sleb128 0
 6558 1078 00       		.byte	0
 6559 1079 00       		.byte	0
 6560 107a 00       		.byte	0
 6561 107b 20       		.uleb128 0x20
 6562 107c EC0A0000 		.4byte	.LASF159
 6563 1080 01       		.byte	0x1
 6564 1081 3908     		.2byte	0x839
 6565 1083 C3010000 		.4byte	0x1c3
 6566 1087 00000000 		.4byte	.LFB49
 6567 108b C8000000 		.4byte	.LFE49-.LFB49
 6568 108f 01       		.uleb128 0x1
 6569 1090 9C       		.byte	0x9c
 6570 1091 3D110000 		.4byte	0x113d
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 216


 6571 1095 16       		.uleb128 0x16
 6572 1096 55110000 		.4byte	.LASF104
 6573 109a 01       		.byte	0x1
 6574 109b 3B08     		.2byte	0x83b
 6575 109d 6D050000 		.4byte	0x56d
 6576 10a1 E3080000 		.4byte	.LLST61
 6577 10a5 16       		.uleb128 0x16
 6578 10a6 2C0E0000 		.4byte	.LASF160
 6579 10aa 01       		.byte	0x1
 6580 10ab 3C08     		.2byte	0x83c
 6581 10ad C3010000 		.4byte	0x1c3
 6582 10b1 25090000 		.4byte	.LLST62
 6583 10b5 21       		.uleb128 0x21
 6584 10b6 7C000000 		.4byte	.LBB7
 6585 10ba 22000000 		.4byte	.LBE7-.LBB7
 6586 10be DC100000 		.4byte	0x10dc
 6587 10c2 16       		.uleb128 0x16
 6588 10c3 00000000 		.4byte	.LASF161
 6589 10c7 01       		.byte	0x1
 6590 10c8 7408     		.2byte	0x874
 6591 10ca CE010000 		.4byte	0x1ce
 6592 10ce 67090000 		.4byte	.LLST63
 6593 10d2 18       		.uleb128 0x18
 6594 10d3 88000000 		.4byte	.LVL211
 6595 10d7 BB0F0000 		.4byte	0xfbb
 6596 10db 00       		.byte	0
 6597 10dc 18       		.uleb128 0x18
 6598 10dd 06000000 		.4byte	.LVL201
 6599 10e1 FF1F0000 		.4byte	0x1fff
 6600 10e5 1D       		.uleb128 0x1d
 6601 10e6 2E000000 		.4byte	.LVL204
 6602 10ea 2C200000 		.4byte	0x202c
 6603 10ee F9100000 		.4byte	0x10f9
 6604 10f2 1A       		.uleb128 0x1a
 6605 10f3 01       		.uleb128 0x1
 6606 10f4 50       		.byte	0x50
 6607 10f5 02       		.uleb128 0x2
 6608 10f6 74       		.byte	0x74
 6609 10f7 18       		.sleb128 24
 6610 10f8 00       		.byte	0
 6611 10f9 1D       		.uleb128 0x1d
 6612 10fa 36000000 		.4byte	.LVL205
 6613 10fe 2C200000 		.4byte	0x202c
 6614 1102 0D110000 		.4byte	0x110d
 6615 1106 1A       		.uleb128 0x1a
 6616 1107 01       		.uleb128 0x1
 6617 1108 50       		.byte	0x50
 6618 1109 02       		.uleb128 0x2
 6619 110a 75       		.byte	0x75
 6620 110b 00       		.sleb128 0
 6621 110c 00       		.byte	0
 6622 110d 1D       		.uleb128 0x1d
 6623 110e 56000000 		.4byte	.LVL206
 6624 1112 0A200000 		.4byte	0x200a
 6625 1116 21110000 		.4byte	0x1121
 6626 111a 1A       		.uleb128 0x1a
 6627 111b 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 217


 6628 111c 51       		.byte	0x51
 6629 111d 02       		.uleb128 0x2
 6630 111e 75       		.byte	0x75
 6631 111f 00       		.sleb128 0
 6632 1120 00       		.byte	0
 6633 1121 18       		.uleb128 0x18
 6634 1122 7C000000 		.4byte	.LVL209
 6635 1126 46050000 		.4byte	0x546
 6636 112a 18       		.uleb128 0x18
 6637 112b AA000000 		.4byte	.LVL214
 6638 112f 21200000 		.4byte	0x2021
 6639 1133 18       		.uleb128 0x18
 6640 1134 B8000000 		.4byte	.LVL219
 6641 1138 16200000 		.4byte	0x2016
 6642 113c 00       		.byte	0
 6643 113d 22       		.uleb128 0x22
 6644 113e 740D0000 		.4byte	.LASF162
 6645 1142 01       		.byte	0x1
 6646 1143 B404     		.2byte	0x4b4
 6647 1145 00000000 		.4byte	.LFB36
 6648 1149 5C000000 		.4byte	.LFE36-.LFB36
 6649 114d 01       		.uleb128 0x1
 6650 114e 9C       		.byte	0x9c
 6651 114f E8110000 		.4byte	0x11e8
 6652 1153 15       		.uleb128 0x15
 6653 1154 C8070000 		.4byte	.LASF163
 6654 1158 01       		.byte	0x1
 6655 1159 B404     		.2byte	0x4b4
 6656 115b EE110000 		.4byte	0x11ee
 6657 115f 85090000 		.4byte	.LLST64
 6658 1163 15       		.uleb128 0x15
 6659 1164 240C0000 		.4byte	.LASF164
 6660 1168 01       		.byte	0x1
 6661 1169 B404     		.2byte	0x4b4
 6662 116b 18090000 		.4byte	0x918
 6663 116f B1090000 		.4byte	.LLST65
 6664 1173 16       		.uleb128 0x16
 6665 1174 E0090000 		.4byte	.LASF127
 6666 1178 01       		.byte	0x1
 6667 1179 B604     		.2byte	0x4b6
 6668 117b D9010000 		.4byte	0x1d9
 6669 117f DD090000 		.4byte	.LLST66
 6670 1183 16       		.uleb128 0x16
 6671 1184 2C0E0000 		.4byte	.LASF160
 6672 1188 01       		.byte	0x1
 6673 1189 B704     		.2byte	0x4b7
 6674 118b C3010000 		.4byte	0x1c3
 6675 118f FC090000 		.4byte	.LLST67
 6676 1193 16       		.uleb128 0x16
 6677 1194 940B0000 		.4byte	.LASF165
 6678 1198 01       		.byte	0x1
 6679 1199 B704     		.2byte	0x4b7
 6680 119b C3010000 		.4byte	0x1c3
 6681 119f 0F0A0000 		.4byte	.LLST68
 6682 11a3 28       		.uleb128 0x28
 6683 11a4 18000000 		.4byte	.Ldebug_ranges0+0x18
 6684 11a8 CC110000 		.4byte	0x11cc
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 218


 6685 11ac 16       		.uleb128 0x16
 6686 11ad 3D0B0000 		.4byte	.LASF128
 6687 11b1 01       		.byte	0x1
 6688 11b2 C104     		.2byte	0x4c1
 6689 11b4 18090000 		.4byte	0x918
 6690 11b8 2E0A0000 		.4byte	.LLST69
 6691 11bc 19       		.uleb128 0x19
 6692 11bd 4A000000 		.4byte	.LVL229
 6693 11c1 8A080000 		.4byte	0x88a
 6694 11c5 1A       		.uleb128 0x1a
 6695 11c6 01       		.uleb128 0x1
 6696 11c7 51       		.byte	0x51
 6697 11c8 01       		.uleb128 0x1
 6698 11c9 30       		.byte	0x30
 6699 11ca 00       		.byte	0
 6700 11cb 00       		.byte	0
 6701 11cc 18       		.uleb128 0x18
 6702 11cd 0A000000 		.4byte	.LVL223
 6703 11d1 F90E0000 		.4byte	0xef9
 6704 11d5 18       		.uleb128 0x18
 6705 11d6 4E000000 		.4byte	.LVL230
 6706 11da 7B100000 		.4byte	0x107b
 6707 11de 18       		.uleb128 0x18
 6708 11df 56000000 		.4byte	.LVL231
 6709 11e3 21200000 		.4byte	0x2021
 6710 11e7 00       		.byte	0
 6711 11e8 06       		.uleb128 0x6
 6712 11e9 04       		.byte	0x4
 6713 11ea D9010000 		.4byte	0x1d9
 6714 11ee 07       		.uleb128 0x7
 6715 11ef E8110000 		.4byte	0x11e8
 6716 11f3 22       		.uleb128 0x22
 6717 11f4 3B0C0000 		.4byte	.LASF166
 6718 11f8 01       		.byte	0x1
 6719 11f9 0805     		.2byte	0x508
 6720 11fb 00000000 		.4byte	.LFB37
 6721 11ff 24000000 		.4byte	.LFE37-.LFB37
 6722 1203 01       		.uleb128 0x1
 6723 1204 9C       		.byte	0x9c
 6724 1205 5E120000 		.4byte	0x125e
 6725 1209 15       		.uleb128 0x15
 6726 120a 92080000 		.4byte	.LASF167
 6727 120e 01       		.byte	0x1
 6728 120f 0805     		.2byte	0x508
 6729 1211 18090000 		.4byte	0x918
 6730 1215 410A0000 		.4byte	.LLST70
 6731 1219 16       		.uleb128 0x16
 6732 121a 2C0E0000 		.4byte	.LASF160
 6733 121e 01       		.byte	0x1
 6734 121f 0A05     		.2byte	0x50a
 6735 1221 C3010000 		.4byte	0x1c3
 6736 1225 830A0000 		.4byte	.LLST71
 6737 1229 18       		.uleb128 0x18
 6738 122a 0A000000 		.4byte	.LVL236
 6739 122e F90E0000 		.4byte	0xef9
 6740 1232 1D       		.uleb128 0x1d
 6741 1233 12000000 		.4byte	.LVL237
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 219


 6742 1237 8A080000 		.4byte	0x88a
 6743 123b 4B120000 		.4byte	0x124b
 6744 123f 1A       		.uleb128 0x1a
 6745 1240 01       		.uleb128 0x1
 6746 1241 50       		.byte	0x50
 6747 1242 02       		.uleb128 0x2
 6748 1243 74       		.byte	0x74
 6749 1244 00       		.sleb128 0
 6750 1245 1A       		.uleb128 0x1a
 6751 1246 01       		.uleb128 0x1
 6752 1247 51       		.byte	0x51
 6753 1248 01       		.uleb128 0x1
 6754 1249 30       		.byte	0x30
 6755 124a 00       		.byte	0
 6756 124b 18       		.uleb128 0x18
 6757 124c 16000000 		.4byte	.LVL238
 6758 1250 7B100000 		.4byte	0x107b
 6759 1254 18       		.uleb128 0x18
 6760 1255 22000000 		.4byte	.LVL241
 6761 1259 21200000 		.4byte	0x2021
 6762 125d 00       		.byte	0
 6763 125e 22       		.uleb128 0x22
 6764 125f EF060000 		.4byte	.LASF168
 6765 1263 01       		.byte	0x1
 6766 1264 230B     		.2byte	0xb23
 6767 1266 00000000 		.4byte	.LFB55
 6768 126a B4000000 		.4byte	.LFE55-.LFB55
 6769 126e 01       		.uleb128 0x1
 6770 126f 9C       		.byte	0x9c
 6771 1270 E0120000 		.4byte	0x12e0
 6772 1274 21       		.uleb128 0x21
 6773 1275 18000000 		.4byte	.LBB11
 6774 1279 2E000000 		.4byte	.LBE11-.LBB11
 6775 127d AB120000 		.4byte	0x12ab
 6776 1281 16       		.uleb128 0x16
 6777 1282 6A060000 		.4byte	.LASF169
 6778 1286 01       		.byte	0x1
 6779 1287 4C0B     		.2byte	0xb4c
 6780 1289 E6120000 		.4byte	0x12e6
 6781 128d B90A0000 		.4byte	.LLST72
 6782 1291 16       		.uleb128 0x16
 6783 1292 E2060000 		.4byte	.LASF170
 6784 1296 01       		.byte	0x1
 6785 1297 4C0B     		.2byte	0xb4c
 6786 1299 C7060000 		.4byte	0x6c7
 6787 129d CC0A0000 		.4byte	.LLST73
 6788 12a1 18       		.uleb128 0x18
 6789 12a2 46000000 		.4byte	.LVL245
 6790 12a6 7B200000 		.4byte	0x207b
 6791 12aa 00       		.byte	0
 6792 12ab 1E       		.uleb128 0x1e
 6793 12ac 46000000 		.4byte	.LBB12
 6794 12b0 5A000000 		.4byte	.LBE12-.LBB12
 6795 12b4 16       		.uleb128 0x16
 6796 12b5 550C0000 		.4byte	.LASF171
 6797 12b9 01       		.byte	0x1
 6798 12ba 500B     		.2byte	0xb50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 220


 6799 12bc CE010000 		.4byte	0x1ce
 6800 12c0 E40A0000 		.4byte	.LLST74
 6801 12c4 1E       		.uleb128 0x1e
 6802 12c5 5E000000 		.4byte	.LBB13
 6803 12c9 40000000 		.4byte	.LBE13-.LBB13
 6804 12cd 16       		.uleb128 0x16
 6805 12ce 10070000 		.4byte	.LASF172
 6806 12d2 01       		.byte	0x1
 6807 12d3 500B     		.2byte	0xb50
 6808 12d5 EB120000 		.4byte	0x12eb
 6809 12d9 F70A0000 		.4byte	.LLST75
 6810 12dd 00       		.byte	0
 6811 12de 00       		.byte	0
 6812 12df 00       		.byte	0
 6813 12e0 06       		.uleb128 0x6
 6814 12e1 04       		.byte	0x4
 6815 12e2 C7060000 		.4byte	0x6c7
 6816 12e6 07       		.uleb128 0x7
 6817 12e7 E0120000 		.4byte	0x12e0
 6818 12eb 07       		.uleb128 0x7
 6819 12ec 840B0000 		.4byte	0xb84
 6820 12f0 22       		.uleb128 0x22
 6821 12f1 CB0B0000 		.4byte	.LASF173
 6822 12f5 01       		.byte	0x1
 6823 12f6 5E06     		.2byte	0x65e
 6824 12f8 00000000 		.4byte	.LFB42
 6825 12fc 8C000000 		.4byte	.LFE42-.LFB42
 6826 1300 01       		.uleb128 0x1
 6827 1301 9C       		.byte	0x9c
 6828 1302 AB130000 		.4byte	0x13ab
 6829 1306 15       		.uleb128 0x15
 6830 1307 34020000 		.4byte	.LASF174
 6831 130b 01       		.byte	0x1
 6832 130c 5E06     		.2byte	0x65e
 6833 130e D7020000 		.4byte	0x2d7
 6834 1312 140B0000 		.4byte	.LLST76
 6835 1316 16       		.uleb128 0x16
 6836 1317 55110000 		.4byte	.LASF104
 6837 131b 01       		.byte	0x1
 6838 131c 6006     		.2byte	0x660
 6839 131e 6D050000 		.4byte	0x56d
 6840 1322 320B0000 		.4byte	.LLST77
 6841 1326 18       		.uleb128 0x18
 6842 1327 08000000 		.4byte	.LVL251
 6843 132b FF1F0000 		.4byte	0x1fff
 6844 132f 1D       		.uleb128 0x1d
 6845 1330 18000000 		.4byte	.LVL253
 6846 1334 2C200000 		.4byte	0x202c
 6847 1338 43130000 		.4byte	0x1343
 6848 133c 1A       		.uleb128 0x1a
 6849 133d 01       		.uleb128 0x1
 6850 133e 50       		.byte	0x50
 6851 133f 02       		.uleb128 0x2
 6852 1340 75       		.byte	0x75
 6853 1341 00       		.sleb128 0
 6854 1342 00       		.byte	0
 6855 1343 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 221


 6856 1344 26000000 		.4byte	.LVL254
 6857 1348 2C200000 		.4byte	0x202c
 6858 134c 57130000 		.4byte	0x1357
 6859 1350 1A       		.uleb128 0x1a
 6860 1351 01       		.uleb128 0x1
 6861 1352 50       		.byte	0x50
 6862 1353 02       		.uleb128 0x2
 6863 1354 74       		.byte	0x74
 6864 1355 18       		.sleb128 24
 6865 1356 00       		.byte	0
 6866 1357 1D       		.uleb128 0x1d
 6867 1358 2E000000 		.4byte	.LVL255
 6868 135c 0A200000 		.4byte	0x200a
 6869 1360 74130000 		.4byte	0x1374
 6870 1364 1A       		.uleb128 0x1a
 6871 1365 01       		.uleb128 0x1
 6872 1366 50       		.byte	0x50
 6873 1367 05       		.uleb128 0x5
 6874 1368 03       		.byte	0x3
 6875 1369 00000000 		.4byte	.LANCHOR0
 6876 136d 1A       		.uleb128 0x1a
 6877 136e 01       		.uleb128 0x1
 6878 136f 51       		.byte	0x51
 6879 1370 02       		.uleb128 0x2
 6880 1371 75       		.byte	0x75
 6881 1372 00       		.sleb128 0
 6882 1373 00       		.byte	0
 6883 1374 18       		.uleb128 0x18
 6884 1375 40000000 		.4byte	.LVL256
 6885 1379 16200000 		.4byte	0x2016
 6886 137d 18       		.uleb128 0x18
 6887 137e 4C000000 		.4byte	.LVL257
 6888 1382 FF1F0000 		.4byte	0x1fff
 6889 1386 18       		.uleb128 0x18
 6890 1387 50000000 		.4byte	.LVL258
 6891 138b 46050000 		.4byte	0x546
 6892 138f 18       		.uleb128 0x18
 6893 1390 54000000 		.4byte	.LVL259
 6894 1394 16200000 		.4byte	0x2016
 6895 1398 18       		.uleb128 0x18
 6896 1399 68000000 		.4byte	.LVL260
 6897 139d 21200000 		.4byte	0x2021
 6898 13a1 18       		.uleb128 0x18
 6899 13a2 82000000 		.4byte	.LVL261
 6900 13a6 5E120000 		.4byte	0x125e
 6901 13aa 00       		.byte	0
 6902 13ab 22       		.uleb128 0x22
 6903 13ac CE080000 		.4byte	.LASF175
 6904 13b0 01       		.byte	0x1
 6905 13b1 5E0B     		.2byte	0xb5e
 6906 13b3 00000000 		.4byte	.LFB56
 6907 13b7 1C000000 		.4byte	.LFE56-.LFB56
 6908 13bb 01       		.uleb128 0x1
 6909 13bc 9C       		.byte	0x9c
 6910 13bd 0C140000 		.4byte	0x140c
 6911 13c1 15       		.uleb128 0x15
 6912 13c2 E2070000 		.4byte	.LASF176
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 222


 6913 13c6 01       		.byte	0x1
 6914 13c7 5E0B     		.2byte	0xb5e
 6915 13c9 EB120000 		.4byte	0x12eb
 6916 13cd 520B0000 		.4byte	.LLST78
 6917 13d1 15       		.uleb128 0x15
 6918 13d2 DF0A0000 		.4byte	.LASF125
 6919 13d6 01       		.byte	0x1
 6920 13d7 5E0B     		.2byte	0xb5e
 6921 13d9 18090000 		.4byte	0x918
 6922 13dd 730B0000 		.4byte	.LLST79
 6923 13e1 1D       		.uleb128 0x1d
 6924 13e2 0E000000 		.4byte	.LVL266
 6925 13e6 38200000 		.4byte	0x2038
 6926 13ea F6130000 		.4byte	0x13f6
 6927 13ee 1A       		.uleb128 0x1a
 6928 13ef 01       		.uleb128 0x1
 6929 13f0 50       		.byte	0x50
 6930 13f1 03       		.uleb128 0x3
 6931 13f2 F3       		.byte	0xf3
 6932 13f3 01       		.uleb128 0x1
 6933 13f4 50       		.byte	0x50
 6934 13f5 00       		.byte	0
 6935 13f6 19       		.uleb128 0x19
 6936 13f7 16000000 		.4byte	.LVL267
 6937 13fb 8A080000 		.4byte	0x88a
 6938 13ff 1A       		.uleb128 0x1a
 6939 1400 01       		.uleb128 0x1
 6940 1401 50       		.byte	0x50
 6941 1402 02       		.uleb128 0x2
 6942 1403 74       		.byte	0x74
 6943 1404 00       		.sleb128 0
 6944 1405 1A       		.uleb128 0x1a
 6945 1406 01       		.uleb128 0x1
 6946 1407 51       		.byte	0x51
 6947 1408 01       		.uleb128 0x1
 6948 1409 31       		.byte	0x31
 6949 140a 00       		.byte	0
 6950 140b 00       		.byte	0
 6951 140c 22       		.uleb128 0x22
 6952 140d 22050000 		.4byte	.LASF177
 6953 1411 01       		.byte	0x1
 6954 1412 6F0B     		.2byte	0xb6f
 6955 1414 00000000 		.4byte	.LFB57
 6956 1418 28000000 		.4byte	.LFE57-.LFB57
 6957 141c 01       		.uleb128 0x1
 6958 141d 9C       		.byte	0x9c
 6959 141e 7D140000 		.4byte	0x147d
 6960 1422 15       		.uleb128 0x15
 6961 1423 E2070000 		.4byte	.LASF176
 6962 1427 01       		.byte	0x1
 6963 1428 6F0B     		.2byte	0xb6f
 6964 142a 840B0000 		.4byte	0xb84
 6965 142e 9F0B0000 		.4byte	.LLST80
 6966 1432 15       		.uleb128 0x15
 6967 1433 4A110000 		.4byte	.LASF52
 6968 1437 01       		.byte	0x1
 6969 1438 6F0B     		.2byte	0xb6f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 223


 6970 143a 18090000 		.4byte	0x918
 6971 143e C00B0000 		.4byte	.LLST81
 6972 1442 15       		.uleb128 0x15
 6973 1443 DF0A0000 		.4byte	.LASF125
 6974 1447 01       		.byte	0x1
 6975 1448 6F0B     		.2byte	0xb6f
 6976 144a 18090000 		.4byte	0x918
 6977 144e E10B0000 		.4byte	.LLST82
 6978 1452 1D       		.uleb128 0x1d
 6979 1453 18000000 		.4byte	.LVL272
 6980 1457 0A200000 		.4byte	0x200a
 6981 145b 67140000 		.4byte	0x1467
 6982 145f 1A       		.uleb128 0x1a
 6983 1460 01       		.uleb128 0x1
 6984 1461 50       		.byte	0x50
 6985 1462 03       		.uleb128 0x3
 6986 1463 F3       		.byte	0xf3
 6987 1464 01       		.uleb128 0x1
 6988 1465 50       		.byte	0x50
 6989 1466 00       		.byte	0
 6990 1467 19       		.uleb128 0x19
 6991 1468 20000000 		.4byte	.LVL273
 6992 146c 8A080000 		.4byte	0x88a
 6993 1470 1A       		.uleb128 0x1a
 6994 1471 01       		.uleb128 0x1
 6995 1472 50       		.byte	0x50
 6996 1473 02       		.uleb128 0x2
 6997 1474 74       		.byte	0x74
 6998 1475 00       		.sleb128 0
 6999 1476 1A       		.uleb128 0x1a
 7000 1477 01       		.uleb128 0x1
 7001 1478 51       		.byte	0x51
 7002 1479 01       		.uleb128 0x1
 7003 147a 31       		.byte	0x31
 7004 147b 00       		.byte	0
 7005 147c 00       		.byte	0
 7006 147d 20       		.uleb128 0x20
 7007 147e 070B0000 		.4byte	.LASF178
 7008 1482 01       		.byte	0x1
 7009 1483 A80B     		.2byte	0xba8
 7010 1485 C3010000 		.4byte	0x1c3
 7011 1489 00000000 		.4byte	.LFB58
 7012 148d 74000000 		.4byte	.LFE58-.LFB58
 7013 1491 01       		.uleb128 0x1
 7014 1492 9C       		.byte	0x9c
 7015 1493 1D150000 		.4byte	0x151d
 7016 1497 15       		.uleb128 0x15
 7017 1498 E2070000 		.4byte	.LASF176
 7018 149c 01       		.byte	0x1
 7019 149d A80B     		.2byte	0xba8
 7020 149f 28150000 		.4byte	0x1528
 7021 14a3 0D0C0000 		.4byte	.LLST83
 7022 14a7 16       		.uleb128 0x16
 7023 14a8 840A0000 		.4byte	.LASF179
 7024 14ac 01       		.byte	0x1
 7025 14ad AA0B     		.2byte	0xbaa
 7026 14af 6D050000 		.4byte	0x56d
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 224


 7027 14b3 2E0C0000 		.4byte	.LLST84
 7028 14b7 16       		.uleb128 0x16
 7029 14b8 A9040000 		.4byte	.LASF103
 7030 14bc 01       		.byte	0x1
 7031 14bd AB0B     		.2byte	0xbab
 7032 14bf C3010000 		.4byte	0x1c3
 7033 14c3 410C0000 		.4byte	.LLST85
 7034 14c7 1D       		.uleb128 0x1d
 7035 14c8 10000000 		.4byte	.LVL278
 7036 14cc 2C200000 		.4byte	0x202c
 7037 14d0 DB140000 		.4byte	0x14db
 7038 14d4 1A       		.uleb128 0x1a
 7039 14d5 01       		.uleb128 0x1
 7040 14d6 50       		.byte	0x50
 7041 14d7 02       		.uleb128 0x2
 7042 14d8 75       		.byte	0x75
 7043 14d9 00       		.sleb128 0
 7044 14da 00       		.byte	0
 7045 14db 1D       		.uleb128 0x1d
 7046 14dc 20000000 		.4byte	.LVL279
 7047 14e0 2C200000 		.4byte	0x202c
 7048 14e4 EF140000 		.4byte	0x14ef
 7049 14e8 1A       		.uleb128 0x1a
 7050 14e9 01       		.uleb128 0x1
 7051 14ea 50       		.byte	0x50
 7052 14eb 02       		.uleb128 0x2
 7053 14ec 75       		.byte	0x75
 7054 14ed 00       		.sleb128 0
 7055 14ee 00       		.byte	0
 7056 14ef 1D       		.uleb128 0x1d
 7057 14f0 40000000 		.4byte	.LVL280
 7058 14f4 0A200000 		.4byte	0x200a
 7059 14f8 03150000 		.4byte	0x1503
 7060 14fc 1A       		.uleb128 0x1a
 7061 14fd 01       		.uleb128 0x1
 7062 14fe 51       		.byte	0x51
 7063 14ff 02       		.uleb128 0x2
 7064 1500 75       		.byte	0x75
 7065 1501 00       		.sleb128 0
 7066 1502 00       		.byte	0
 7067 1503 19       		.uleb128 0x19
 7068 1504 4C000000 		.4byte	.LVL281
 7069 1508 0A200000 		.4byte	0x200a
 7070 150c 1A       		.uleb128 0x1a
 7071 150d 01       		.uleb128 0x1
 7072 150e 50       		.byte	0x50
 7073 150f 05       		.uleb128 0x5
 7074 1510 03       		.byte	0x3
 7075 1511 14000000 		.4byte	.LANCHOR0+20
 7076 1515 1A       		.uleb128 0x1a
 7077 1516 01       		.uleb128 0x1
 7078 1517 51       		.byte	0x51
 7079 1518 02       		.uleb128 0x2
 7080 1519 75       		.byte	0x75
 7081 151a 00       		.sleb128 0
 7082 151b 00       		.byte	0
 7083 151c 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 225


 7084 151d 06       		.uleb128 0x6
 7085 151e 04       		.byte	0x4
 7086 151f 23150000 		.4byte	0x1523
 7087 1523 07       		.uleb128 0x7
 7088 1524 CC020000 		.4byte	0x2cc
 7089 1528 07       		.uleb128 0x7
 7090 1529 1D150000 		.4byte	0x151d
 7091 152d 22       		.uleb128 0x22
 7092 152e A00F0000 		.4byte	.LASF180
 7093 1532 01       		.byte	0x1
 7094 1533 EC0B     		.2byte	0xbec
 7095 1535 00000000 		.4byte	.LFB59
 7096 1539 58000000 		.4byte	.LFE59-.LFB59
 7097 153d 01       		.uleb128 0x1
 7098 153e 9C       		.byte	0x9c
 7099 153f AD150000 		.4byte	0x15ad
 7100 1543 15       		.uleb128 0x15
 7101 1544 67090000 		.4byte	.LASF181
 7102 1548 01       		.byte	0x1
 7103 1549 EC0B     		.2byte	0xbec
 7104 154b C6020000 		.4byte	0x2c6
 7105 154f 600C0000 		.4byte	.LLST86
 7106 1553 15       		.uleb128 0x15
 7107 1554 4A110000 		.4byte	.LASF52
 7108 1558 01       		.byte	0x1
 7109 1559 EC0B     		.2byte	0xbec
 7110 155b 18090000 		.4byte	0x918
 7111 155f 810C0000 		.4byte	.LLST87
 7112 1563 16       		.uleb128 0x16
 7113 1564 840A0000 		.4byte	.LASF179
 7114 1568 01       		.byte	0x1
 7115 1569 EE0B     		.2byte	0xbee
 7116 156b 6D050000 		.4byte	0x56d
 7117 156f A20C0000 		.4byte	.LLST88
 7118 1573 1D       		.uleb128 0x1d
 7119 1574 10000000 		.4byte	.LVL289
 7120 1578 2C200000 		.4byte	0x202c
 7121 157c 88150000 		.4byte	0x1588
 7122 1580 1A       		.uleb128 0x1a
 7123 1581 01       		.uleb128 0x1
 7124 1582 50       		.byte	0x50
 7125 1583 03       		.uleb128 0x3
 7126 1584 F3       		.byte	0xf3
 7127 1585 01       		.uleb128 0x1
 7128 1586 50       		.byte	0x50
 7129 1587 00       		.byte	0
 7130 1588 1D       		.uleb128 0x1d
 7131 1589 18000000 		.4byte	.LVL290
 7132 158d 2C200000 		.4byte	0x202c
 7133 1591 9C150000 		.4byte	0x159c
 7134 1595 1A       		.uleb128 0x1a
 7135 1596 01       		.uleb128 0x1
 7136 1597 50       		.byte	0x50
 7137 1598 02       		.uleb128 0x2
 7138 1599 74       		.byte	0x74
 7139 159a 00       		.sleb128 0
 7140 159b 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 226


 7141 159c 19       		.uleb128 0x19
 7142 159d 38000000 		.4byte	.LVL291
 7143 15a1 0A200000 		.4byte	0x200a
 7144 15a5 1A       		.uleb128 0x1a
 7145 15a6 01       		.uleb128 0x1
 7146 15a7 51       		.byte	0x51
 7147 15a8 02       		.uleb128 0x2
 7148 15a9 74       		.byte	0x74
 7149 15aa 00       		.sleb128 0
 7150 15ab 00       		.byte	0
 7151 15ac 00       		.byte	0
 7152 15ad 22       		.uleb128 0x22
 7153 15ae 35080000 		.4byte	.LASF182
 7154 15b2 01       		.byte	0x1
 7155 15b3 0E0C     		.2byte	0xc0e
 7156 15b5 00000000 		.4byte	.LFB60
 7157 15b9 1C000000 		.4byte	.LFE60-.LFB60
 7158 15bd 01       		.uleb128 0x1
 7159 15be 9C       		.byte	0x9c
 7160 15bf E6150000 		.4byte	0x15e6
 7161 15c3 15       		.uleb128 0x15
 7162 15c4 BE070000 		.4byte	.LASF183
 7163 15c8 01       		.byte	0x1
 7164 15c9 0E0C     		.2byte	0xc0e
 7165 15cb EC150000 		.4byte	0x15ec
 7166 15cf B50C0000 		.4byte	.LLST89
 7167 15d3 18       		.uleb128 0x18
 7168 15d4 08000000 		.4byte	.LVL294
 7169 15d8 FF1F0000 		.4byte	0x1fff
 7170 15dc 18       		.uleb128 0x18
 7171 15dd 16000000 		.4byte	.LVL295
 7172 15e1 16200000 		.4byte	0x2016
 7173 15e5 00       		.byte	0
 7174 15e6 06       		.uleb128 0x6
 7175 15e7 04       		.byte	0x4
 7176 15e8 79030000 		.4byte	0x379
 7177 15ec 07       		.uleb128 0x7
 7178 15ed E6150000 		.4byte	0x15e6
 7179 15f1 22       		.uleb128 0x22
 7180 15f2 3E000000 		.4byte	.LASF184
 7181 15f6 01       		.byte	0x1
 7182 15f7 1A0C     		.2byte	0xc1a
 7183 15f9 00000000 		.4byte	.LFB61
 7184 15fd 10000000 		.4byte	.LFE61-.LFB61
 7185 1601 01       		.uleb128 0x1
 7186 1602 9C       		.byte	0x9c
 7187 1603 16160000 		.4byte	0x1616
 7188 1607 1B       		.uleb128 0x1b
 7189 1608 BE070000 		.4byte	.LASF183
 7190 160c 01       		.byte	0x1
 7191 160d 1A0C     		.2byte	0xc1a
 7192 160f EC150000 		.4byte	0x15ec
 7193 1613 01       		.uleb128 0x1
 7194 1614 50       		.byte	0x50
 7195 1615 00       		.byte	0
 7196 1616 20       		.uleb128 0x20
 7197 1617 7D080000 		.4byte	.LASF185
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 227


 7198 161b 01       		.byte	0x1
 7199 161c 220C     		.2byte	0xc22
 7200 161e C3010000 		.4byte	0x1c3
 7201 1622 00000000 		.4byte	.LFB62
 7202 1626 54000000 		.4byte	.LFE62-.LFB62
 7203 162a 01       		.uleb128 0x1
 7204 162b 9C       		.byte	0x9c
 7205 162c B1160000 		.4byte	0x16b1
 7206 1630 15       		.uleb128 0x15
 7207 1631 BE070000 		.4byte	.LASF183
 7208 1635 01       		.byte	0x1
 7209 1636 220C     		.2byte	0xc22
 7210 1638 EC150000 		.4byte	0x15ec
 7211 163c E10C0000 		.4byte	.LLST90
 7212 1640 15       		.uleb128 0x15
 7213 1641 7D030000 		.4byte	.LASF186
 7214 1645 01       		.byte	0x1
 7215 1646 220C     		.2byte	0xc22
 7216 1648 EE110000 		.4byte	0x11ee
 7217 164c 580D0000 		.4byte	.LLST91
 7218 1650 16       		.uleb128 0x16
 7219 1651 A9040000 		.4byte	.LASF103
 7220 1655 01       		.byte	0x1
 7221 1656 240C     		.2byte	0xc24
 7222 1658 C3010000 		.4byte	0x1c3
 7223 165c 840D0000 		.4byte	.LLST92
 7224 1660 21       		.uleb128 0x21
 7225 1661 0A000000 		.4byte	.LBB14
 7226 1665 3C000000 		.4byte	.LBE14-.LBB14
 7227 1669 9E160000 		.4byte	0x169e
 7228 166d 16       		.uleb128 0x16
 7229 166e 3D0B0000 		.4byte	.LASF128
 7230 1672 01       		.byte	0x1
 7231 1673 2C0C     		.2byte	0xc2c
 7232 1675 18090000 		.4byte	0x918
 7233 1679 BA0D0000 		.4byte	.LLST93
 7234 167d 16       		.uleb128 0x16
 7235 167e 320F0000 		.4byte	.LASF187
 7236 1682 01       		.byte	0x1
 7237 1683 2D0C     		.2byte	0xc2d
 7238 1685 18090000 		.4byte	0x918
 7239 1689 D80D0000 		.4byte	.LLST94
 7240 168d 19       		.uleb128 0x19
 7241 168e 34000000 		.4byte	.LVL303
 7242 1692 F1150000 		.4byte	0x15f1
 7243 1696 1A       		.uleb128 0x1a
 7244 1697 01       		.uleb128 0x1
 7245 1698 50       		.byte	0x50
 7246 1699 02       		.uleb128 0x2
 7247 169a 74       		.byte	0x74
 7248 169b 00       		.sleb128 0
 7249 169c 00       		.byte	0
 7250 169d 00       		.byte	0
 7251 169e 18       		.uleb128 0x18
 7252 169f 0A000000 		.4byte	.LVL299
 7253 16a3 FF1F0000 		.4byte	0x1fff
 7254 16a7 18       		.uleb128 0x18
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 228


 7255 16a8 4A000000 		.4byte	.LVL312
 7256 16ac 16200000 		.4byte	0x2016
 7257 16b0 00       		.byte	0
 7258 16b1 24       		.uleb128 0x24
 7259 16b2 00080000 		.4byte	.LASF189
 7260 16b6 01       		.byte	0x1
 7261 16b7 610C     		.2byte	0xc61
 7262 16b9 00000000 		.4byte	.LFB63
 7263 16bd 0C000000 		.4byte	.LFE63-.LFB63
 7264 16c1 01       		.uleb128 0x1
 7265 16c2 9C       		.byte	0x9c
 7266 16c3 22       		.uleb128 0x22
 7267 16c4 EC0C0000 		.4byte	.LASF190
 7268 16c8 01       		.byte	0x1
 7269 16c9 370D     		.2byte	0xd37
 7270 16cb 00000000 		.4byte	.LFB65
 7271 16cf 1C000000 		.4byte	.LFE65-.LFB65
 7272 16d3 01       		.uleb128 0x1
 7273 16d4 9C       		.byte	0x9c
 7274 16d5 18170000 		.4byte	0x1718
 7275 16d9 15       		.uleb128 0x15
 7276 16da 2F110000 		.4byte	.LASF191
 7277 16de 01       		.byte	0x1
 7278 16df 370D     		.2byte	0xd37
 7279 16e1 D7020000 		.4byte	0x2d7
 7280 16e5 060E0000 		.4byte	.LLST95
 7281 16e9 15       		.uleb128 0x15
 7282 16ea 560B0000 		.4byte	.LASF192
 7283 16ee 01       		.byte	0x1
 7284 16ef 370D     		.2byte	0xd37
 7285 16f1 C3010000 		.4byte	0x1c3
 7286 16f5 190E0000 		.4byte	.LLST96
 7287 16f9 1B       		.uleb128 0x1b
 7288 16fa 410A0000 		.4byte	.LASF193
 7289 16fe 01       		.byte	0x1
 7290 16ff 370D     		.2byte	0xd37
 7291 1701 A5000000 		.4byte	0xa5
 7292 1705 01       		.uleb128 0x1
 7293 1706 52       		.byte	0x52
 7294 1707 16       		.uleb128 0x16
 7295 1708 55110000 		.4byte	.LASF104
 7296 170c 01       		.byte	0x1
 7297 170d 390D     		.2byte	0xd39
 7298 170f 6D050000 		.4byte	0x56d
 7299 1713 470E0000 		.4byte	.LLST97
 7300 1717 00       		.byte	0
 7301 1718 20       		.uleb128 0x20
 7302 1719 6F020000 		.4byte	.LASF194
 7303 171d 01       		.byte	0x1
 7304 171e 470D     		.2byte	0xd47
 7305 1720 A5000000 		.4byte	0xa5
 7306 1724 00000000 		.4byte	.LFB66
 7307 1728 20000000 		.4byte	.LFE66-.LFB66
 7308 172c 01       		.uleb128 0x1
 7309 172d 9C       		.byte	0x9c
 7310 172e 73170000 		.4byte	0x1773
 7311 1732 15       		.uleb128 0x15
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 229


 7312 1733 5E0F0000 		.4byte	.LASF155
 7313 1737 01       		.byte	0x1
 7314 1738 470D     		.2byte	0xd47
 7315 173a D7020000 		.4byte	0x2d7
 7316 173e 5A0E0000 		.4byte	.LLST98
 7317 1742 15       		.uleb128 0x15
 7318 1743 560B0000 		.4byte	.LASF192
 7319 1747 01       		.byte	0x1
 7320 1748 470D     		.2byte	0xd47
 7321 174a C3010000 		.4byte	0x1c3
 7322 174e 780E0000 		.4byte	.LLST99
 7323 1752 16       		.uleb128 0x16
 7324 1753 4C090000 		.4byte	.LASF195
 7325 1757 01       		.byte	0x1
 7326 1758 490D     		.2byte	0xd49
 7327 175a A5000000 		.4byte	0xa5
 7328 175e BF0E0000 		.4byte	.LLST100
 7329 1762 16       		.uleb128 0x16
 7330 1763 55110000 		.4byte	.LASF104
 7331 1767 01       		.byte	0x1
 7332 1768 4A0D     		.2byte	0xd4a
 7333 176a 6D050000 		.4byte	0x56d
 7334 176e F50E0000 		.4byte	.LLST101
 7335 1772 00       		.byte	0
 7336 1773 20       		.uleb128 0x20
 7337 1774 AF0A0000 		.4byte	.LASF196
 7338 1778 01       		.byte	0x1
 7339 1779 400E     		.2byte	0xe40
 7340 177b CE010000 		.4byte	0x1ce
 7341 177f 00000000 		.4byte	.LFB70
 7342 1783 18000000 		.4byte	.LFE70-.LFB70
 7343 1787 01       		.uleb128 0x1
 7344 1788 9C       		.byte	0x9c
 7345 1789 D5170000 		.4byte	0x17d5
 7346 178d 15       		.uleb128 0x15
 7347 178e 43020000 		.4byte	.LASF107
 7348 1792 01       		.byte	0x1
 7349 1793 400E     		.2byte	0xe40
 7350 1795 D7020000 		.4byte	0x2d7
 7351 1799 080F0000 		.4byte	.LLST102
 7352 179d 16       		.uleb128 0x16
 7353 179e 55110000 		.4byte	.LASF104
 7354 17a2 01       		.byte	0x1
 7355 17a3 420E     		.2byte	0xe42
 7356 17a5 6D050000 		.4byte	0x56d
 7357 17a9 1B0F0000 		.4byte	.LLST103
 7358 17ad 16       		.uleb128 0x16
 7359 17ae 02070000 		.4byte	.LASF197
 7360 17b2 01       		.byte	0x1
 7361 17b3 430E     		.2byte	0xe43
 7362 17b5 E4010000 		.4byte	0x1e4
 7363 17b9 2E0F0000 		.4byte	.LLST104
 7364 17bd 23       		.uleb128 0x23
 7365 17be 49020000 		.4byte	.LASF136
 7366 17c2 01       		.byte	0x1
 7367 17c3 440E     		.2byte	0xe44
 7368 17c5 CE010000 		.4byte	0x1ce
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 230


 7369 17c9 01       		.uleb128 0x1
 7370 17ca 50       		.byte	0x50
 7371 17cb 18       		.uleb128 0x18
 7372 17cc 10000000 		.4byte	.LVL331
 7373 17d0 00050000 		.4byte	0x500
 7374 17d4 00       		.byte	0
 7375 17d5 20       		.uleb128 0x20
 7376 17d6 BB0E0000 		.4byte	.LASF198
 7377 17da 01       		.byte	0x1
 7378 17db AC0E     		.2byte	0xeac
 7379 17dd D7020000 		.4byte	0x2d7
 7380 17e1 00000000 		.4byte	.LFB73
 7381 17e5 0C000000 		.4byte	.LFE73-.LFB73
 7382 17e9 01       		.uleb128 0x1
 7383 17ea 9C       		.byte	0x9c
 7384 17eb FE170000 		.4byte	0x17fe
 7385 17ef 23       		.uleb128 0x23
 7386 17f0 A9040000 		.4byte	.LASF103
 7387 17f4 01       		.byte	0x1
 7388 17f5 AE0E     		.2byte	0xeae
 7389 17f7 D7020000 		.4byte	0x2d7
 7390 17fb 01       		.uleb128 0x1
 7391 17fc 50       		.byte	0x50
 7392 17fd 00       		.byte	0
 7393 17fe 20       		.uleb128 0x20
 7394 17ff D50C0000 		.4byte	.LASF199
 7395 1803 01       		.byte	0x1
 7396 1804 BD0E     		.2byte	0xebd
 7397 1806 C3010000 		.4byte	0x1c3
 7398 180a 00000000 		.4byte	.LFB74
 7399 180e 20000000 		.4byte	.LFE74-.LFB74
 7400 1812 01       		.uleb128 0x1
 7401 1813 9C       		.byte	0x9c
 7402 1814 27180000 		.4byte	0x1827
 7403 1818 23       		.uleb128 0x23
 7404 1819 A9040000 		.4byte	.LASF103
 7405 181d 01       		.byte	0x1
 7406 181e BF0E     		.2byte	0xebf
 7407 1820 C3010000 		.4byte	0x1c3
 7408 1824 01       		.uleb128 0x1
 7409 1825 50       		.byte	0x50
 7410 1826 00       		.byte	0
 7411 1827 20       		.uleb128 0x20
 7412 1828 82090000 		.4byte	.LASF200
 7413 182c 01       		.byte	0x1
 7414 182d D90E     		.2byte	0xed9
 7415 182f C3010000 		.4byte	0x1c3
 7416 1833 00000000 		.4byte	.LFB75
 7417 1837 9C000000 		.4byte	.LFE75-.LFB75
 7418 183b 01       		.uleb128 0x1
 7419 183c 9C       		.byte	0x9c
 7420 183d 96180000 		.4byte	0x1896
 7421 1841 15       		.uleb128 0x15
 7422 1842 A0080000 		.4byte	.LASF201
 7423 1846 01       		.byte	0x1
 7424 1847 D90E     		.2byte	0xed9
 7425 1849 EB040000 		.4byte	0x4eb
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 231


 7426 184d 410F0000 		.4byte	.LLST105
 7427 1851 16       		.uleb128 0x16
 7428 1852 660E0000 		.4byte	.LASF202
 7429 1856 01       		.byte	0x1
 7430 1857 DB0E     		.2byte	0xedb
 7431 1859 9C0D0000 		.4byte	0xd9c
 7432 185d C50F0000 		.4byte	.LLST106
 7433 1861 16       		.uleb128 0x16
 7434 1862 A9040000 		.4byte	.LASF103
 7435 1866 01       		.byte	0x1
 7436 1867 DC0E     		.2byte	0xedc
 7437 1869 C3010000 		.4byte	0x1c3
 7438 186d 49100000 		.4byte	.LLST107
 7439 1871 1D       		.uleb128 0x1d
 7440 1872 48000000 		.4byte	.LVL337
 7441 1876 2C200000 		.4byte	0x202c
 7442 187a 85180000 		.4byte	0x1885
 7443 187e 1A       		.uleb128 0x1a
 7444 187f 01       		.uleb128 0x1
 7445 1880 50       		.byte	0x50
 7446 1881 02       		.uleb128 0x2
 7447 1882 75       		.byte	0x75
 7448 1883 00       		.sleb128 0
 7449 1884 00       		.byte	0
 7450 1885 19       		.uleb128 0x19
 7451 1886 6C000000 		.4byte	.LVL338
 7452 188a 0A200000 		.4byte	0x200a
 7453 188e 1A       		.uleb128 0x1a
 7454 188f 01       		.uleb128 0x1
 7455 1890 51       		.byte	0x51
 7456 1891 02       		.uleb128 0x2
 7457 1892 75       		.byte	0x75
 7458 1893 00       		.sleb128 0
 7459 1894 00       		.byte	0
 7460 1895 00       		.byte	0
 7461 1896 20       		.uleb128 0x20
 7462 1897 82010000 		.4byte	.LASF203
 7463 189b 01       		.byte	0x1
 7464 189c 300F     		.2byte	0xf30
 7465 189e C3010000 		.4byte	0x1c3
 7466 18a2 00000000 		.4byte	.LFB76
 7467 18a6 60000000 		.4byte	.LFE76-.LFB76
 7468 18aa 01       		.uleb128 0x1
 7469 18ab 9C       		.byte	0x9c
 7470 18ac 05190000 		.4byte	0x1905
 7471 18b0 15       		.uleb128 0x15
 7472 18b1 A0080000 		.4byte	.LASF201
 7473 18b5 01       		.byte	0x1
 7474 18b6 300F     		.2byte	0xf30
 7475 18b8 EB040000 		.4byte	0x4eb
 7476 18bc 68100000 		.4byte	.LLST108
 7477 18c0 16       		.uleb128 0x16
 7478 18c1 55110000 		.4byte	.LASF104
 7479 18c5 01       		.byte	0x1
 7480 18c6 320F     		.2byte	0xf32
 7481 18c8 9C0D0000 		.4byte	0xd9c
 7482 18cc D6100000 		.4byte	.LLST109
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 232


 7483 18d0 16       		.uleb128 0x16
 7484 18d1 A9040000 		.4byte	.LASF103
 7485 18d5 01       		.byte	0x1
 7486 18d6 330F     		.2byte	0xf33
 7487 18d8 C3010000 		.4byte	0x1c3
 7488 18dc 44110000 		.4byte	.LLST110
 7489 18e0 1D       		.uleb128 0x1d
 7490 18e1 20000000 		.4byte	.LVL351
 7491 18e5 2C200000 		.4byte	0x202c
 7492 18e9 F4180000 		.4byte	0x18f4
 7493 18ed 1A       		.uleb128 0x1a
 7494 18ee 01       		.uleb128 0x1
 7495 18ef 50       		.byte	0x50
 7496 18f0 02       		.uleb128 0x2
 7497 18f1 75       		.byte	0x75
 7498 18f2 00       		.sleb128 0
 7499 18f3 00       		.byte	0
 7500 18f4 19       		.uleb128 0x19
 7501 18f5 48000000 		.4byte	.LVL352
 7502 18f9 0A200000 		.4byte	0x200a
 7503 18fd 1A       		.uleb128 0x1a
 7504 18fe 01       		.uleb128 0x1
 7505 18ff 51       		.byte	0x51
 7506 1900 02       		.uleb128 0x2
 7507 1901 75       		.byte	0x75
 7508 1902 00       		.sleb128 0
 7509 1903 00       		.byte	0
 7510 1904 00       		.byte	0
 7511 1905 22       		.uleb128 0x22
 7512 1906 630C0000 		.4byte	.LASF204
 7513 190a 01       		.byte	0x1
 7514 190b 800F     		.2byte	0xf80
 7515 190d 00000000 		.4byte	.LFB77
 7516 1911 78000000 		.4byte	.LFE77-.LFB77
 7517 1915 01       		.uleb128 0x1
 7518 1916 9C       		.byte	0x9c
 7519 1917 9D190000 		.4byte	0x199d
 7520 191b 15       		.uleb128 0x15
 7521 191c A0080000 		.4byte	.LASF201
 7522 1920 01       		.byte	0x1
 7523 1921 800F     		.2byte	0xf80
 7524 1923 EB040000 		.4byte	0x4eb
 7525 1927 7B110000 		.4byte	.LLST111
 7526 192b 15       		.uleb128 0x15
 7527 192c 9E0E0000 		.4byte	.LASF205
 7528 1930 01       		.byte	0x1
 7529 1931 800F     		.2byte	0xf80
 7530 1933 CE010000 		.4byte	0x1ce
 7531 1937 A7110000 		.4byte	.LLST112
 7532 193b 16       		.uleb128 0x16
 7533 193c 55110000 		.4byte	.LASF104
 7534 1940 01       		.byte	0x1
 7535 1941 820F     		.2byte	0xf82
 7536 1943 9C0D0000 		.4byte	0xd9c
 7537 1947 C8110000 		.4byte	.LLST113
 7538 194b 16       		.uleb128 0x16
 7539 194c 58080000 		.4byte	.LASF143
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 233


 7540 1950 01       		.byte	0x1
 7541 1951 830F     		.2byte	0xf83
 7542 1953 CE010000 		.4byte	0x1ce
 7543 1957 F4110000 		.4byte	.LLST114
 7544 195b 16       		.uleb128 0x16
 7545 195c 66040000 		.4byte	.LASF206
 7546 1960 01       		.byte	0x1
 7547 1961 830F     		.2byte	0xf83
 7548 1963 CE010000 		.4byte	0x1ce
 7549 1967 07120000 		.4byte	.LLST115
 7550 196b 25       		.uleb128 0x25
 7551 196c F1040000 		.4byte	.LASF207
 7552 1970 01       		.byte	0x1
 7553 1971 840F     		.2byte	0xf84
 7554 1973 9D190000 		.4byte	0x199d
 7555 1977 01       		.byte	0x1
 7556 1978 1D       		.uleb128 0x1d
 7557 1979 4C000000 		.4byte	.LVL368
 7558 197d 2C200000 		.4byte	0x202c
 7559 1981 8C190000 		.4byte	0x198c
 7560 1985 1A       		.uleb128 0x1a
 7561 1986 01       		.uleb128 0x1
 7562 1987 50       		.byte	0x50
 7563 1988 02       		.uleb128 0x2
 7564 1989 75       		.byte	0x75
 7565 198a 00       		.sleb128 0
 7566 198b 00       		.byte	0
 7567 198c 19       		.uleb128 0x19
 7568 198d 6C000000 		.4byte	.LVL369
 7569 1991 0A200000 		.4byte	0x200a
 7570 1995 1A       		.uleb128 0x1a
 7571 1996 01       		.uleb128 0x1
 7572 1997 51       		.byte	0x51
 7573 1998 02       		.uleb128 0x2
 7574 1999 75       		.byte	0x75
 7575 199a 00       		.sleb128 0
 7576 199b 00       		.byte	0
 7577 199c 00       		.byte	0
 7578 199d 07       		.uleb128 0x7
 7579 199e CE010000 		.4byte	0x1ce
 7580 19a2 20       		.uleb128 0x20
 7581 19a3 28060000 		.4byte	.LASF208
 7582 19a7 01       		.byte	0x1
 7583 19a8 1B11     		.2byte	0x111b
 7584 19aa D9010000 		.4byte	0x1d9
 7585 19ae 00000000 		.4byte	.LFB78
 7586 19b2 18000000 		.4byte	.LFE78-.LFB78
 7587 19b6 01       		.uleb128 0x1
 7588 19b7 9C       		.byte	0x9c
 7589 19b8 CB190000 		.4byte	0x19cb
 7590 19bc 23       		.uleb128 0x23
 7591 19bd 49020000 		.4byte	.LASF136
 7592 19c1 01       		.byte	0x1
 7593 19c2 1D11     		.2byte	0x111d
 7594 19c4 D9010000 		.4byte	0x1d9
 7595 19c8 01       		.uleb128 0x1
 7596 19c9 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 234


 7597 19ca 00       		.byte	0
 7598 19cb 26       		.uleb128 0x26
 7599 19cc 2A070000 		.4byte	.LASF210
 7600 19d0 01       		.byte	0x1
 7601 19d1 2B11     		.2byte	0x112b
 7602 19d3 A5000000 		.4byte	0xa5
 7603 19d7 00000000 		.4byte	.LFB79
 7604 19db 1C000000 		.4byte	.LFE79-.LFB79
 7605 19df 01       		.uleb128 0x1
 7606 19e0 9C       		.byte	0x9c
 7607 19e1 20       		.uleb128 0x20
 7608 19e2 10110000 		.4byte	.LASF211
 7609 19e6 01       		.byte	0x1
 7610 19e7 3C11     		.2byte	0x113c
 7611 19e9 D5000000 		.4byte	0xd5
 7612 19ed 00000000 		.4byte	.LFB80
 7613 19f1 6C000000 		.4byte	.LFE80-.LFB80
 7614 19f5 01       		.uleb128 0x1
 7615 19f6 9C       		.byte	0x9c
 7616 19f7 721A0000 		.4byte	0x1a72
 7617 19fb 15       		.uleb128 0x15
 7618 19fc EF030000 		.4byte	.LASF212
 7619 1a00 01       		.byte	0x1
 7620 1a01 3C11     		.2byte	0x113c
 7621 1a03 C3010000 		.4byte	0x1c3
 7622 1a07 32120000 		.4byte	.LLST116
 7623 1a0b 15       		.uleb128 0x15
 7624 1a0c DF0A0000 		.4byte	.LASF125
 7625 1a10 01       		.byte	0x1
 7626 1a11 3C11     		.2byte	0x113c
 7627 1a13 D9010000 		.4byte	0x1d9
 7628 1a17 5E120000 		.4byte	.LLST117
 7629 1a1b 16       		.uleb128 0x16
 7630 1a1c A7090000 		.4byte	.LASF213
 7631 1a20 01       		.byte	0x1
 7632 1a21 3E11     		.2byte	0x113e
 7633 1a23 D5000000 		.4byte	0xd5
 7634 1a27 8A120000 		.4byte	.LLST118
 7635 1a2b 18       		.uleb128 0x18
 7636 1a2c 0A000000 		.4byte	.LVL373
 7637 1a30 FF1F0000 		.4byte	0x1fff
 7638 1a34 1D       		.uleb128 0x1d
 7639 1a35 28000000 		.4byte	.LVL374
 7640 1a39 8A080000 		.4byte	0x88a
 7641 1a3d 4D1A0000 		.4byte	0x1a4d
 7642 1a41 1A       		.uleb128 0x1a
 7643 1a42 01       		.uleb128 0x1
 7644 1a43 50       		.byte	0x50
 7645 1a44 02       		.uleb128 0x2
 7646 1a45 74       		.byte	0x74
 7647 1a46 00       		.sleb128 0
 7648 1a47 1A       		.uleb128 0x1a
 7649 1a48 01       		.uleb128 0x1
 7650 1a49 51       		.byte	0x51
 7651 1a4a 01       		.uleb128 0x1
 7652 1a4b 31       		.byte	0x31
 7653 1a4c 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 235


 7654 1a4d 18       		.uleb128 0x18
 7655 1a4e 2C000000 		.4byte	.LVL375
 7656 1a52 21200000 		.4byte	0x2021
 7657 1a56 18       		.uleb128 0x18
 7658 1a57 30000000 		.4byte	.LVL376
 7659 1a5b 16200000 		.4byte	0x2016
 7660 1a5f 18       		.uleb128 0x18
 7661 1a60 34000000 		.4byte	.LVL377
 7662 1a64 FF1F0000 		.4byte	0x1fff
 7663 1a68 18       		.uleb128 0x18
 7664 1a69 62000000 		.4byte	.LVL379
 7665 1a6d 16200000 		.4byte	0x2016
 7666 1a71 00       		.byte	0
 7667 1a72 20       		.uleb128 0x20
 7668 1a73 3A110000 		.4byte	.LASF214
 7669 1a77 01       		.byte	0x1
 7670 1a78 8011     		.2byte	0x1180
 7671 1a7a C3010000 		.4byte	0x1c3
 7672 1a7e 00000000 		.4byte	.LFB81
 7673 1a82 80000000 		.4byte	.LFE81-.LFB81
 7674 1a86 01       		.uleb128 0x1
 7675 1a87 9C       		.byte	0x9c
 7676 1a88 231B0000 		.4byte	0x1b23
 7677 1a8c 15       		.uleb128 0x15
 7678 1a8d 2F100000 		.4byte	.LASF215
 7679 1a91 01       		.byte	0x1
 7680 1a92 8011     		.2byte	0x1180
 7681 1a94 D5000000 		.4byte	0xd5
 7682 1a98 A8120000 		.4byte	.LLST119
 7683 1a9c 15       		.uleb128 0x15
 7684 1a9d 200B0000 		.4byte	.LASF216
 7685 1aa1 01       		.byte	0x1
 7686 1aa2 8011     		.2byte	0x1180
 7687 1aa4 D5000000 		.4byte	0xd5
 7688 1aa8 D4120000 		.4byte	.LLST120
 7689 1aac 15       		.uleb128 0x15
 7690 1aad 76040000 		.4byte	.LASF217
 7691 1ab1 01       		.byte	0x1
 7692 1ab2 8011     		.2byte	0x1180
 7693 1ab4 231B0000 		.4byte	0x1b23
 7694 1ab8 00130000 		.4byte	.LLST121
 7695 1abc 15       		.uleb128 0x15
 7696 1abd DF0A0000 		.4byte	.LASF125
 7697 1ac1 01       		.byte	0x1
 7698 1ac2 8011     		.2byte	0x1180
 7699 1ac4 D9010000 		.4byte	0x1d9
 7700 1ac8 2C130000 		.4byte	.LLST122
 7701 1acc 16       		.uleb128 0x16
 7702 1acd A9040000 		.4byte	.LASF103
 7703 1ad1 01       		.byte	0x1
 7704 1ad2 8211     		.2byte	0x1182
 7705 1ad4 C3010000 		.4byte	0x1c3
 7706 1ad8 71130000 		.4byte	.LLST123
 7707 1adc 18       		.uleb128 0x18
 7708 1add 0E000000 		.4byte	.LVL383
 7709 1ae1 FF1F0000 		.4byte	0x1fff
 7710 1ae5 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 236


 7711 1ae6 36000000 		.4byte	.LVL384
 7712 1aea 8A080000 		.4byte	0x88a
 7713 1aee FE1A0000 		.4byte	0x1afe
 7714 1af2 1A       		.uleb128 0x1a
 7715 1af3 01       		.uleb128 0x1
 7716 1af4 50       		.byte	0x50
 7717 1af5 02       		.uleb128 0x2
 7718 1af6 74       		.byte	0x74
 7719 1af7 00       		.sleb128 0
 7720 1af8 1A       		.uleb128 0x1a
 7721 1af9 01       		.uleb128 0x1
 7722 1afa 51       		.byte	0x51
 7723 1afb 01       		.uleb128 0x1
 7724 1afc 31       		.byte	0x31
 7725 1afd 00       		.byte	0
 7726 1afe 18       		.uleb128 0x18
 7727 1aff 3A000000 		.4byte	.LVL385
 7728 1b03 21200000 		.4byte	0x2021
 7729 1b07 18       		.uleb128 0x18
 7730 1b08 3E000000 		.4byte	.LVL386
 7731 1b0c 16200000 		.4byte	0x2016
 7732 1b10 18       		.uleb128 0x18
 7733 1b11 42000000 		.4byte	.LVL387
 7734 1b15 FF1F0000 		.4byte	0x1fff
 7735 1b19 18       		.uleb128 0x18
 7736 1b1a 78000000 		.4byte	.LVL392
 7737 1b1e 16200000 		.4byte	0x2016
 7738 1b22 00       		.byte	0
 7739 1b23 06       		.uleb128 0x6
 7740 1b24 04       		.byte	0x4
 7741 1b25 D5000000 		.4byte	0xd5
 7742 1b29 20       		.uleb128 0x20
 7743 1b2a 29010000 		.4byte	.LASF218
 7744 1b2e 01       		.byte	0x1
 7745 1b2f D011     		.2byte	0x11d0
 7746 1b31 C3010000 		.4byte	0x1c3
 7747 1b35 00000000 		.4byte	.LFB82
 7748 1b39 AC000000 		.4byte	.LFE82-.LFB82
 7749 1b3d 01       		.uleb128 0x1
 7750 1b3e 9C       		.byte	0x9c
 7751 1b3f F71B0000 		.4byte	0x1bf7
 7752 1b43 15       		.uleb128 0x15
 7753 1b44 0A100000 		.4byte	.LASF219
 7754 1b48 01       		.byte	0x1
 7755 1b49 D011     		.2byte	0x11d0
 7756 1b4b D7020000 		.4byte	0x2d7
 7757 1b4f 9B130000 		.4byte	.LLST124
 7758 1b53 15       		.uleb128 0x15
 7759 1b54 B10C0000 		.4byte	.LASF220
 7760 1b58 01       		.byte	0x1
 7761 1b59 D011     		.2byte	0x11d0
 7762 1b5b D5000000 		.4byte	0xd5
 7763 1b5f C7130000 		.4byte	.LLST125
 7764 1b63 15       		.uleb128 0x15
 7765 1b64 330C0000 		.4byte	.LASF221
 7766 1b68 01       		.byte	0x1
 7767 1b69 D011     		.2byte	0x11d0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 237


 7768 1b6b 49030000 		.4byte	0x349
 7769 1b6f 6E140000 		.4byte	.LLST126
 7770 1b73 15       		.uleb128 0x15
 7771 1b74 41050000 		.4byte	.LASF222
 7772 1b78 01       		.byte	0x1
 7773 1b79 D011     		.2byte	0x11d0
 7774 1b7b 231B0000 		.4byte	0x1b23
 7775 1b7f 8F140000 		.4byte	.LLST127
 7776 1b83 16       		.uleb128 0x16
 7777 1b84 55110000 		.4byte	.LASF104
 7778 1b88 01       		.byte	0x1
 7779 1b89 D211     		.2byte	0x11d2
 7780 1b8b 6D050000 		.4byte	0x56d
 7781 1b8f BB140000 		.4byte	.LLST128
 7782 1b93 16       		.uleb128 0x16
 7783 1b94 A9040000 		.4byte	.LASF103
 7784 1b98 01       		.byte	0x1
 7785 1b99 D311     		.2byte	0x11d3
 7786 1b9b C3010000 		.4byte	0x1c3
 7787 1b9f E7140000 		.4byte	.LLST129
 7788 1ba3 16       		.uleb128 0x16
 7789 1ba4 20040000 		.4byte	.LASF223
 7790 1ba8 01       		.byte	0x1
 7791 1ba9 D411     		.2byte	0x11d4
 7792 1bab BF000000 		.4byte	0xbf
 7793 1baf 11150000 		.4byte	.LLST130
 7794 1bb3 18       		.uleb128 0x18
 7795 1bb4 0E000000 		.4byte	.LVL399
 7796 1bb8 FF1F0000 		.4byte	0x1fff
 7797 1bbc 1D       		.uleb128 0x1d
 7798 1bbd 6C000000 		.4byte	.LVL412
 7799 1bc1 2C200000 		.4byte	0x202c
 7800 1bc5 D01B0000 		.4byte	0x1bd0
 7801 1bc9 1A       		.uleb128 0x1a
 7802 1bca 01       		.uleb128 0x1
 7803 1bcb 50       		.byte	0x50
 7804 1bcc 02       		.uleb128 0x2
 7805 1bcd 76       		.byte	0x76
 7806 1bce 00       		.sleb128 0
 7807 1bcf 00       		.byte	0
 7808 1bd0 1D       		.uleb128 0x1d
 7809 1bd1 8C000000 		.4byte	.LVL413
 7810 1bd5 0A200000 		.4byte	0x200a
 7811 1bd9 E41B0000 		.4byte	0x1be4
 7812 1bdd 1A       		.uleb128 0x1a
 7813 1bde 01       		.uleb128 0x1
 7814 1bdf 51       		.byte	0x51
 7815 1be0 02       		.uleb128 0x2
 7816 1be1 76       		.byte	0x76
 7817 1be2 00       		.sleb128 0
 7818 1be3 00       		.byte	0
 7819 1be4 18       		.uleb128 0x18
 7820 1be5 9C000000 		.4byte	.LVL414
 7821 1be9 21200000 		.4byte	0x2021
 7822 1bed 18       		.uleb128 0x18
 7823 1bee A0000000 		.4byte	.LVL415
 7824 1bf2 16200000 		.4byte	0x2016
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 238


 7825 1bf6 00       		.byte	0
 7826 1bf7 20       		.uleb128 0x20
 7827 1bf8 770E0000 		.4byte	.LASF224
 7828 1bfc 01       		.byte	0x1
 7829 1bfd 3A12     		.2byte	0x123a
 7830 1bff C3010000 		.4byte	0x1c3
 7831 1c03 00000000 		.4byte	.LFB83
 7832 1c07 E0000000 		.4byte	.LFE83-.LFB83
 7833 1c0b 01       		.uleb128 0x1
 7834 1c0c 9C       		.byte	0x9c
 7835 1c0d 001D0000 		.4byte	0x1d00
 7836 1c11 15       		.uleb128 0x15
 7837 1c12 0A100000 		.4byte	.LASF219
 7838 1c16 01       		.byte	0x1
 7839 1c17 3A12     		.2byte	0x123a
 7840 1c19 D7020000 		.4byte	0x2d7
 7841 1c1d 24150000 		.4byte	.LLST131
 7842 1c21 15       		.uleb128 0x15
 7843 1c22 B10C0000 		.4byte	.LASF220
 7844 1c26 01       		.byte	0x1
 7845 1c27 3A12     		.2byte	0x123a
 7846 1c29 D5000000 		.4byte	0xd5
 7847 1c2d 50150000 		.4byte	.LLST132
 7848 1c31 15       		.uleb128 0x15
 7849 1c32 330C0000 		.4byte	.LASF221
 7850 1c36 01       		.byte	0x1
 7851 1c37 3A12     		.2byte	0x123a
 7852 1c39 49030000 		.4byte	0x349
 7853 1c3d F7150000 		.4byte	.LLST133
 7854 1c41 15       		.uleb128 0x15
 7855 1c42 41050000 		.4byte	.LASF222
 7856 1c46 01       		.byte	0x1
 7857 1c47 3A12     		.2byte	0x123a
 7858 1c49 231B0000 		.4byte	0x1b23
 7859 1c4d 18160000 		.4byte	.LLST134
 7860 1c51 1B       		.uleb128 0x1b
 7861 1c52 F40E0000 		.4byte	.LASF225
 7862 1c56 01       		.byte	0x1
 7863 1c57 3A12     		.2byte	0x123a
 7864 1c59 001D0000 		.4byte	0x1d00
 7865 1c5d 02       		.uleb128 0x2
 7866 1c5e 91       		.byte	0x91
 7867 1c5f 00       		.sleb128 0
 7868 1c60 16       		.uleb128 0x16
 7869 1c61 55110000 		.4byte	.LASF104
 7870 1c65 01       		.byte	0x1
 7871 1c66 3C12     		.2byte	0x123c
 7872 1c68 6D050000 		.4byte	0x56d
 7873 1c6c 44160000 		.4byte	.LLST135
 7874 1c70 16       		.uleb128 0x16
 7875 1c71 20040000 		.4byte	.LASF223
 7876 1c75 01       		.byte	0x1
 7877 1c76 3D12     		.2byte	0x123d
 7878 1c78 BF000000 		.4byte	0xbf
 7879 1c7c 70160000 		.4byte	.LLST136
 7880 1c80 16       		.uleb128 0x16
 7881 1c81 A9040000 		.4byte	.LASF103
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 239


 7882 1c85 01       		.byte	0x1
 7883 1c86 3E12     		.2byte	0x123e
 7884 1c88 C3010000 		.4byte	0x1c3
 7885 1c8c 83160000 		.4byte	.LLST137
 7886 1c90 16       		.uleb128 0x16
 7887 1c91 18090000 		.4byte	.LASF148
 7888 1c95 01       		.byte	0x1
 7889 1c96 3F12     		.2byte	0x123f
 7890 1c98 CE010000 		.4byte	0x1ce
 7891 1c9c AD160000 		.4byte	.LLST138
 7892 1ca0 18       		.uleb128 0x18
 7893 1ca1 10000000 		.4byte	.LVL421
 7894 1ca5 4F200000 		.4byte	0x204f
 7895 1ca9 1D       		.uleb128 0x1d
 7896 1caa 78000000 		.4byte	.LVL437
 7897 1cae 2C200000 		.4byte	0x202c
 7898 1cb2 BD1C0000 		.4byte	0x1cbd
 7899 1cb6 1A       		.uleb128 0x1a
 7900 1cb7 01       		.uleb128 0x1
 7901 1cb8 50       		.byte	0x50
 7902 1cb9 02       		.uleb128 0x2
 7903 1cba 77       		.byte	0x77
 7904 1cbb 00       		.sleb128 0
 7905 1cbc 00       		.byte	0
 7906 1cbd 1D       		.uleb128 0x1d
 7907 1cbe 98000000 		.4byte	.LVL438
 7908 1cc2 0A200000 		.4byte	0x200a
 7909 1cc6 D11C0000 		.4byte	0x1cd1
 7910 1cca 1A       		.uleb128 0x1a
 7911 1ccb 01       		.uleb128 0x1
 7912 1ccc 51       		.byte	0x51
 7913 1ccd 02       		.uleb128 0x2
 7914 1cce 77       		.byte	0x77
 7915 1ccf 00       		.sleb128 0
 7916 1cd0 00       		.byte	0
 7917 1cd1 1D       		.uleb128 0x1d
 7918 1cd2 A6000000 		.4byte	.LVL441
 7919 1cd6 0A200000 		.4byte	0x200a
 7920 1cda EE1C0000 		.4byte	0x1cee
 7921 1cde 1A       		.uleb128 0x1a
 7922 1cdf 01       		.uleb128 0x1
 7923 1ce0 50       		.byte	0x50
 7924 1ce1 05       		.uleb128 0x5
 7925 1ce2 03       		.byte	0x3
 7926 1ce3 14000000 		.4byte	.LANCHOR0+20
 7927 1ce7 1A       		.uleb128 0x1a
 7928 1ce8 01       		.uleb128 0x1
 7929 1ce9 51       		.byte	0x51
 7930 1cea 02       		.uleb128 0x2
 7931 1ceb 74       		.byte	0x74
 7932 1cec 18       		.sleb128 24
 7933 1ced 00       		.byte	0
 7934 1cee 19       		.uleb128 0x19
 7935 1cef CC000000 		.4byte	.LVL442
 7936 1cf3 5A200000 		.4byte	0x205a
 7937 1cf7 1A       		.uleb128 0x1a
 7938 1cf8 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 240


 7939 1cf9 50       		.byte	0x50
 7940 1cfa 03       		.uleb128 0x3
 7941 1cfb 91       		.byte	0x91
 7942 1cfc 64       		.sleb128 -28
 7943 1cfd 06       		.byte	0x6
 7944 1cfe 00       		.byte	0
 7945 1cff 00       		.byte	0
 7946 1d00 06       		.uleb128 0x6
 7947 1d01 04       		.byte	0x4
 7948 1d02 C3010000 		.4byte	0x1c3
 7949 1d06 22       		.uleb128 0x22
 7950 1d07 E4100000 		.4byte	.LASF226
 7951 1d0b 01       		.byte	0x1
 7952 1d0c B612     		.2byte	0x12b6
 7953 1d0e 00000000 		.4byte	.LFB84
 7954 1d12 8C000000 		.4byte	.LFE84-.LFB84
 7955 1d16 01       		.uleb128 0x1
 7956 1d17 9C       		.byte	0x9c
 7957 1d18 CB1D0000 		.4byte	0x1dcb
 7958 1d1c 15       		.uleb128 0x15
 7959 1d1d 0A100000 		.4byte	.LASF219
 7960 1d21 01       		.byte	0x1
 7961 1d22 B612     		.2byte	0x12b6
 7962 1d24 D7020000 		.4byte	0x2d7
 7963 1d28 E3160000 		.4byte	.LLST139
 7964 1d2c 15       		.uleb128 0x15
 7965 1d2d F40E0000 		.4byte	.LASF225
 7966 1d31 01       		.byte	0x1
 7967 1d32 B612     		.2byte	0x12b6
 7968 1d34 001D0000 		.4byte	0x1d00
 7969 1d38 0F170000 		.4byte	.LLST140
 7970 1d3c 16       		.uleb128 0x16
 7971 1d3d 55110000 		.4byte	.LASF104
 7972 1d41 01       		.byte	0x1
 7973 1d42 B812     		.2byte	0x12b8
 7974 1d44 6D050000 		.4byte	0x56d
 7975 1d48 3B170000 		.4byte	.LLST141
 7976 1d4c 16       		.uleb128 0x16
 7977 1d4d 20040000 		.4byte	.LASF223
 7978 1d51 01       		.byte	0x1
 7979 1d52 B912     		.2byte	0x12b9
 7980 1d54 BF000000 		.4byte	0xbf
 7981 1d58 67170000 		.4byte	.LLST142
 7982 1d5c 16       		.uleb128 0x16
 7983 1d5d 18090000 		.4byte	.LASF148
 7984 1d61 01       		.byte	0x1
 7985 1d62 BA12     		.2byte	0x12ba
 7986 1d64 CE010000 		.4byte	0x1ce
 7987 1d68 85170000 		.4byte	.LLST143
 7988 1d6c 18       		.uleb128 0x18
 7989 1d6d 0A000000 		.4byte	.LVL448
 7990 1d71 4F200000 		.4byte	0x204f
 7991 1d75 1D       		.uleb128 0x1d
 7992 1d76 2E000000 		.4byte	.LVL452
 7993 1d7a 2C200000 		.4byte	0x202c
 7994 1d7e 891D0000 		.4byte	0x1d89
 7995 1d82 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 241


 7996 1d83 01       		.uleb128 0x1
 7997 1d84 50       		.byte	0x50
 7998 1d85 02       		.uleb128 0x2
 7999 1d86 77       		.byte	0x77
 8000 1d87 00       		.sleb128 0
 8001 1d88 00       		.byte	0
 8002 1d89 1D       		.uleb128 0x1d
 8003 1d8a 4E000000 		.4byte	.LVL453
 8004 1d8e 0A200000 		.4byte	0x200a
 8005 1d92 9D1D0000 		.4byte	0x1d9d
 8006 1d96 1A       		.uleb128 0x1a
 8007 1d97 01       		.uleb128 0x1
 8008 1d98 51       		.byte	0x51
 8009 1d99 02       		.uleb128 0x2
 8010 1d9a 77       		.byte	0x77
 8011 1d9b 00       		.sleb128 0
 8012 1d9c 00       		.byte	0
 8013 1d9d 1D       		.uleb128 0x1d
 8014 1d9e 5C000000 		.4byte	.LVL456
 8015 1da2 0A200000 		.4byte	0x200a
 8016 1da6 BA1D0000 		.4byte	0x1dba
 8017 1daa 1A       		.uleb128 0x1a
 8018 1dab 01       		.uleb128 0x1
 8019 1dac 50       		.byte	0x50
 8020 1dad 05       		.uleb128 0x5
 8021 1dae 03       		.byte	0x3
 8022 1daf 14000000 		.4byte	.LANCHOR0+20
 8023 1db3 1A       		.uleb128 0x1a
 8024 1db4 01       		.uleb128 0x1
 8025 1db5 51       		.byte	0x51
 8026 1db6 02       		.uleb128 0x2
 8027 1db7 74       		.byte	0x74
 8028 1db8 18       		.sleb128 24
 8029 1db9 00       		.byte	0
 8030 1dba 19       		.uleb128 0x19
 8031 1dbb 7E000000 		.4byte	.LVL457
 8032 1dbf 5A200000 		.4byte	0x205a
 8033 1dc3 1A       		.uleb128 0x1a
 8034 1dc4 01       		.uleb128 0x1
 8035 1dc5 50       		.byte	0x50
 8036 1dc6 02       		.uleb128 0x2
 8037 1dc7 75       		.byte	0x75
 8038 1dc8 00       		.sleb128 0
 8039 1dc9 00       		.byte	0
 8040 1dca 00       		.byte	0
 8041 1dcb 20       		.uleb128 0x20
 8042 1dcc 030E0000 		.4byte	.LASF227
 8043 1dd0 01       		.byte	0x1
 8044 1dd1 0F13     		.2byte	0x130f
 8045 1dd3 C3010000 		.4byte	0x1c3
 8046 1dd7 00000000 		.4byte	.LFB85
 8047 1ddb 30000000 		.4byte	.LFE85-.LFB85
 8048 1ddf 01       		.uleb128 0x1
 8049 1de0 9C       		.byte	0x9c
 8050 1de1 281E0000 		.4byte	0x1e28
 8051 1de5 15       		.uleb128 0x15
 8052 1de6 43020000 		.4byte	.LASF107
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 242


 8053 1dea 01       		.byte	0x1
 8054 1deb 0F13     		.2byte	0x130f
 8055 1ded D7020000 		.4byte	0x2d7
 8056 1df1 B9170000 		.4byte	.LLST144
 8057 1df5 16       		.uleb128 0x16
 8058 1df6 55110000 		.4byte	.LASF104
 8059 1dfa 01       		.byte	0x1
 8060 1dfb 1113     		.2byte	0x1311
 8061 1dfd 6D050000 		.4byte	0x56d
 8062 1e01 CC170000 		.4byte	.LLST145
 8063 1e05 16       		.uleb128 0x16
 8064 1e06 A9040000 		.4byte	.LASF103
 8065 1e0a 01       		.byte	0x1
 8066 1e0b 1213     		.2byte	0x1312
 8067 1e0d C3010000 		.4byte	0x1c3
 8068 1e11 EA170000 		.4byte	.LLST146
 8069 1e15 18       		.uleb128 0x18
 8070 1e16 0E000000 		.4byte	.LVL463
 8071 1e1a FF1F0000 		.4byte	0x1fff
 8072 1e1e 18       		.uleb128 0x18
 8073 1e1f 26000000 		.4byte	.LVL468
 8074 1e23 16200000 		.4byte	0x2016
 8075 1e27 00       		.byte	0
 8076 1e28 0D       		.uleb128 0xd
 8077 1e29 CC020000 		.4byte	0x2cc
 8078 1e2d 381E0000 		.4byte	0x1e38
 8079 1e31 0E       		.uleb128 0xe
 8080 1e32 9E000000 		.4byte	0x9e
 8081 1e36 04       		.byte	0x4
 8082 1e37 00       		.byte	0
 8083 1e38 23       		.uleb128 0x23
 8084 1e39 B0090000 		.4byte	.LASF228
 8085 1e3d 01       		.byte	0x1
 8086 1e3e 5F01     		.2byte	0x15f
 8087 1e40 281E0000 		.4byte	0x1e28
 8088 1e44 05       		.uleb128 0x5
 8089 1e45 03       		.byte	0x3
 8090 1e46 30000000 		.4byte	pxReadyTasksLists
 8091 1e4a 23       		.uleb128 0x23
 8092 1e4b AC100000 		.4byte	.LASF229
 8093 1e4f 01       		.byte	0x1
 8094 1e50 6001     		.2byte	0x160
 8095 1e52 CC020000 		.4byte	0x2cc
 8096 1e56 05       		.uleb128 0x5
 8097 1e57 03       		.byte	0x3
 8098 1e58 94000000 		.4byte	xDelayedTaskList1
 8099 1e5c 23       		.uleb128 0x23
 8100 1e5d BE100000 		.4byte	.LASF230
 8101 1e61 01       		.byte	0x1
 8102 1e62 6101     		.2byte	0x161
 8103 1e64 CC020000 		.4byte	0x2cc
 8104 1e68 05       		.uleb128 0x5
 8105 1e69 03       		.byte	0x3
 8106 1e6a A8000000 		.4byte	xDelayedTaskList2
 8107 1e6e 23       		.uleb128 0x23
 8108 1e6f E20E0000 		.4byte	.LASF231
 8109 1e73 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 243


 8110 1e74 6201     		.2byte	0x162
 8111 1e76 801E0000 		.4byte	0x1e80
 8112 1e7a 05       		.uleb128 0x5
 8113 1e7b 03       		.byte	0x3
 8114 1e7c 28000000 		.4byte	pxDelayedTaskList
 8115 1e80 0A       		.uleb128 0xa
 8116 1e81 840B0000 		.4byte	0xb84
 8117 1e85 23       		.uleb128 0x23
 8118 1e86 0E0F0000 		.4byte	.LASF232
 8119 1e8a 01       		.byte	0x1
 8120 1e8b 6301     		.2byte	0x163
 8121 1e8d 801E0000 		.4byte	0x1e80
 8122 1e91 05       		.uleb128 0x5
 8123 1e92 03       		.byte	0x3
 8124 1e93 D0000000 		.4byte	pxOverflowDelayedTaskList
 8125 1e97 23       		.uleb128 0x23
 8126 1e98 AD060000 		.4byte	.LASF233
 8127 1e9c 01       		.byte	0x1
 8128 1e9d 6401     		.2byte	0x164
 8129 1e9f CC020000 		.4byte	0x2cc
 8130 1ea3 05       		.uleb128 0x5
 8131 1ea4 03       		.byte	0x3
 8132 1ea5 14000000 		.4byte	xPendingReadyList
 8133 1ea9 23       		.uleb128 0x23
 8134 1eaa 6B0F0000 		.4byte	.LASF234
 8135 1eae 01       		.byte	0x1
 8136 1eaf 6801     		.2byte	0x168
 8137 1eb1 CC020000 		.4byte	0x2cc
 8138 1eb5 05       		.uleb128 0x5
 8139 1eb6 03       		.byte	0x3
 8140 1eb7 BC000000 		.4byte	xTasksWaitingTermination
 8141 1ebb 23       		.uleb128 0x23
 8142 1ebc F4020000 		.4byte	.LASF235
 8143 1ec0 01       		.byte	0x1
 8144 1ec1 6901     		.2byte	0x169
 8145 1ec3 C1020000 		.4byte	0x2c1
 8146 1ec7 05       		.uleb128 0x5
 8147 1ec8 03       		.byte	0x3
 8148 1ec9 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8149 1ecd 23       		.uleb128 0x23
 8150 1ece DC030000 		.4byte	.LASF236
 8151 1ed2 01       		.byte	0x1
 8152 1ed3 6F01     		.2byte	0x16f
 8153 1ed5 CC020000 		.4byte	0x2cc
 8154 1ed9 05       		.uleb128 0x5
 8155 1eda 03       		.byte	0x3
 8156 1edb 00000000 		.4byte	xSuspendedTaskList
 8157 1edf 23       		.uleb128 0x23
 8158 1ee0 77070000 		.4byte	.LASF237
 8159 1ee4 01       		.byte	0x1
 8160 1ee5 7401     		.2byte	0x174
 8161 1ee7 C1020000 		.4byte	0x2c1
 8162 1eeb 05       		.uleb128 0x5
 8163 1eec 03       		.byte	0x3
 8164 1eed D4000000 		.4byte	uxCurrentNumberOfTasks
 8165 1ef1 23       		.uleb128 0x23
 8166 1ef2 F0000000 		.4byte	.LASF238
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 244


 8167 1ef6 01       		.byte	0x1
 8168 1ef7 7501     		.2byte	0x175
 8169 1ef9 031F0000 		.4byte	0x1f03
 8170 1efd 05       		.uleb128 0x5
 8171 1efe 03       		.byte	0x3
 8172 1eff EC000000 		.4byte	xTickCount
 8173 1f03 0A       		.uleb128 0xa
 8174 1f04 D9010000 		.4byte	0x1d9
 8175 1f08 23       		.uleb128 0x23
 8176 1f09 190E0000 		.4byte	.LASF239
 8177 1f0d 01       		.byte	0x1
 8178 1f0e 7601     		.2byte	0x176
 8179 1f10 C1020000 		.4byte	0x2c1
 8180 1f14 05       		.uleb128 0x5
 8181 1f15 03       		.byte	0x3
 8182 1f16 E4000000 		.4byte	uxTopReadyPriority
 8183 1f1a 23       		.uleb128 0x23
 8184 1f1b 73050000 		.4byte	.LASF240
 8185 1f1f 01       		.byte	0x1
 8186 1f20 7701     		.2byte	0x177
 8187 1f22 2C1F0000 		.4byte	0x1f2c
 8188 1f26 05       		.uleb128 0x5
 8189 1f27 03       		.byte	0x3
 8190 1f28 DC000000 		.4byte	xSchedulerRunning
 8191 1f2c 0A       		.uleb128 0xa
 8192 1f2d C3010000 		.4byte	0x1c3
 8193 1f31 23       		.uleb128 0x23
 8194 1f32 14050000 		.4byte	.LASF241
 8195 1f36 01       		.byte	0x1
 8196 1f37 7801     		.2byte	0x178
 8197 1f39 C1020000 		.4byte	0x2c1
 8198 1f3d 05       		.uleb128 0x5
 8199 1f3e 03       		.byte	0x3
 8200 1f3f FC000000 		.4byte	uxPendedTicks
 8201 1f43 23       		.uleb128 0x23
 8202 1f44 0F000000 		.4byte	.LASF242
 8203 1f48 01       		.byte	0x1
 8204 1f49 7901     		.2byte	0x179
 8205 1f4b 2C1F0000 		.4byte	0x1f2c
 8206 1f4f 05       		.uleb128 0x5
 8207 1f50 03       		.byte	0x3
 8208 1f51 00010000 		.4byte	xYieldPending
 8209 1f55 23       		.uleb128 0x23
 8210 1f56 99040000 		.4byte	.LASF243
 8211 1f5a 01       		.byte	0x1
 8212 1f5b 7A01     		.2byte	0x17a
 8213 1f5d 2C1F0000 		.4byte	0x1f2c
 8214 1f61 05       		.uleb128 0x5
 8215 1f62 03       		.byte	0x3
 8216 1f63 F8000000 		.4byte	xNumOfOverflows
 8217 1f67 23       		.uleb128 0x23
 8218 1f68 FB000000 		.4byte	.LASF244
 8219 1f6c 01       		.byte	0x1
 8220 1f6d 7B01     		.2byte	0x17b
 8221 1f6f CE010000 		.4byte	0x1ce
 8222 1f73 05       		.uleb128 0x5
 8223 1f74 03       		.byte	0x3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 245


 8224 1f75 E0000000 		.4byte	uxTaskNumber
 8225 1f79 23       		.uleb128 0x23
 8226 1f7a 98060000 		.4byte	.LASF245
 8227 1f7e 01       		.byte	0x1
 8228 1f7f 7C01     		.2byte	0x17c
 8229 1f81 031F0000 		.4byte	0x1f03
 8230 1f85 05       		.uleb128 0x5
 8231 1f86 03       		.byte	0x3
 8232 1f87 2C000000 		.4byte	xNextTaskUnblockTime
 8233 1f8b 23       		.uleb128 0x23
 8234 1f8c 25080000 		.4byte	.LASF246
 8235 1f90 01       		.byte	0x1
 8236 1f91 7D01     		.2byte	0x17d
 8237 1f93 D7020000 		.4byte	0x2d7
 8238 1f97 05       		.uleb128 0x5
 8239 1f98 03       		.byte	0x3
 8240 1f99 F4000000 		.4byte	xIdleTaskHandle
 8241 1f9d 23       		.uleb128 0x23
 8242 1f9e 55060000 		.4byte	.LASF247
 8243 1fa2 01       		.byte	0x1
 8244 1fa3 8701     		.2byte	0x187
 8245 1fa5 C1020000 		.4byte	0x2c1
 8246 1fa9 05       		.uleb128 0x5
 8247 1faa 03       		.byte	0x3
 8248 1fab F0000000 		.4byte	uxSchedulerSuspended
 8249 1faf 29       		.uleb128 0x29
 8250 1fb0 E1020000 		.4byte	.LASF268
 8251 1fb4 01       		.byte	0x1
 8252 1fb5 5C01     		.2byte	0x15c
 8253 1fb7 C11F0000 		.4byte	0x1fc1
 8254 1fbb 05       		.uleb128 0x5
 8255 1fbc 03       		.byte	0x3
 8256 1fbd 00000000 		.4byte	pxCurrentTCB
 8257 1fc1 0A       		.uleb128 0xa
 8258 1fc2 6D050000 		.4byte	0x56d
 8259 1fc6 2A       		.uleb128 0x2a
 8260 1fc7 D0100000 		.4byte	.LASF248
 8261 1fcb D0100000 		.4byte	.LASF248
 8262 1fcf 0A       		.byte	0xa
 8263 1fd0 83       		.byte	0x83
 8264 1fd1 2A       		.uleb128 0x2a
 8265 1fd2 DD0D0000 		.4byte	.LASF249
 8266 1fd6 DD0D0000 		.4byte	.LASF249
 8267 1fda 0B       		.byte	0xb
 8268 1fdb 19       		.byte	0x19
 8269 1fdc 2B       		.uleb128 0x2b
 8270 1fdd 6E0B0000 		.4byte	.LASF250
 8271 1fe1 6E0B0000 		.4byte	.LASF250
 8272 1fe5 07       		.byte	0x7
 8273 1fe6 6401     		.2byte	0x164
 8274 1fe8 2A       		.uleb128 0x2a
 8275 1fe9 FE050000 		.4byte	.LASF251
 8276 1fed FE050000 		.4byte	.LASF251
 8277 1ff1 0A       		.byte	0xa
 8278 1ff2 67       		.byte	0x67
 8279 1ff3 2B       		.uleb128 0x2b
 8280 1ff4 A4030000 		.4byte	.LASF252
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 246


 8281 1ff8 A4030000 		.4byte	.LASF252
 8282 1ffc 07       		.byte	0x7
 8283 1ffd 5901     		.2byte	0x159
 8284 1fff 2A       		.uleb128 0x2a
 8285 2000 9E0C0000 		.4byte	.LASF253
 8286 2004 9E0C0000 		.4byte	.LASF253
 8287 2008 06       		.byte	0x6
 8288 2009 5B       		.byte	0x5b
 8289 200a 2B       		.uleb128 0x2b
 8290 200b C0030000 		.4byte	.LASF254
 8291 200f C0030000 		.4byte	.LASF254
 8292 2013 07       		.byte	0x7
 8293 2014 8601     		.2byte	0x186
 8294 2016 2A       		.uleb128 0x2a
 8295 2017 9A100000 		.4byte	.LASF255
 8296 201b 9A100000 		.4byte	.LASF255
 8297 201f 06       		.byte	0x6
 8298 2020 5C       		.byte	0x5c
 8299 2021 2A       		.uleb128 0x2a
 8300 2022 55090000 		.4byte	.LASF256
 8301 2026 55090000 		.4byte	.LASF256
 8302 202a 06       		.byte	0x6
 8303 202b 51       		.byte	0x51
 8304 202c 2B       		.uleb128 0x2b
 8305 202d D50E0000 		.4byte	.LASF257
 8306 2031 D50E0000 		.4byte	.LASF257
 8307 2035 07       		.byte	0x7
 8308 2036 9501     		.2byte	0x195
 8309 2038 2B       		.uleb128 0x2b
 8310 2039 28020000 		.4byte	.LASF258
 8311 203d 28020000 		.4byte	.LASF258
 8312 2041 07       		.byte	0x7
 8313 2042 7101     		.2byte	0x171
 8314 2044 2A       		.uleb128 0x2a
 8315 2045 CF030000 		.4byte	.LASF259
 8316 2049 CF030000 		.4byte	.LASF259
 8317 204d 0A       		.byte	0xa
 8318 204e 82       		.byte	0x82
 8319 204f 2A       		.uleb128 0x2a
 8320 2050 450E0000 		.4byte	.LASF260
 8321 2054 450E0000 		.4byte	.LASF260
 8322 2058 06       		.byte	0x6
 8323 2059 5D       		.byte	0x5d
 8324 205a 2A       		.uleb128 0x2a
 8325 205b 080A0000 		.4byte	.LASF261
 8326 205f 080A0000 		.4byte	.LASF261
 8327 2063 06       		.byte	0x6
 8328 2064 5E       		.byte	0x5e
 8329 2065 2A       		.uleb128 0x2a
 8330 2066 11080000 		.4byte	.LASF262
 8331 206a 11080000 		.4byte	.LASF262
 8332 206e 0A       		.byte	0xa
 8333 206f 8C       		.byte	0x8c
 8334 2070 2A       		.uleb128 0x2a
 8335 2071 71100000 		.4byte	.LASF263
 8336 2075 71100000 		.4byte	.LASF263
 8337 2079 0A       		.byte	0xa
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 247


 8338 207a 93       		.byte	0x93
 8339 207b 2B       		.uleb128 0x2b
 8340 207c A1050000 		.4byte	.LASF264
 8341 2080 A1050000 		.4byte	.LASF264
 8342 2084 01       		.byte	0x1
 8343 2085 9701     		.2byte	0x197
 8344 2087 00       		.byte	0
 8345              		.section	.debug_abbrev,"",%progbits
 8346              	.Ldebug_abbrev0:
 8347 0000 01       		.uleb128 0x1
 8348 0001 11       		.uleb128 0x11
 8349 0002 01       		.byte	0x1
 8350 0003 25       		.uleb128 0x25
 8351 0004 0E       		.uleb128 0xe
 8352 0005 13       		.uleb128 0x13
 8353 0006 0B       		.uleb128 0xb
 8354 0007 03       		.uleb128 0x3
 8355 0008 0E       		.uleb128 0xe
 8356 0009 1B       		.uleb128 0x1b
 8357 000a 0E       		.uleb128 0xe
 8358 000b 55       		.uleb128 0x55
 8359 000c 17       		.uleb128 0x17
 8360 000d 11       		.uleb128 0x11
 8361 000e 01       		.uleb128 0x1
 8362 000f 10       		.uleb128 0x10
 8363 0010 17       		.uleb128 0x17
 8364 0011 00       		.byte	0
 8365 0012 00       		.byte	0
 8366 0013 02       		.uleb128 0x2
 8367 0014 16       		.uleb128 0x16
 8368 0015 00       		.byte	0
 8369 0016 03       		.uleb128 0x3
 8370 0017 0E       		.uleb128 0xe
 8371 0018 3A       		.uleb128 0x3a
 8372 0019 0B       		.uleb128 0xb
 8373 001a 3B       		.uleb128 0x3b
 8374 001b 0B       		.uleb128 0xb
 8375 001c 49       		.uleb128 0x49
 8376 001d 13       		.uleb128 0x13
 8377 001e 00       		.byte	0
 8378 001f 00       		.byte	0
 8379 0020 03       		.uleb128 0x3
 8380 0021 24       		.uleb128 0x24
 8381 0022 00       		.byte	0
 8382 0023 0B       		.uleb128 0xb
 8383 0024 0B       		.uleb128 0xb
 8384 0025 3E       		.uleb128 0x3e
 8385 0026 0B       		.uleb128 0xb
 8386 0027 03       		.uleb128 0x3
 8387 0028 0E       		.uleb128 0xe
 8388 0029 00       		.byte	0
 8389 002a 00       		.byte	0
 8390 002b 04       		.uleb128 0x4
 8391 002c 24       		.uleb128 0x24
 8392 002d 00       		.byte	0
 8393 002e 0B       		.uleb128 0xb
 8394 002f 0B       		.uleb128 0xb
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 248


 8395 0030 3E       		.uleb128 0x3e
 8396 0031 0B       		.uleb128 0xb
 8397 0032 03       		.uleb128 0x3
 8398 0033 08       		.uleb128 0x8
 8399 0034 00       		.byte	0
 8400 0035 00       		.byte	0
 8401 0036 05       		.uleb128 0x5
 8402 0037 0F       		.uleb128 0xf
 8403 0038 00       		.byte	0
 8404 0039 0B       		.uleb128 0xb
 8405 003a 0B       		.uleb128 0xb
 8406 003b 00       		.byte	0
 8407 003c 00       		.byte	0
 8408 003d 06       		.uleb128 0x6
 8409 003e 0F       		.uleb128 0xf
 8410 003f 00       		.byte	0
 8411 0040 0B       		.uleb128 0xb
 8412 0041 0B       		.uleb128 0xb
 8413 0042 49       		.uleb128 0x49
 8414 0043 13       		.uleb128 0x13
 8415 0044 00       		.byte	0
 8416 0045 00       		.byte	0
 8417 0046 07       		.uleb128 0x7
 8418 0047 26       		.uleb128 0x26
 8419 0048 00       		.byte	0
 8420 0049 49       		.uleb128 0x49
 8421 004a 13       		.uleb128 0x13
 8422 004b 00       		.byte	0
 8423 004c 00       		.byte	0
 8424 004d 08       		.uleb128 0x8
 8425 004e 04       		.uleb128 0x4
 8426 004f 01       		.byte	0x1
 8427 0050 0B       		.uleb128 0xb
 8428 0051 0B       		.uleb128 0xb
 8429 0052 49       		.uleb128 0x49
 8430 0053 13       		.uleb128 0x13
 8431 0054 3A       		.uleb128 0x3a
 8432 0055 0B       		.uleb128 0xb
 8433 0056 3B       		.uleb128 0x3b
 8434 0057 0B       		.uleb128 0xb
 8435 0058 01       		.uleb128 0x1
 8436 0059 13       		.uleb128 0x13
 8437 005a 00       		.byte	0
 8438 005b 00       		.byte	0
 8439 005c 09       		.uleb128 0x9
 8440 005d 28       		.uleb128 0x28
 8441 005e 00       		.byte	0
 8442 005f 03       		.uleb128 0x3
 8443 0060 0E       		.uleb128 0xe
 8444 0061 1C       		.uleb128 0x1c
 8445 0062 0B       		.uleb128 0xb
 8446 0063 00       		.byte	0
 8447 0064 00       		.byte	0
 8448 0065 0A       		.uleb128 0xa
 8449 0066 35       		.uleb128 0x35
 8450 0067 00       		.byte	0
 8451 0068 49       		.uleb128 0x49
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 249


 8452 0069 13       		.uleb128 0x13
 8453 006a 00       		.byte	0
 8454 006b 00       		.byte	0
 8455 006c 0B       		.uleb128 0xb
 8456 006d 15       		.uleb128 0x15
 8457 006e 01       		.byte	0x1
 8458 006f 27       		.uleb128 0x27
 8459 0070 19       		.uleb128 0x19
 8460 0071 01       		.uleb128 0x1
 8461 0072 13       		.uleb128 0x13
 8462 0073 00       		.byte	0
 8463 0074 00       		.byte	0
 8464 0075 0C       		.uleb128 0xc
 8465 0076 05       		.uleb128 0x5
 8466 0077 00       		.byte	0
 8467 0078 49       		.uleb128 0x49
 8468 0079 13       		.uleb128 0x13
 8469 007a 00       		.byte	0
 8470 007b 00       		.byte	0
 8471 007c 0D       		.uleb128 0xd
 8472 007d 01       		.uleb128 0x1
 8473 007e 01       		.byte	0x1
 8474 007f 49       		.uleb128 0x49
 8475 0080 13       		.uleb128 0x13
 8476 0081 01       		.uleb128 0x1
 8477 0082 13       		.uleb128 0x13
 8478 0083 00       		.byte	0
 8479 0084 00       		.byte	0
 8480 0085 0E       		.uleb128 0xe
 8481 0086 21       		.uleb128 0x21
 8482 0087 00       		.byte	0
 8483 0088 49       		.uleb128 0x49
 8484 0089 13       		.uleb128 0x13
 8485 008a 2F       		.uleb128 0x2f
 8486 008b 0B       		.uleb128 0xb
 8487 008c 00       		.byte	0
 8488 008d 00       		.byte	0
 8489 008e 0F       		.uleb128 0xf
 8490 008f 13       		.uleb128 0x13
 8491 0090 01       		.byte	0x1
 8492 0091 03       		.uleb128 0x3
 8493 0092 0E       		.uleb128 0xe
 8494 0093 0B       		.uleb128 0xb
 8495 0094 0B       		.uleb128 0xb
 8496 0095 3A       		.uleb128 0x3a
 8497 0096 0B       		.uleb128 0xb
 8498 0097 3B       		.uleb128 0x3b
 8499 0098 0B       		.uleb128 0xb
 8500 0099 01       		.uleb128 0x1
 8501 009a 13       		.uleb128 0x13
 8502 009b 00       		.byte	0
 8503 009c 00       		.byte	0
 8504 009d 10       		.uleb128 0x10
 8505 009e 0D       		.uleb128 0xd
 8506 009f 00       		.byte	0
 8507 00a0 03       		.uleb128 0x3
 8508 00a1 0E       		.uleb128 0xe
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 250


 8509 00a2 3A       		.uleb128 0x3a
 8510 00a3 0B       		.uleb128 0xb
 8511 00a4 3B       		.uleb128 0x3b
 8512 00a5 0B       		.uleb128 0xb
 8513 00a6 49       		.uleb128 0x49
 8514 00a7 13       		.uleb128 0x13
 8515 00a8 38       		.uleb128 0x38
 8516 00a9 0B       		.uleb128 0xb
 8517 00aa 00       		.byte	0
 8518 00ab 00       		.byte	0
 8519 00ac 11       		.uleb128 0x11
 8520 00ad 13       		.uleb128 0x13
 8521 00ae 01       		.byte	0x1
 8522 00af 03       		.uleb128 0x3
 8523 00b0 0E       		.uleb128 0xe
 8524 00b1 0B       		.uleb128 0xb
 8525 00b2 0B       		.uleb128 0xb
 8526 00b3 3A       		.uleb128 0x3a
 8527 00b4 0B       		.uleb128 0xb
 8528 00b5 3B       		.uleb128 0x3b
 8529 00b6 05       		.uleb128 0x5
 8530 00b7 01       		.uleb128 0x1
 8531 00b8 13       		.uleb128 0x13
 8532 00b9 00       		.byte	0
 8533 00ba 00       		.byte	0
 8534 00bb 12       		.uleb128 0x12
 8535 00bc 0D       		.uleb128 0xd
 8536 00bd 00       		.byte	0
 8537 00be 03       		.uleb128 0x3
 8538 00bf 0E       		.uleb128 0xe
 8539 00c0 3A       		.uleb128 0x3a
 8540 00c1 0B       		.uleb128 0xb
 8541 00c2 3B       		.uleb128 0x3b
 8542 00c3 05       		.uleb128 0x5
 8543 00c4 49       		.uleb128 0x49
 8544 00c5 13       		.uleb128 0x13
 8545 00c6 38       		.uleb128 0x38
 8546 00c7 0B       		.uleb128 0xb
 8547 00c8 00       		.byte	0
 8548 00c9 00       		.byte	0
 8549 00ca 13       		.uleb128 0x13
 8550 00cb 16       		.uleb128 0x16
 8551 00cc 00       		.byte	0
 8552 00cd 03       		.uleb128 0x3
 8553 00ce 0E       		.uleb128 0xe
 8554 00cf 3A       		.uleb128 0x3a
 8555 00d0 0B       		.uleb128 0xb
 8556 00d1 3B       		.uleb128 0x3b
 8557 00d2 05       		.uleb128 0x5
 8558 00d3 49       		.uleb128 0x49
 8559 00d4 13       		.uleb128 0x13
 8560 00d5 00       		.byte	0
 8561 00d6 00       		.byte	0
 8562 00d7 14       		.uleb128 0x14
 8563 00d8 2E       		.uleb128 0x2e
 8564 00d9 01       		.byte	0x1
 8565 00da 03       		.uleb128 0x3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 251


 8566 00db 0E       		.uleb128 0xe
 8567 00dc 3A       		.uleb128 0x3a
 8568 00dd 0B       		.uleb128 0xb
 8569 00de 3B       		.uleb128 0x3b
 8570 00df 05       		.uleb128 0x5
 8571 00e0 27       		.uleb128 0x27
 8572 00e1 19       		.uleb128 0x19
 8573 00e2 49       		.uleb128 0x49
 8574 00e3 13       		.uleb128 0x13
 8575 00e4 11       		.uleb128 0x11
 8576 00e5 01       		.uleb128 0x1
 8577 00e6 12       		.uleb128 0x12
 8578 00e7 06       		.uleb128 0x6
 8579 00e8 40       		.uleb128 0x40
 8580 00e9 18       		.uleb128 0x18
 8581 00ea 9742     		.uleb128 0x2117
 8582 00ec 19       		.uleb128 0x19
 8583 00ed 01       		.uleb128 0x1
 8584 00ee 13       		.uleb128 0x13
 8585 00ef 00       		.byte	0
 8586 00f0 00       		.byte	0
 8587 00f1 15       		.uleb128 0x15
 8588 00f2 05       		.uleb128 0x5
 8589 00f3 00       		.byte	0
 8590 00f4 03       		.uleb128 0x3
 8591 00f5 0E       		.uleb128 0xe
 8592 00f6 3A       		.uleb128 0x3a
 8593 00f7 0B       		.uleb128 0xb
 8594 00f8 3B       		.uleb128 0x3b
 8595 00f9 05       		.uleb128 0x5
 8596 00fa 49       		.uleb128 0x49
 8597 00fb 13       		.uleb128 0x13
 8598 00fc 02       		.uleb128 0x2
 8599 00fd 17       		.uleb128 0x17
 8600 00fe 00       		.byte	0
 8601 00ff 00       		.byte	0
 8602 0100 16       		.uleb128 0x16
 8603 0101 34       		.uleb128 0x34
 8604 0102 00       		.byte	0
 8605 0103 03       		.uleb128 0x3
 8606 0104 0E       		.uleb128 0xe
 8607 0105 3A       		.uleb128 0x3a
 8608 0106 0B       		.uleb128 0xb
 8609 0107 3B       		.uleb128 0x3b
 8610 0108 05       		.uleb128 0x5
 8611 0109 49       		.uleb128 0x49
 8612 010a 13       		.uleb128 0x13
 8613 010b 02       		.uleb128 0x2
 8614 010c 17       		.uleb128 0x17
 8615 010d 00       		.byte	0
 8616 010e 00       		.byte	0
 8617 010f 17       		.uleb128 0x17
 8618 0110 2E       		.uleb128 0x2e
 8619 0111 01       		.byte	0x1
 8620 0112 03       		.uleb128 0x3
 8621 0113 0E       		.uleb128 0xe
 8622 0114 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 252


 8623 0115 0B       		.uleb128 0xb
 8624 0116 3B       		.uleb128 0x3b
 8625 0117 05       		.uleb128 0x5
 8626 0118 27       		.uleb128 0x27
 8627 0119 19       		.uleb128 0x19
 8628 011a 11       		.uleb128 0x11
 8629 011b 01       		.uleb128 0x1
 8630 011c 12       		.uleb128 0x12
 8631 011d 06       		.uleb128 0x6
 8632 011e 40       		.uleb128 0x40
 8633 011f 18       		.uleb128 0x18
 8634 0120 9742     		.uleb128 0x2117
 8635 0122 19       		.uleb128 0x19
 8636 0123 01       		.uleb128 0x1
 8637 0124 13       		.uleb128 0x13
 8638 0125 00       		.byte	0
 8639 0126 00       		.byte	0
 8640 0127 18       		.uleb128 0x18
 8641 0128 898201   		.uleb128 0x4109
 8642 012b 00       		.byte	0
 8643 012c 11       		.uleb128 0x11
 8644 012d 01       		.uleb128 0x1
 8645 012e 31       		.uleb128 0x31
 8646 012f 13       		.uleb128 0x13
 8647 0130 00       		.byte	0
 8648 0131 00       		.byte	0
 8649 0132 19       		.uleb128 0x19
 8650 0133 898201   		.uleb128 0x4109
 8651 0136 01       		.byte	0x1
 8652 0137 11       		.uleb128 0x11
 8653 0138 01       		.uleb128 0x1
 8654 0139 31       		.uleb128 0x31
 8655 013a 13       		.uleb128 0x13
 8656 013b 00       		.byte	0
 8657 013c 00       		.byte	0
 8658 013d 1A       		.uleb128 0x1a
 8659 013e 8A8201   		.uleb128 0x410a
 8660 0141 00       		.byte	0
 8661 0142 02       		.uleb128 0x2
 8662 0143 18       		.uleb128 0x18
 8663 0144 9142     		.uleb128 0x2111
 8664 0146 18       		.uleb128 0x18
 8665 0147 00       		.byte	0
 8666 0148 00       		.byte	0
 8667 0149 1B       		.uleb128 0x1b
 8668 014a 05       		.uleb128 0x5
 8669 014b 00       		.byte	0
 8670 014c 03       		.uleb128 0x3
 8671 014d 0E       		.uleb128 0xe
 8672 014e 3A       		.uleb128 0x3a
 8673 014f 0B       		.uleb128 0xb
 8674 0150 3B       		.uleb128 0x3b
 8675 0151 05       		.uleb128 0x5
 8676 0152 49       		.uleb128 0x49
 8677 0153 13       		.uleb128 0x13
 8678 0154 02       		.uleb128 0x2
 8679 0155 18       		.uleb128 0x18
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 253


 8680 0156 00       		.byte	0
 8681 0157 00       		.byte	0
 8682 0158 1C       		.uleb128 0x1c
 8683 0159 34       		.uleb128 0x34
 8684 015a 00       		.byte	0
 8685 015b 03       		.uleb128 0x3
 8686 015c 08       		.uleb128 0x8
 8687 015d 3A       		.uleb128 0x3a
 8688 015e 0B       		.uleb128 0xb
 8689 015f 3B       		.uleb128 0x3b
 8690 0160 05       		.uleb128 0x5
 8691 0161 49       		.uleb128 0x49
 8692 0162 13       		.uleb128 0x13
 8693 0163 02       		.uleb128 0x2
 8694 0164 17       		.uleb128 0x17
 8695 0165 00       		.byte	0
 8696 0166 00       		.byte	0
 8697 0167 1D       		.uleb128 0x1d
 8698 0168 898201   		.uleb128 0x4109
 8699 016b 01       		.byte	0x1
 8700 016c 11       		.uleb128 0x11
 8701 016d 01       		.uleb128 0x1
 8702 016e 31       		.uleb128 0x31
 8703 016f 13       		.uleb128 0x13
 8704 0170 01       		.uleb128 0x1
 8705 0171 13       		.uleb128 0x13
 8706 0172 00       		.byte	0
 8707 0173 00       		.byte	0
 8708 0174 1E       		.uleb128 0x1e
 8709 0175 0B       		.uleb128 0xb
 8710 0176 01       		.byte	0x1
 8711 0177 11       		.uleb128 0x11
 8712 0178 01       		.uleb128 0x1
 8713 0179 12       		.uleb128 0x12
 8714 017a 06       		.uleb128 0x6
 8715 017b 00       		.byte	0
 8716 017c 00       		.byte	0
 8717 017d 1F       		.uleb128 0x1f
 8718 017e 2E       		.uleb128 0x2e
 8719 017f 01       		.byte	0x1
 8720 0180 03       		.uleb128 0x3
 8721 0181 0E       		.uleb128 0xe
 8722 0182 3A       		.uleb128 0x3a
 8723 0183 0B       		.uleb128 0xb
 8724 0184 3B       		.uleb128 0x3b
 8725 0185 05       		.uleb128 0x5
 8726 0186 27       		.uleb128 0x27
 8727 0187 19       		.uleb128 0x19
 8728 0188 8701     		.uleb128 0x87
 8729 018a 19       		.uleb128 0x19
 8730 018b 11       		.uleb128 0x11
 8731 018c 01       		.uleb128 0x1
 8732 018d 12       		.uleb128 0x12
 8733 018e 06       		.uleb128 0x6
 8734 018f 40       		.uleb128 0x40
 8735 0190 18       		.uleb128 0x18
 8736 0191 9742     		.uleb128 0x2117
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 254


 8737 0193 19       		.uleb128 0x19
 8738 0194 01       		.uleb128 0x1
 8739 0195 13       		.uleb128 0x13
 8740 0196 00       		.byte	0
 8741 0197 00       		.byte	0
 8742 0198 20       		.uleb128 0x20
 8743 0199 2E       		.uleb128 0x2e
 8744 019a 01       		.byte	0x1
 8745 019b 3F       		.uleb128 0x3f
 8746 019c 19       		.uleb128 0x19
 8747 019d 03       		.uleb128 0x3
 8748 019e 0E       		.uleb128 0xe
 8749 019f 3A       		.uleb128 0x3a
 8750 01a0 0B       		.uleb128 0xb
 8751 01a1 3B       		.uleb128 0x3b
 8752 01a2 05       		.uleb128 0x5
 8753 01a3 27       		.uleb128 0x27
 8754 01a4 19       		.uleb128 0x19
 8755 01a5 49       		.uleb128 0x49
 8756 01a6 13       		.uleb128 0x13
 8757 01a7 11       		.uleb128 0x11
 8758 01a8 01       		.uleb128 0x1
 8759 01a9 12       		.uleb128 0x12
 8760 01aa 06       		.uleb128 0x6
 8761 01ab 40       		.uleb128 0x40
 8762 01ac 18       		.uleb128 0x18
 8763 01ad 9742     		.uleb128 0x2117
 8764 01af 19       		.uleb128 0x19
 8765 01b0 01       		.uleb128 0x1
 8766 01b1 13       		.uleb128 0x13
 8767 01b2 00       		.byte	0
 8768 01b3 00       		.byte	0
 8769 01b4 21       		.uleb128 0x21
 8770 01b5 0B       		.uleb128 0xb
 8771 01b6 01       		.byte	0x1
 8772 01b7 11       		.uleb128 0x11
 8773 01b8 01       		.uleb128 0x1
 8774 01b9 12       		.uleb128 0x12
 8775 01ba 06       		.uleb128 0x6
 8776 01bb 01       		.uleb128 0x1
 8777 01bc 13       		.uleb128 0x13
 8778 01bd 00       		.byte	0
 8779 01be 00       		.byte	0
 8780 01bf 22       		.uleb128 0x22
 8781 01c0 2E       		.uleb128 0x2e
 8782 01c1 01       		.byte	0x1
 8783 01c2 3F       		.uleb128 0x3f
 8784 01c3 19       		.uleb128 0x19
 8785 01c4 03       		.uleb128 0x3
 8786 01c5 0E       		.uleb128 0xe
 8787 01c6 3A       		.uleb128 0x3a
 8788 01c7 0B       		.uleb128 0xb
 8789 01c8 3B       		.uleb128 0x3b
 8790 01c9 05       		.uleb128 0x5
 8791 01ca 27       		.uleb128 0x27
 8792 01cb 19       		.uleb128 0x19
 8793 01cc 11       		.uleb128 0x11
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 255


 8794 01cd 01       		.uleb128 0x1
 8795 01ce 12       		.uleb128 0x12
 8796 01cf 06       		.uleb128 0x6
 8797 01d0 40       		.uleb128 0x40
 8798 01d1 18       		.uleb128 0x18
 8799 01d2 9742     		.uleb128 0x2117
 8800 01d4 19       		.uleb128 0x19
 8801 01d5 01       		.uleb128 0x1
 8802 01d6 13       		.uleb128 0x13
 8803 01d7 00       		.byte	0
 8804 01d8 00       		.byte	0
 8805 01d9 23       		.uleb128 0x23
 8806 01da 34       		.uleb128 0x34
 8807 01db 00       		.byte	0
 8808 01dc 03       		.uleb128 0x3
 8809 01dd 0E       		.uleb128 0xe
 8810 01de 3A       		.uleb128 0x3a
 8811 01df 0B       		.uleb128 0xb
 8812 01e0 3B       		.uleb128 0x3b
 8813 01e1 05       		.uleb128 0x5
 8814 01e2 49       		.uleb128 0x49
 8815 01e3 13       		.uleb128 0x13
 8816 01e4 02       		.uleb128 0x2
 8817 01e5 18       		.uleb128 0x18
 8818 01e6 00       		.byte	0
 8819 01e7 00       		.byte	0
 8820 01e8 24       		.uleb128 0x24
 8821 01e9 2E       		.uleb128 0x2e
 8822 01ea 00       		.byte	0
 8823 01eb 3F       		.uleb128 0x3f
 8824 01ec 19       		.uleb128 0x19
 8825 01ed 03       		.uleb128 0x3
 8826 01ee 0E       		.uleb128 0xe
 8827 01ef 3A       		.uleb128 0x3a
 8828 01f0 0B       		.uleb128 0xb
 8829 01f1 3B       		.uleb128 0x3b
 8830 01f2 05       		.uleb128 0x5
 8831 01f3 27       		.uleb128 0x27
 8832 01f4 19       		.uleb128 0x19
 8833 01f5 11       		.uleb128 0x11
 8834 01f6 01       		.uleb128 0x1
 8835 01f7 12       		.uleb128 0x12
 8836 01f8 06       		.uleb128 0x6
 8837 01f9 40       		.uleb128 0x40
 8838 01fa 18       		.uleb128 0x18
 8839 01fb 9742     		.uleb128 0x2117
 8840 01fd 19       		.uleb128 0x19
 8841 01fe 00       		.byte	0
 8842 01ff 00       		.byte	0
 8843 0200 25       		.uleb128 0x25
 8844 0201 34       		.uleb128 0x34
 8845 0202 00       		.byte	0
 8846 0203 03       		.uleb128 0x3
 8847 0204 0E       		.uleb128 0xe
 8848 0205 3A       		.uleb128 0x3a
 8849 0206 0B       		.uleb128 0xb
 8850 0207 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 256


 8851 0208 05       		.uleb128 0x5
 8852 0209 49       		.uleb128 0x49
 8853 020a 13       		.uleb128 0x13
 8854 020b 1C       		.uleb128 0x1c
 8855 020c 0B       		.uleb128 0xb
 8856 020d 00       		.byte	0
 8857 020e 00       		.byte	0
 8858 020f 26       		.uleb128 0x26
 8859 0210 2E       		.uleb128 0x2e
 8860 0211 00       		.byte	0
 8861 0212 3F       		.uleb128 0x3f
 8862 0213 19       		.uleb128 0x19
 8863 0214 03       		.uleb128 0x3
 8864 0215 0E       		.uleb128 0xe
 8865 0216 3A       		.uleb128 0x3a
 8866 0217 0B       		.uleb128 0xb
 8867 0218 3B       		.uleb128 0x3b
 8868 0219 05       		.uleb128 0x5
 8869 021a 27       		.uleb128 0x27
 8870 021b 19       		.uleb128 0x19
 8871 021c 49       		.uleb128 0x49
 8872 021d 13       		.uleb128 0x13
 8873 021e 11       		.uleb128 0x11
 8874 021f 01       		.uleb128 0x1
 8875 0220 12       		.uleb128 0x12
 8876 0221 06       		.uleb128 0x6
 8877 0222 40       		.uleb128 0x40
 8878 0223 18       		.uleb128 0x18
 8879 0224 9742     		.uleb128 0x2117
 8880 0226 19       		.uleb128 0x19
 8881 0227 00       		.byte	0
 8882 0228 00       		.byte	0
 8883 0229 27       		.uleb128 0x27
 8884 022a 0B       		.uleb128 0xb
 8885 022b 01       		.byte	0x1
 8886 022c 55       		.uleb128 0x55
 8887 022d 17       		.uleb128 0x17
 8888 022e 00       		.byte	0
 8889 022f 00       		.byte	0
 8890 0230 28       		.uleb128 0x28
 8891 0231 0B       		.uleb128 0xb
 8892 0232 01       		.byte	0x1
 8893 0233 55       		.uleb128 0x55
 8894 0234 17       		.uleb128 0x17
 8895 0235 01       		.uleb128 0x1
 8896 0236 13       		.uleb128 0x13
 8897 0237 00       		.byte	0
 8898 0238 00       		.byte	0
 8899 0239 29       		.uleb128 0x29
 8900 023a 34       		.uleb128 0x34
 8901 023b 00       		.byte	0
 8902 023c 03       		.uleb128 0x3
 8903 023d 0E       		.uleb128 0xe
 8904 023e 3A       		.uleb128 0x3a
 8905 023f 0B       		.uleb128 0xb
 8906 0240 3B       		.uleb128 0x3b
 8907 0241 05       		.uleb128 0x5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 257


 8908 0242 49       		.uleb128 0x49
 8909 0243 13       		.uleb128 0x13
 8910 0244 3F       		.uleb128 0x3f
 8911 0245 19       		.uleb128 0x19
 8912 0246 02       		.uleb128 0x2
 8913 0247 18       		.uleb128 0x18
 8914 0248 00       		.byte	0
 8915 0249 00       		.byte	0
 8916 024a 2A       		.uleb128 0x2a
 8917 024b 2E       		.uleb128 0x2e
 8918 024c 00       		.byte	0
 8919 024d 3F       		.uleb128 0x3f
 8920 024e 19       		.uleb128 0x19
 8921 024f 3C       		.uleb128 0x3c
 8922 0250 19       		.uleb128 0x19
 8923 0251 6E       		.uleb128 0x6e
 8924 0252 0E       		.uleb128 0xe
 8925 0253 03       		.uleb128 0x3
 8926 0254 0E       		.uleb128 0xe
 8927 0255 3A       		.uleb128 0x3a
 8928 0256 0B       		.uleb128 0xb
 8929 0257 3B       		.uleb128 0x3b
 8930 0258 0B       		.uleb128 0xb
 8931 0259 00       		.byte	0
 8932 025a 00       		.byte	0
 8933 025b 2B       		.uleb128 0x2b
 8934 025c 2E       		.uleb128 0x2e
 8935 025d 00       		.byte	0
 8936 025e 3F       		.uleb128 0x3f
 8937 025f 19       		.uleb128 0x19
 8938 0260 3C       		.uleb128 0x3c
 8939 0261 19       		.uleb128 0x19
 8940 0262 6E       		.uleb128 0x6e
 8941 0263 0E       		.uleb128 0xe
 8942 0264 03       		.uleb128 0x3
 8943 0265 0E       		.uleb128 0xe
 8944 0266 3A       		.uleb128 0x3a
 8945 0267 0B       		.uleb128 0xb
 8946 0268 3B       		.uleb128 0x3b
 8947 0269 05       		.uleb128 0x5
 8948 026a 00       		.byte	0
 8949 026b 00       		.byte	0
 8950 026c 00       		.byte	0
 8951              		.section	.debug_loc,"",%progbits
 8952              	.Ldebug_loc0:
 8953              	.LLST0:
 8954 0000 00000000 		.4byte	.LVL0
 8955 0004 28000000 		.4byte	.LVL1
 8956 0008 0100     		.2byte	0x1
 8957 000a 50       		.byte	0x50
 8958 000b 28000000 		.4byte	.LVL1
 8959 000f 2A000000 		.4byte	.LVL2
 8960 0013 0400     		.2byte	0x4
 8961 0015 F3       		.byte	0xf3
 8962 0016 01       		.uleb128 0x1
 8963 0017 50       		.byte	0x50
 8964 0018 9F       		.byte	0x9f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 258


 8965 0019 2A000000 		.4byte	.LVL2
 8966 001d 2C000000 		.4byte	.LVL3
 8967 0021 0100     		.2byte	0x1
 8968 0023 50       		.byte	0x50
 8969 0024 2C000000 		.4byte	.LVL3
 8970 0028 2E000000 		.4byte	.LVL4
 8971 002c 0400     		.2byte	0x4
 8972 002e F3       		.byte	0xf3
 8973 002f 01       		.uleb128 0x1
 8974 0030 50       		.byte	0x50
 8975 0031 9F       		.byte	0x9f
 8976 0032 2E000000 		.4byte	.LVL4
 8977 0036 30000000 		.4byte	.LVL5
 8978 003a 0100     		.2byte	0x1
 8979 003c 50       		.byte	0x50
 8980 003d 30000000 		.4byte	.LVL5
 8981 0041 32000000 		.4byte	.LVL6
 8982 0045 0400     		.2byte	0x4
 8983 0047 F3       		.byte	0xf3
 8984 0048 01       		.uleb128 0x1
 8985 0049 50       		.byte	0x50
 8986 004a 9F       		.byte	0x9f
 8987 004b 32000000 		.4byte	.LVL6
 8988 004f 34000000 		.4byte	.LVL7
 8989 0053 0100     		.2byte	0x1
 8990 0055 50       		.byte	0x50
 8991 0056 34000000 		.4byte	.LVL7
 8992 005a 3C000000 		.4byte	.LFE43
 8993 005e 0400     		.2byte	0x4
 8994 0060 F3       		.byte	0xf3
 8995 0061 01       		.uleb128 0x1
 8996 0062 50       		.byte	0x50
 8997 0063 9F       		.byte	0x9f
 8998 0064 00000000 		.4byte	0
 8999 0068 00000000 		.4byte	0
 9000              	.LLST1:
 9001 006c 00000000 		.4byte	.LVL0
 9002 0070 34000000 		.4byte	.LVL7
 9003 0074 0200     		.2byte	0x2
 9004 0076 30       		.byte	0x30
 9005 0077 9F       		.byte	0x9f
 9006 0078 34000000 		.4byte	.LVL7
 9007 007c 3C000000 		.4byte	.LFE43
 9008 0080 0100     		.2byte	0x1
 9009 0082 50       		.byte	0x50
 9010 0083 00000000 		.4byte	0
 9011 0087 00000000 		.4byte	0
 9012              	.LLST2:
 9013 008b 00000000 		.4byte	.LVL0
 9014 008f 28000000 		.4byte	.LVL1
 9015 0093 0100     		.2byte	0x1
 9016 0095 50       		.byte	0x50
 9017 0096 28000000 		.4byte	.LVL1
 9018 009a 2A000000 		.4byte	.LVL2
 9019 009e 0400     		.2byte	0x4
 9020 00a0 F3       		.byte	0xf3
 9021 00a1 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 259


 9022 00a2 50       		.byte	0x50
 9023 00a3 9F       		.byte	0x9f
 9024 00a4 2A000000 		.4byte	.LVL2
 9025 00a8 2C000000 		.4byte	.LVL3
 9026 00ac 0100     		.2byte	0x1
 9027 00ae 50       		.byte	0x50
 9028 00af 2C000000 		.4byte	.LVL3
 9029 00b3 2E000000 		.4byte	.LVL4
 9030 00b7 0400     		.2byte	0x4
 9031 00b9 F3       		.byte	0xf3
 9032 00ba 01       		.uleb128 0x1
 9033 00bb 50       		.byte	0x50
 9034 00bc 9F       		.byte	0x9f
 9035 00bd 2E000000 		.4byte	.LVL4
 9036 00c1 30000000 		.4byte	.LVL5
 9037 00c5 0100     		.2byte	0x1
 9038 00c7 50       		.byte	0x50
 9039 00c8 30000000 		.4byte	.LVL5
 9040 00cc 32000000 		.4byte	.LVL6
 9041 00d0 0400     		.2byte	0x4
 9042 00d2 F3       		.byte	0xf3
 9043 00d3 01       		.uleb128 0x1
 9044 00d4 50       		.byte	0x50
 9045 00d5 9F       		.byte	0x9f
 9046 00d6 32000000 		.4byte	.LVL6
 9047 00da 34000000 		.4byte	.LVL7
 9048 00de 0100     		.2byte	0x1
 9049 00e0 50       		.byte	0x50
 9050 00e1 34000000 		.4byte	.LVL7
 9051 00e5 3C000000 		.4byte	.LFE43
 9052 00e9 0400     		.2byte	0x4
 9053 00eb F3       		.byte	0xf3
 9054 00ec 01       		.uleb128 0x1
 9055 00ed 50       		.byte	0x50
 9056 00ee 9F       		.byte	0x9f
 9057 00ef 00000000 		.4byte	0
 9058 00f3 00000000 		.4byte	0
 9059              	.LLST3:
 9060 00f7 00000000 		.4byte	.LVL8
 9061 00fb 06000000 		.4byte	.LVL10
 9062 00ff 0100     		.2byte	0x1
 9063 0101 50       		.byte	0x50
 9064 0102 06000000 		.4byte	.LVL10
 9065 0106 12000000 		.4byte	.LVL13
 9066 010a 0100     		.2byte	0x1
 9067 010c 50       		.byte	0x50
 9068 010d 00000000 		.4byte	0
 9069 0111 00000000 		.4byte	0
 9070              	.LLST4:
 9071 0115 00000000 		.4byte	.LVL8
 9072 0119 04000000 		.4byte	.LVL9
 9073 011d 0200     		.2byte	0x2
 9074 011f 30       		.byte	0x30
 9075 0120 9F       		.byte	0x9f
 9076 0121 04000000 		.4byte	.LVL9
 9077 0125 14000000 		.4byte	.LFE69
 9078 0129 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 260


 9079 012b 53       		.byte	0x53
 9080 012c 00000000 		.4byte	0
 9081 0130 00000000 		.4byte	0
 9082              	.LLST5:
 9083 0134 26000000 		.4byte	.LVL14
 9084 0138 28000000 		.4byte	.LVL15
 9085 013c 0100     		.2byte	0x1
 9086 013e 52       		.byte	0x52
 9087 013f 00000000 		.4byte	0
 9088 0143 00000000 		.4byte	0
 9089              	.LLST6:
 9090 0147 00000000 		.4byte	.LVL16
 9091 014b 06000000 		.4byte	.LVL17
 9092 014f 0100     		.2byte	0x1
 9093 0151 50       		.byte	0x50
 9094 0152 06000000 		.4byte	.LVL17
 9095 0156 10000000 		.4byte	.LVL20
 9096 015a 0100     		.2byte	0x1
 9097 015c 54       		.byte	0x54
 9098 015d 10000000 		.4byte	.LVL20
 9099 0161 12000000 		.4byte	.LFE71
 9100 0165 0400     		.2byte	0x4
 9101 0167 F3       		.byte	0xf3
 9102 0168 01       		.uleb128 0x1
 9103 0169 50       		.byte	0x50
 9104 016a 9F       		.byte	0x9f
 9105 016b 00000000 		.4byte	0
 9106 016f 00000000 		.4byte	0
 9107              	.LLST7:
 9108 0173 00000000 		.4byte	.LVL21
 9109 0177 16000000 		.4byte	.LVL24
 9110 017b 0100     		.2byte	0x1
 9111 017d 50       		.byte	0x50
 9112 017e 16000000 		.4byte	.LVL24
 9113 0182 A6000000 		.4byte	.LVL42
 9114 0186 0200     		.2byte	0x2
 9115 0188 7D       		.byte	0x7d
 9116 0189 00       		.sleb128 0
 9117 018a A6000000 		.4byte	.LVL42
 9118 018e AC000000 		.4byte	.LFE33
 9119 0192 0200     		.2byte	0x2
 9120 0194 91       		.byte	0x91
 9121 0195 60       		.sleb128 -32
 9122 0196 00000000 		.4byte	0
 9123 019a 00000000 		.4byte	0
 9124              	.LLST8:
 9125 019e 00000000 		.4byte	.LVL21
 9126 01a2 14000000 		.4byte	.LVL23
 9127 01a6 0100     		.2byte	0x1
 9128 01a8 51       		.byte	0x51
 9129 01a9 14000000 		.4byte	.LVL23
 9130 01ad A6000000 		.4byte	.LVL43
 9131 01b1 0100     		.2byte	0x1
 9132 01b3 55       		.byte	0x55
 9133 01b4 A6000000 		.4byte	.LVL43
 9134 01b8 AC000000 		.4byte	.LFE33
 9135 01bc 0400     		.2byte	0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 261


 9136 01be F3       		.byte	0xf3
 9137 01bf 01       		.uleb128 0x1
 9138 01c0 51       		.byte	0x51
 9139 01c1 9F       		.byte	0x9f
 9140 01c2 00000000 		.4byte	0
 9141 01c6 00000000 		.4byte	0
 9142              	.LLST9:
 9143 01ca 00000000 		.4byte	.LVL21
 9144 01ce 12000000 		.4byte	.LVL22
 9145 01d2 0100     		.2byte	0x1
 9146 01d4 52       		.byte	0x52
 9147 01d5 12000000 		.4byte	.LVL22
 9148 01d9 2C000000 		.4byte	.LVL28
 9149 01dd 0100     		.2byte	0x1
 9150 01df 57       		.byte	0x57
 9151 01e0 2C000000 		.4byte	.LVL28
 9152 01e4 AC000000 		.4byte	.LFE33
 9153 01e8 0400     		.2byte	0x4
 9154 01ea F3       		.byte	0xf3
 9155 01eb 01       		.uleb128 0x1
 9156 01ec 52       		.byte	0x52
 9157 01ed 9F       		.byte	0x9f
 9158 01ee 00000000 		.4byte	0
 9159 01f2 00000000 		.4byte	0
 9160              	.LLST10:
 9161 01f6 00000000 		.4byte	.LVL21
 9162 01fa 19000000 		.4byte	.LVL25-1
 9163 01fe 0100     		.2byte	0x1
 9164 0200 53       		.byte	0x53
 9165 0201 19000000 		.4byte	.LVL25-1
 9166 0205 AC000000 		.4byte	.LFE33
 9167 0209 0200     		.2byte	0x2
 9168 020b 91       		.byte	0x91
 9169 020c 64       		.sleb128 -28
 9170 020d 00000000 		.4byte	0
 9171 0211 00000000 		.4byte	0
 9172              	.LLST11:
 9173 0215 00000000 		.4byte	.LVL21
 9174 0219 52000000 		.4byte	.LVL33
 9175 021d 0200     		.2byte	0x2
 9176 021f 91       		.byte	0x91
 9177 0220 00       		.sleb128 0
 9178 0221 52000000 		.4byte	.LVL33
 9179 0225 6E000000 		.4byte	.LVL36
 9180 0229 0100     		.2byte	0x1
 9181 022b 54       		.byte	0x54
 9182 022c 00000000 		.4byte	0
 9183 0230 00000000 		.4byte	0
 9184              	.LLST12:
 9185 0234 26000000 		.4byte	.LVL26
 9186 0238 2A000000 		.4byte	.LVL27
 9187 023c 0100     		.2byte	0x1
 9188 023e 53       		.byte	0x53
 9189 023f 2A000000 		.4byte	.LVL27
 9190 0243 2C000000 		.4byte	.LVL28
 9191 0247 0C00     		.2byte	0xc
 9192 0249 77       		.byte	0x77
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 262


 9193 024a FFFFFFFF 		.sleb128 1073741823
 9193      03
 9194 024f 32       		.byte	0x32
 9195 0250 24       		.byte	0x24
 9196 0251 7C       		.byte	0x7c
 9197 0252 00       		.sleb128 0
 9198 0253 22       		.byte	0x22
 9199 0254 9F       		.byte	0x9f
 9200 0255 2C000000 		.4byte	.LVL28
 9201 0259 2E000000 		.4byte	.LVL29
 9202 025d 0100     		.2byte	0x1
 9203 025f 53       		.byte	0x53
 9204 0260 2E000000 		.4byte	.LVL29
 9205 0264 A6000000 		.4byte	.LVL44
 9206 0268 0100     		.2byte	0x1
 9207 026a 57       		.byte	0x57
 9208 026b 00000000 		.4byte	0
 9209 026f 00000000 		.4byte	0
 9210              	.LLST13:
 9211 0273 2C000000 		.4byte	.LVL28
 9212 0277 30000000 		.4byte	.LVL30
 9213 027b 0200     		.2byte	0x2
 9214 027d 30       		.byte	0x30
 9215 027e 9F       		.byte	0x9f
 9216 027f 30000000 		.4byte	.LVL30
 9217 0283 4A000000 		.4byte	.LVL32
 9218 0287 0100     		.2byte	0x1
 9219 0289 53       		.byte	0x53
 9220 028a 72000000 		.4byte	.LVL37
 9221 028e 76000000 		.4byte	.LVL38
 9222 0292 0200     		.2byte	0x2
 9223 0294 30       		.byte	0x30
 9224 0295 9F       		.byte	0x9f
 9225 0296 76000000 		.4byte	.LVL38
 9226 029a 8E000000 		.4byte	.LVL40
 9227 029e 0100     		.2byte	0x1
 9228 02a0 52       		.byte	0x52
 9229 02a1 00000000 		.4byte	0
 9230 02a5 00000000 		.4byte	0
 9231              	.LLST14:
 9232 02a9 02000000 		.4byte	.LVL45
 9233 02ad 06000000 		.4byte	.LVL46
 9234 02b1 0200     		.2byte	0x2
 9235 02b3 30       		.byte	0x30
 9236 02b4 9F       		.byte	0x9f
 9237 02b5 06000000 		.4byte	.LVL46
 9238 02b9 1E000000 		.4byte	.LVL49
 9239 02bd 0100     		.2byte	0x1
 9240 02bf 54       		.byte	0x54
 9241 02c0 00000000 		.4byte	0
 9242 02c4 00000000 		.4byte	0
 9243              	.LLST15:
 9244 02c8 00000000 		.4byte	.LVL55
 9245 02cc 07000000 		.4byte	.LVL56-1
 9246 02d0 0100     		.2byte	0x1
 9247 02d2 50       		.byte	0x50
 9248 02d3 07000000 		.4byte	.LVL56-1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 263


 9249 02d7 80000000 		.4byte	.LVL61
 9250 02db 0100     		.2byte	0x1
 9251 02dd 54       		.byte	0x54
 9252 02de 80000000 		.4byte	.LVL61
 9253 02e2 8C000000 		.4byte	.LFE34
 9254 02e6 0400     		.2byte	0x4
 9255 02e8 F3       		.byte	0xf3
 9256 02e9 01       		.uleb128 0x1
 9257 02ea 50       		.byte	0x50
 9258 02eb 9F       		.byte	0x9f
 9259 02ec 00000000 		.4byte	0
 9260 02f0 00000000 		.4byte	0
 9261              	.LLST16:
 9262 02f4 0E000000 		.4byte	.LVL63
 9263 02f8 2A000000 		.4byte	.LVL66
 9264 02fc 0100     		.2byte	0x1
 9265 02fe 55       		.byte	0x55
 9266 02ff 00000000 		.4byte	0
 9267 0303 00000000 		.4byte	0
 9268              	.LLST17:
 9269 0307 00000000 		.4byte	.LVL67
 9270 030b 02000000 		.4byte	.LVL68
 9271 030f 0100     		.2byte	0x1
 9272 0311 50       		.byte	0x50
 9273 0312 02000000 		.4byte	.LVL68
 9274 0316 08000000 		.4byte	.LFE64
 9275 031a 0400     		.2byte	0x4
 9276 031c F3       		.byte	0xf3
 9277 031d 01       		.uleb128 0x1
 9278 031e 50       		.byte	0x50
 9279 031f 9F       		.byte	0x9f
 9280 0320 00000000 		.4byte	0
 9281 0324 00000000 		.4byte	0
 9282              	.LLST18:
 9283 0328 00000000 		.4byte	.LVL70
 9284 032c 0C000000 		.4byte	.LVL72
 9285 0330 0100     		.2byte	0x1
 9286 0332 50       		.byte	0x50
 9287 0333 0C000000 		.4byte	.LVL72
 9288 0337 2A000000 		.4byte	.LVL75
 9289 033b 0100     		.2byte	0x1
 9290 033d 54       		.byte	0x54
 9291 033e 2A000000 		.4byte	.LVL75
 9292 0342 64000000 		.4byte	.LFE86
 9293 0346 0400     		.2byte	0x4
 9294 0348 F3       		.byte	0xf3
 9295 0349 01       		.uleb128 0x1
 9296 034a 50       		.byte	0x50
 9297 034b 9F       		.byte	0x9f
 9298 034c 00000000 		.4byte	0
 9299 0350 00000000 		.4byte	0
 9300              	.LLST19:
 9301 0354 00000000 		.4byte	.LVL70
 9302 0358 11000000 		.4byte	.LVL73-1
 9303 035c 0100     		.2byte	0x1
 9304 035e 51       		.byte	0x51
 9305 035f 11000000 		.4byte	.LVL73-1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 264


 9306 0363 44000000 		.4byte	.LVL77
 9307 0367 0100     		.2byte	0x1
 9308 0369 55       		.byte	0x55
 9309 036a 44000000 		.4byte	.LVL77
 9310 036e 64000000 		.4byte	.LFE86
 9311 0372 0400     		.2byte	0x4
 9312 0374 F3       		.byte	0xf3
 9313 0375 01       		.uleb128 0x1
 9314 0376 51       		.byte	0x51
 9315 0377 9F       		.byte	0x9f
 9316 0378 00000000 		.4byte	0
 9317 037c 00000000 		.4byte	0
 9318              	.LLST20:
 9319 0380 2A000000 		.4byte	.LVL75
 9320 0384 5A000000 		.4byte	.LVL79
 9321 0388 0100     		.2byte	0x1
 9322 038a 54       		.byte	0x54
 9323 038b 00000000 		.4byte	0
 9324 038f 00000000 		.4byte	0
 9325              	.LLST21:
 9326 0393 0A000000 		.4byte	.LVL71
 9327 0397 5A000000 		.4byte	.LVL80
 9328 039b 0100     		.2byte	0x1
 9329 039d 56       		.byte	0x56
 9330 039e 00000000 		.4byte	0
 9331 03a2 00000000 		.4byte	0
 9332              	.LLST22:
 9333 03a6 00000000 		.4byte	.LVL81
 9334 03aa 0E000000 		.4byte	.LVL82
 9335 03ae 0100     		.2byte	0x1
 9336 03b0 50       		.byte	0x50
 9337 03b1 0E000000 		.4byte	.LVL82
 9338 03b5 5E000000 		.4byte	.LFE32
 9339 03b9 0200     		.2byte	0x2
 9340 03bb 91       		.byte	0x91
 9341 03bc 60       		.sleb128 -32
 9342 03bd 00000000 		.4byte	0
 9343 03c1 00000000 		.4byte	0
 9344              	.LLST23:
 9345 03c5 00000000 		.4byte	.LVL81
 9346 03c9 11000000 		.4byte	.LVL83-1
 9347 03cd 0100     		.2byte	0x1
 9348 03cf 51       		.byte	0x51
 9349 03d0 11000000 		.4byte	.LVL83-1
 9350 03d4 5E000000 		.4byte	.LFE32
 9351 03d8 0200     		.2byte	0x2
 9352 03da 91       		.byte	0x91
 9353 03db 64       		.sleb128 -28
 9354 03dc 00000000 		.4byte	0
 9355 03e0 00000000 		.4byte	0
 9356              	.LLST24:
 9357 03e4 00000000 		.4byte	.LVL81
 9358 03e8 11000000 		.4byte	.LVL83-1
 9359 03ec 0100     		.2byte	0x1
 9360 03ee 52       		.byte	0x52
 9361 03ef 11000000 		.4byte	.LVL83-1
 9362 03f3 5E000000 		.4byte	.LFE32
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 265


 9363 03f7 0400     		.2byte	0x4
 9364 03f9 F3       		.byte	0xf3
 9365 03fa 01       		.uleb128 0x1
 9366 03fb 52       		.byte	0x52
 9367 03fc 9F       		.byte	0x9f
 9368 03fd 00000000 		.4byte	0
 9369 0401 00000000 		.4byte	0
 9370              	.LLST25:
 9371 0405 00000000 		.4byte	.LVL81
 9372 0409 11000000 		.4byte	.LVL83-1
 9373 040d 0100     		.2byte	0x1
 9374 040f 53       		.byte	0x53
 9375 0410 11000000 		.4byte	.LVL83-1
 9376 0414 5C000000 		.4byte	.LVL98
 9377 0418 0100     		.2byte	0x1
 9378 041a 57       		.byte	0x57
 9379 041b 5C000000 		.4byte	.LVL98
 9380 041f 5E000000 		.4byte	.LFE32
 9381 0423 0400     		.2byte	0x4
 9382 0425 F3       		.byte	0xf3
 9383 0426 01       		.uleb128 0x1
 9384 0427 53       		.byte	0x53
 9385 0428 9F       		.byte	0x9f
 9386 0429 00000000 		.4byte	0
 9387 042d 00000000 		.4byte	0
 9388              	.LLST26:
 9389 0431 1E000000 		.4byte	.LVL87
 9390 0435 26000000 		.4byte	.LVL88
 9391 0439 0100     		.2byte	0x1
 9392 043b 50       		.byte	0x50
 9393 043c 26000000 		.4byte	.LVL88
 9394 0440 2C000000 		.4byte	.LVL90
 9395 0444 0100     		.2byte	0x1
 9396 0446 55       		.byte	0x55
 9397 0447 2E000000 		.4byte	.LVL91
 9398 044b 5C000000 		.4byte	.LVL96
 9399 044f 0100     		.2byte	0x1
 9400 0451 55       		.byte	0x55
 9401 0452 00000000 		.4byte	0
 9402 0456 00000000 		.4byte	0
 9403              	.LLST27:
 9404 045a 52000000 		.4byte	.LVL93
 9405 045e 56000000 		.4byte	.LVL94
 9406 0462 0200     		.2byte	0x2
 9407 0464 31       		.byte	0x31
 9408 0465 9F       		.byte	0x9f
 9409 0466 5A000000 		.4byte	.LVL95
 9410 046a 5E000000 		.4byte	.LFE32
 9411 046e 0100     		.2byte	0x1
 9412 0470 50       		.byte	0x50
 9413 0471 00000000 		.4byte	0
 9414 0475 00000000 		.4byte	0
 9415              	.LLST28:
 9416 0479 14000000 		.4byte	.LVL84
 9417 047d 18000000 		.4byte	.LVL85
 9418 0481 0100     		.2byte	0x1
 9419 0483 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 266


 9420 0484 18000000 		.4byte	.LVL85
 9421 0488 2C000000 		.4byte	.LVL90
 9422 048c 0100     		.2byte	0x1
 9423 048e 56       		.byte	0x56
 9424 048f 2C000000 		.4byte	.LVL90
 9425 0493 2E000000 		.4byte	.LVL91
 9426 0497 0100     		.2byte	0x1
 9427 0499 50       		.byte	0x50
 9428 049a 2E000000 		.4byte	.LVL91
 9429 049e 5C000000 		.4byte	.LVL97
 9430 04a2 0100     		.2byte	0x1
 9431 04a4 56       		.byte	0x56
 9432 04a5 00000000 		.4byte	0
 9433 04a9 00000000 		.4byte	0
 9434              	.LLST29:
 9435 04ad 00000000 		.4byte	.LVL99
 9436 04b1 07000000 		.4byte	.LVL100-1
 9437 04b5 0100     		.2byte	0x1
 9438 04b7 50       		.byte	0x50
 9439 04b8 07000000 		.4byte	.LVL100-1
 9440 04bc 10000000 		.4byte	.LVL101
 9441 04c0 0100     		.2byte	0x1
 9442 04c2 54       		.byte	0x54
 9443 04c3 00000000 		.4byte	0
 9444 04c7 00000000 		.4byte	0
 9445              	.LLST30:
 9446 04cb 10000000 		.4byte	.LVL101
 9447 04cf 72000000 		.4byte	.LVL109
 9448 04d3 0100     		.2byte	0x1
 9449 04d5 54       		.byte	0x54
 9450 04d6 72000000 		.4byte	.LVL109
 9451 04da 72000000 		.4byte	.LVL110
 9452 04de 0300     		.2byte	0x3
 9453 04e0 75       		.byte	0x75
 9454 04e1 7C       		.sleb128 -4
 9455 04e2 9F       		.byte	0x9f
 9456 04e3 00000000 		.4byte	0
 9457 04e7 00000000 		.4byte	0
 9458              	.LLST31:
 9459 04eb 00000000 		.4byte	.LVL111
 9460 04ef 0F000000 		.4byte	.LVL113-1
 9461 04f3 0100     		.2byte	0x1
 9462 04f5 50       		.byte	0x50
 9463 04f6 0F000000 		.4byte	.LVL113-1
 9464 04fa 46000000 		.4byte	.LVL116
 9465 04fe 0100     		.2byte	0x1
 9466 0500 55       		.byte	0x55
 9467 0501 46000000 		.4byte	.LVL116
 9468 0505 48000000 		.4byte	.LVL117
 9469 0509 0100     		.2byte	0x1
 9470 050b 50       		.byte	0x50
 9471 050c 48000000 		.4byte	.LVL117
 9472 0510 5C000000 		.4byte	.LVL120
 9473 0514 0100     		.2byte	0x1
 9474 0516 55       		.byte	0x55
 9475 0517 5C000000 		.4byte	.LVL120
 9476 051b 68000000 		.4byte	.LFE38
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 267


 9477 051f 0400     		.2byte	0x4
 9478 0521 F3       		.byte	0xf3
 9479 0522 01       		.uleb128 0x1
 9480 0523 50       		.byte	0x50
 9481 0524 9F       		.byte	0x9f
 9482 0525 00000000 		.4byte	0
 9483 0529 00000000 		.4byte	0
 9484              	.LLST32:
 9485 052d 12000000 		.4byte	.LVL114
 9486 0531 46000000 		.4byte	.LVL116
 9487 0535 0100     		.2byte	0x1
 9488 0537 54       		.byte	0x54
 9489 0538 4A000000 		.4byte	.LVL118
 9490 053c 5C000000 		.4byte	.LVL119
 9491 0540 0100     		.2byte	0x1
 9492 0542 54       		.byte	0x54
 9493 0543 00000000 		.4byte	0
 9494 0547 00000000 		.4byte	0
 9495              	.LLST33:
 9496 054b 04000000 		.4byte	.LVL112
 9497 054f 0F000000 		.4byte	.LVL113-1
 9498 0553 0100     		.2byte	0x1
 9499 0555 50       		.byte	0x50
 9500 0556 0F000000 		.4byte	.LVL113-1
 9501 055a 46000000 		.4byte	.LVL116
 9502 055e 0100     		.2byte	0x1
 9503 0560 55       		.byte	0x55
 9504 0561 46000000 		.4byte	.LVL116
 9505 0565 48000000 		.4byte	.LVL117
 9506 0569 0100     		.2byte	0x1
 9507 056b 50       		.byte	0x50
 9508 056c 48000000 		.4byte	.LVL117
 9509 0570 5C000000 		.4byte	.LVL120
 9510 0574 0100     		.2byte	0x1
 9511 0576 55       		.byte	0x55
 9512 0577 5C000000 		.4byte	.LVL120
 9513 057b 68000000 		.4byte	.LFE38
 9514 057f 0400     		.2byte	0x4
 9515 0581 F3       		.byte	0xf3
 9516 0582 01       		.uleb128 0x1
 9517 0583 50       		.byte	0x50
 9518 0584 9F       		.byte	0x9f
 9519 0585 00000000 		.4byte	0
 9520 0589 00000000 		.4byte	0
 9521              	.LLST34:
 9522 058d 00000000 		.4byte	.LVL121
 9523 0591 07000000 		.4byte	.LVL122-1
 9524 0595 0100     		.2byte	0x1
 9525 0597 50       		.byte	0x50
 9526 0598 07000000 		.4byte	.LVL122-1
 9527 059c 10000000 		.4byte	.LVL123
 9528 05a0 0100     		.2byte	0x1
 9529 05a2 54       		.byte	0x54
 9530 05a3 00000000 		.4byte	0
 9531 05a7 00000000 		.4byte	0
 9532              	.LLST35:
 9533 05ab 10000000 		.4byte	.LVL123
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 268


 9534 05af 12000000 		.4byte	.LVL124
 9535 05b3 0100     		.2byte	0x1
 9536 05b5 54       		.byte	0x54
 9537 05b6 00000000 		.4byte	0
 9538 05ba 00000000 		.4byte	0
 9539              	.LLST36:
 9540 05be 12000000 		.4byte	.LVL124
 9541 05c2 18000000 		.4byte	.LVL126
 9542 05c6 0100     		.2byte	0x1
 9543 05c8 54       		.byte	0x54
 9544 05c9 18000000 		.4byte	.LVL126
 9545 05cd 20000000 		.4byte	.LFE39
 9546 05d1 0100     		.2byte	0x1
 9547 05d3 50       		.byte	0x50
 9548 05d4 00000000 		.4byte	0
 9549 05d8 00000000 		.4byte	0
 9550              	.LLST37:
 9551 05dc 00000000 		.4byte	.LVL127
 9552 05e0 07000000 		.4byte	.LVL128-1
 9553 05e4 0100     		.2byte	0x1
 9554 05e6 50       		.byte	0x50
 9555 05e7 07000000 		.4byte	.LVL128-1
 9556 05eb 10000000 		.4byte	.LVL129
 9557 05ef 0100     		.2byte	0x1
 9558 05f1 54       		.byte	0x54
 9559 05f2 00000000 		.4byte	0
 9560 05f6 00000000 		.4byte	0
 9561              	.LLST38:
 9562 05fa 10000000 		.4byte	.LVL129
 9563 05fe 12000000 		.4byte	.LVL130
 9564 0602 0100     		.2byte	0x1
 9565 0604 54       		.byte	0x54
 9566 0605 00000000 		.4byte	0
 9567 0609 00000000 		.4byte	0
 9568              	.LLST39:
 9569 060d 12000000 		.4byte	.LVL130
 9570 0611 18000000 		.4byte	.LVL132
 9571 0615 0100     		.2byte	0x1
 9572 0617 54       		.byte	0x54
 9573 0618 18000000 		.4byte	.LVL132
 9574 061c 20000000 		.4byte	.LFE40
 9575 0620 0100     		.2byte	0x1
 9576 0622 50       		.byte	0x50
 9577 0623 00000000 		.4byte	0
 9578 0627 00000000 		.4byte	0
 9579              	.LLST40:
 9580 062b 08000000 		.4byte	.LVL128
 9581 062f 15000000 		.4byte	.LVL131-1
 9582 0633 0100     		.2byte	0x1
 9583 0635 50       		.byte	0x50
 9584 0636 00000000 		.4byte	0
 9585 063a 00000000 		.4byte	0
 9586              	.LLST41:
 9587 063e 00000000 		.4byte	.LVL133
 9588 0642 0F000000 		.4byte	.LVL136-1
 9589 0646 0100     		.2byte	0x1
 9590 0648 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 269


 9591 0649 0F000000 		.4byte	.LVL136-1
 9592 064d 18000000 		.4byte	.LVL137
 9593 0651 0100     		.2byte	0x1
 9594 0653 54       		.byte	0x54
 9595 0654 00000000 		.4byte	0
 9596 0658 00000000 		.4byte	0
 9597              	.LLST42:
 9598 065c 00000000 		.4byte	.LVL133
 9599 0660 0C000000 		.4byte	.LVL135
 9600 0664 0100     		.2byte	0x1
 9601 0666 51       		.byte	0x51
 9602 0667 0C000000 		.4byte	.LVL135
 9603 066b 60000000 		.4byte	.LVL142
 9604 066f 0100     		.2byte	0x1
 9605 0671 55       		.byte	0x55
 9606 0672 60000000 		.4byte	.LVL142
 9607 0676 85000000 		.4byte	.LVL144-1
 9608 067a 0300     		.2byte	0x3
 9609 067c 74       		.byte	0x74
 9610 067d C400     		.sleb128 68
 9611 067f 00000000 		.4byte	0
 9612 0683 00000000 		.4byte	0
 9613              	.LLST43:
 9614 0687 18000000 		.4byte	.LVL137
 9615 068b B2000000 		.4byte	.LVL148
 9616 068f 0100     		.2byte	0x1
 9617 0691 54       		.byte	0x54
 9618 0692 00000000 		.4byte	0
 9619 0696 00000000 		.4byte	0
 9620              	.LLST44:
 9621 069a 1A000000 		.4byte	.LVL138
 9622 069e 58000000 		.4byte	.LVL141
 9623 06a2 0100     		.2byte	0x1
 9624 06a4 52       		.byte	0x52
 9625 06a5 00000000 		.4byte	0
 9626 06a9 00000000 		.4byte	0
 9627              	.LLST45:
 9628 06ad 4E000000 		.4byte	.LVL140
 9629 06b1 66000000 		.4byte	.LVL143
 9630 06b5 0100     		.2byte	0x1
 9631 06b7 53       		.byte	0x53
 9632 06b8 00000000 		.4byte	0
 9633 06bc 00000000 		.4byte	0
 9634              	.LLST46:
 9635 06c0 06000000 		.4byte	.LVL134
 9636 06c4 4C000000 		.4byte	.LVL139
 9637 06c8 0200     		.2byte	0x2
 9638 06ca 30       		.byte	0x30
 9639 06cb 9F       		.byte	0x9f
 9640 06cc 4C000000 		.4byte	.LVL139
 9641 06d0 AE000000 		.4byte	.LVL146
 9642 06d4 0100     		.2byte	0x1
 9643 06d6 56       		.byte	0x56
 9644 06d7 00000000 		.4byte	0
 9645 06db 00000000 		.4byte	0
 9646              	.LLST47:
 9647 06df 00000000 		.4byte	.LVL149
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 270


 9648 06e3 11000000 		.4byte	.LVL151-1
 9649 06e7 0100     		.2byte	0x1
 9650 06e9 50       		.byte	0x50
 9651 06ea 11000000 		.4byte	.LVL151-1
 9652 06ee 58000000 		.4byte	.LVL157
 9653 06f2 0100     		.2byte	0x1
 9654 06f4 54       		.byte	0x54
 9655 06f5 58000000 		.4byte	.LVL157
 9656 06f9 64000000 		.4byte	.LFE44
 9657 06fd 0400     		.2byte	0x4
 9658 06ff F3       		.byte	0xf3
 9659 0700 01       		.uleb128 0x1
 9660 0701 50       		.byte	0x50
 9661 0702 9F       		.byte	0x9f
 9662 0703 00000000 		.4byte	0
 9663 0707 00000000 		.4byte	0
 9664              	.LLST48:
 9665 070b 04000000 		.4byte	.LVL150
 9666 070f 11000000 		.4byte	.LVL151-1
 9667 0713 0100     		.2byte	0x1
 9668 0715 50       		.byte	0x50
 9669 0716 11000000 		.4byte	.LVL151-1
 9670 071a 58000000 		.4byte	.LVL157
 9671 071e 0100     		.2byte	0x1
 9672 0720 54       		.byte	0x54
 9673 0721 58000000 		.4byte	.LVL157
 9674 0725 64000000 		.4byte	.LFE44
 9675 0729 0400     		.2byte	0x4
 9676 072b F3       		.byte	0xf3
 9677 072c 01       		.uleb128 0x1
 9678 072d 50       		.byte	0x50
 9679 072e 9F       		.byte	0x9f
 9680 072f 00000000 		.4byte	0
 9681 0733 00000000 		.4byte	0
 9682              	.LLST49:
 9683 0737 00000000 		.4byte	.LVL158
 9684 073b 07000000 		.4byte	.LVL160-1
 9685 073f 0100     		.2byte	0x1
 9686 0741 50       		.byte	0x50
 9687 0742 07000000 		.4byte	.LVL160-1
 9688 0746 72000000 		.4byte	.LVL171
 9689 074a 0100     		.2byte	0x1
 9690 074c 54       		.byte	0x54
 9691 074d 72000000 		.4byte	.LVL171
 9692 0751 7C000000 		.4byte	.LFE45
 9693 0755 0400     		.2byte	0x4
 9694 0757 F3       		.byte	0xf3
 9695 0758 01       		.uleb128 0x1
 9696 0759 50       		.byte	0x50
 9697 075a 9F       		.byte	0x9f
 9698 075b 00000000 		.4byte	0
 9699 075f 00000000 		.4byte	0
 9700              	.LLST50:
 9701 0763 04000000 		.4byte	.LVL159
 9702 0767 2E000000 		.4byte	.LVL164
 9703 076b 0200     		.2byte	0x2
 9704 076d 30       		.byte	0x30
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 271


 9705 076e 9F       		.byte	0x9f
 9706 076f 2E000000 		.4byte	.LVL164
 9707 0773 58000000 		.4byte	.LVL167
 9708 0777 0100     		.2byte	0x1
 9709 0779 56       		.byte	0x56
 9710 077a 58000000 		.4byte	.LVL167
 9711 077e 6A000000 		.4byte	.LVL169
 9712 0782 0200     		.2byte	0x2
 9713 0784 30       		.byte	0x30
 9714 0785 9F       		.byte	0x9f
 9715 0786 6A000000 		.4byte	.LVL169
 9716 078a 72000000 		.4byte	.LVL173
 9717 078e 0100     		.2byte	0x1
 9718 0790 56       		.byte	0x56
 9719 0791 72000000 		.4byte	.LVL173
 9720 0795 7C000000 		.4byte	.LFE45
 9721 0799 0100     		.2byte	0x1
 9722 079b 50       		.byte	0x50
 9723 079c 00000000 		.4byte	0
 9724 07a0 00000000 		.4byte	0
 9725              	.LLST51:
 9726 07a4 04000000 		.4byte	.LVL159
 9727 07a8 07000000 		.4byte	.LVL160-1
 9728 07ac 0100     		.2byte	0x1
 9729 07ae 50       		.byte	0x50
 9730 07af 07000000 		.4byte	.LVL160-1
 9731 07b3 72000000 		.4byte	.LVL171
 9732 07b7 0100     		.2byte	0x1
 9733 07b9 54       		.byte	0x54
 9734 07ba 72000000 		.4byte	.LVL171
 9735 07be 7C000000 		.4byte	.LFE45
 9736 07c2 0400     		.2byte	0x4
 9737 07c4 F3       		.byte	0xf3
 9738 07c5 01       		.uleb128 0x1
 9739 07c6 50       		.byte	0x50
 9740 07c7 9F       		.byte	0x9f
 9741 07c8 00000000 		.4byte	0
 9742 07cc 00000000 		.4byte	0
 9743              	.LLST52:
 9744 07d0 0A000000 		.4byte	.LVL161
 9745 07d4 0C000000 		.4byte	.LVL162
 9746 07d8 0100     		.2byte	0x1
 9747 07da 50       		.byte	0x50
 9748 07db 0C000000 		.4byte	.LVL162
 9749 07df 72000000 		.4byte	.LVL172
 9750 07e3 0100     		.2byte	0x1
 9751 07e5 55       		.byte	0x55
 9752 07e6 00000000 		.4byte	0
 9753 07ea 00000000 		.4byte	0
 9754              	.LLST53:
 9755 07ee 18000000 		.4byte	.LVL174
 9756 07f2 33000000 		.4byte	.LVL175-1
 9757 07f6 0100     		.2byte	0x1
 9758 07f8 50       		.byte	0x50
 9759 07f9 00000000 		.4byte	0
 9760 07fd 00000000 		.4byte	0
 9761              	.LLST54:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 272


 9762 0801 00000000 		.4byte	.LVL180
 9763 0805 08000000 		.4byte	.LVL181
 9764 0809 0100     		.2byte	0x1
 9765 080b 50       		.byte	0x50
 9766 080c 00000000 		.4byte	0
 9767 0810 00000000 		.4byte	0
 9768              	.LLST55:
 9769 0814 08000000 		.4byte	.LVL181
 9770 0818 0A000000 		.4byte	.LVL182
 9771 081c 0100     		.2byte	0x1
 9772 081e 50       		.byte	0x50
 9773 081f 0A000000 		.4byte	.LVL182
 9774 0823 10000000 		.4byte	.LFE53
 9775 0827 0300     		.2byte	0x3
 9776 0829 70       		.byte	0x70
 9777 082a 4C       		.sleb128 -52
 9778 082b 9F       		.byte	0x9f
 9779 082c 00000000 		.4byte	0
 9780 0830 00000000 		.4byte	0
 9781              	.LLST56:
 9782 0834 36000000 		.4byte	.LVL187
 9783 0838 3A000000 		.4byte	.LVL189
 9784 083c 0100     		.2byte	0x1
 9785 083e 56       		.byte	0x56
 9786 083f 62000000 		.4byte	.LVL191
 9787 0843 B2000000 		.4byte	.LVL196
 9788 0847 0100     		.2byte	0x1
 9789 0849 56       		.byte	0x56
 9790 084a 00000000 		.4byte	0
 9791 084e 00000000 		.4byte	0
 9792              	.LLST57:
 9793 0852 64000000 		.4byte	.LVL192
 9794 0856 75000000 		.4byte	.LVL193-1
 9795 085a 0100     		.2byte	0x1
 9796 085c 53       		.byte	0x53
 9797 085d 00000000 		.4byte	0
 9798 0861 00000000 		.4byte	0
 9799              	.LLST58:
 9800 0865 02000000 		.4byte	.LVL183
 9801 0869 36000000 		.4byte	.LVL187
 9802 086d 0200     		.2byte	0x2
 9803 086f 30       		.byte	0x30
 9804 0870 9F       		.byte	0x9f
 9805 0871 36000000 		.4byte	.LVL187
 9806 0875 38000000 		.4byte	.LVL188
 9807 0879 0100     		.2byte	0x1
 9808 087b 55       		.byte	0x55
 9809 087c 3A000000 		.4byte	.LVL189
 9810 0880 3C000000 		.4byte	.LVL190
 9811 0884 0200     		.2byte	0x2
 9812 0886 30       		.byte	0x30
 9813 0887 9F       		.byte	0x9f
 9814 0888 3C000000 		.4byte	.LVL190
 9815 088c B2000000 		.4byte	.LVL196
 9816 0890 0100     		.2byte	0x1
 9817 0892 55       		.byte	0x55
 9818 0893 B2000000 		.4byte	.LVL196
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 273


 9819 0897 BC000000 		.4byte	.LVL197
 9820 089b 0200     		.2byte	0x2
 9821 089d 30       		.byte	0x30
 9822 089e 9F       		.byte	0x9f
 9823 089f BC000000 		.4byte	.LVL197
 9824 08a3 C8000000 		.4byte	.LVL199
 9825 08a7 0100     		.2byte	0x1
 9826 08a9 55       		.byte	0x55
 9827 08aa C8000000 		.4byte	.LVL199
 9828 08ae D8000000 		.4byte	.LFE54
 9829 08b2 0100     		.2byte	0x1
 9830 08b4 50       		.byte	0x50
 9831 08b5 00000000 		.4byte	0
 9832 08b9 00000000 		.4byte	0
 9833              	.LLST59:
 9834 08bd 10000000 		.4byte	.LVL184
 9835 08c1 B2000000 		.4byte	.LVL196
 9836 08c5 0100     		.2byte	0x1
 9837 08c7 57       		.byte	0x57
 9838 08c8 00000000 		.4byte	0
 9839 08cc 00000000 		.4byte	0
 9840              	.LLST60:
 9841 08d0 1A000000 		.4byte	.LVL185
 9842 08d4 29000000 		.4byte	.LVL186-1
 9843 08d8 0100     		.2byte	0x1
 9844 08da 51       		.byte	0x51
 9845 08db 00000000 		.4byte	0
 9846 08df 00000000 		.4byte	0
 9847              	.LLST61:
 9848 08e3 02000000 		.4byte	.LVL200
 9849 08e7 20000000 		.4byte	.LVL202
 9850 08eb 0200     		.2byte	0x2
 9851 08ed 30       		.byte	0x30
 9852 08ee 9F       		.byte	0x9f
 9853 08ef 20000000 		.4byte	.LVL202
 9854 08f3 6A000000 		.4byte	.LVL207
 9855 08f7 0100     		.2byte	0x1
 9856 08f9 54       		.byte	0x54
 9857 08fa 6A000000 		.4byte	.LVL207
 9858 08fe 6C000000 		.4byte	.LVL208
 9859 0902 0200     		.2byte	0x2
 9860 0904 30       		.byte	0x30
 9861 0905 9F       		.byte	0x9f
 9862 0906 6C000000 		.4byte	.LVL208
 9863 090a 80000000 		.4byte	.LVL210
 9864 090e 0100     		.2byte	0x1
 9865 0910 54       		.byte	0x54
 9866 0911 AE000000 		.4byte	.LVL216
 9867 0915 B2000000 		.4byte	.LVL217
 9868 0919 0200     		.2byte	0x2
 9869 091b 30       		.byte	0x30
 9870 091c 9F       		.byte	0x9f
 9871 091d 00000000 		.4byte	0
 9872 0921 00000000 		.4byte	0
 9873              	.LLST62:
 9874 0925 02000000 		.4byte	.LVL200
 9875 0929 A6000000 		.4byte	.LVL213
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 274


 9876 092d 0200     		.2byte	0x2
 9877 092f 30       		.byte	0x30
 9878 0930 9F       		.byte	0x9f
 9879 0931 A6000000 		.4byte	.LVL213
 9880 0935 AE000000 		.4byte	.LVL216
 9881 0939 0200     		.2byte	0x2
 9882 093b 31       		.byte	0x31
 9883 093c 9F       		.byte	0x9f
 9884 093d AE000000 		.4byte	.LVL216
 9885 0941 B4000000 		.4byte	.LVL218
 9886 0945 0200     		.2byte	0x2
 9887 0947 30       		.byte	0x30
 9888 0948 9F       		.byte	0x9f
 9889 0949 B4000000 		.4byte	.LVL218
 9890 094d BA000000 		.4byte	.LVL220
 9891 0951 0100     		.2byte	0x1
 9892 0953 54       		.byte	0x54
 9893 0954 BA000000 		.4byte	.LVL220
 9894 0958 C8000000 		.4byte	.LFE49
 9895 095c 0100     		.2byte	0x1
 9896 095e 50       		.byte	0x50
 9897 095f 00000000 		.4byte	0
 9898 0963 00000000 		.4byte	0
 9899              	.LLST63:
 9900 0967 80000000 		.4byte	.LVL210
 9901 096b AC000000 		.4byte	.LVL215
 9902 096f 0100     		.2byte	0x1
 9903 0971 54       		.byte	0x54
 9904 0972 B2000000 		.4byte	.LVL217
 9905 0976 B4000000 		.4byte	.LVL218
 9906 097a 0100     		.2byte	0x1
 9907 097c 54       		.byte	0x54
 9908 097d 00000000 		.4byte	0
 9909 0981 00000000 		.4byte	0
 9910              	.LLST64:
 9911 0985 00000000 		.4byte	.LVL221
 9912 0989 09000000 		.4byte	.LVL223-1
 9913 098d 0100     		.2byte	0x1
 9914 098f 50       		.byte	0x50
 9915 0990 09000000 		.4byte	.LVL223-1
 9916 0994 56000000 		.4byte	.LVL233
 9917 0998 0100     		.2byte	0x1
 9918 099a 55       		.byte	0x55
 9919 099b 56000000 		.4byte	.LVL233
 9920 099f 5C000000 		.4byte	.LFE36
 9921 09a3 0400     		.2byte	0x4
 9922 09a5 F3       		.byte	0xf3
 9923 09a6 01       		.uleb128 0x1
 9924 09a7 50       		.byte	0x50
 9925 09a8 9F       		.byte	0x9f
 9926 09a9 00000000 		.4byte	0
 9927 09ad 00000000 		.4byte	0
 9928              	.LLST65:
 9929 09b1 00000000 		.4byte	.LVL221
 9930 09b5 09000000 		.4byte	.LVL223-1
 9931 09b9 0100     		.2byte	0x1
 9932 09bb 51       		.byte	0x51
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 275


 9933 09bc 09000000 		.4byte	.LVL223-1
 9934 09c0 56000000 		.4byte	.LVL232
 9935 09c4 0100     		.2byte	0x1
 9936 09c6 54       		.byte	0x54
 9937 09c7 56000000 		.4byte	.LVL232
 9938 09cb 5C000000 		.4byte	.LFE36
 9939 09cf 0400     		.2byte	0x4
 9940 09d1 F3       		.byte	0xf3
 9941 09d2 01       		.uleb128 0x1
 9942 09d3 51       		.byte	0x51
 9943 09d4 9F       		.byte	0x9f
 9944 09d5 00000000 		.4byte	0
 9945 09d9 00000000 		.4byte	0
 9946              	.LLST66:
 9947 09dd 12000000 		.4byte	.LVL225
 9948 09e1 46000000 		.4byte	.LVL228
 9949 09e5 0100     		.2byte	0x1
 9950 09e7 51       		.byte	0x51
 9951 09e8 46000000 		.4byte	.LVL228
 9952 09ec 49000000 		.4byte	.LVL229-1
 9953 09f0 0200     		.2byte	0x2
 9954 09f2 75       		.byte	0x75
 9955 09f3 00       		.sleb128 0
 9956 09f4 00000000 		.4byte	0
 9957 09f8 00000000 		.4byte	0
 9958              	.LLST67:
 9959 09fc 4E000000 		.4byte	.LVL230
 9960 0a00 55000000 		.4byte	.LVL231-1
 9961 0a04 0100     		.2byte	0x1
 9962 0a06 50       		.byte	0x50
 9963 0a07 00000000 		.4byte	0
 9964 0a0b 00000000 		.4byte	0
 9965              	.LLST68:
 9966 0a0f 06000000 		.4byte	.LVL222
 9967 0a13 3C000000 		.4byte	.LVL226
 9968 0a17 0200     		.2byte	0x2
 9969 0a19 30       		.byte	0x30
 9970 0a1a 9F       		.byte	0x9f
 9971 0a1b 3C000000 		.4byte	.LVL226
 9972 0a1f 49000000 		.4byte	.LVL229-1
 9973 0a23 0100     		.2byte	0x1
 9974 0a25 53       		.byte	0x53
 9975 0a26 00000000 		.4byte	0
 9976 0a2a 00000000 		.4byte	0
 9977              	.LLST69:
 9978 0a2e 0E000000 		.4byte	.LVL224
 9979 0a32 44000000 		.4byte	.LVL227
 9980 0a36 0100     		.2byte	0x1
 9981 0a38 50       		.byte	0x50
 9982 0a39 00000000 		.4byte	0
 9983 0a3d 00000000 		.4byte	0
 9984              	.LLST70:
 9985 0a41 00000000 		.4byte	.LVL234
 9986 0a45 09000000 		.4byte	.LVL236-1
 9987 0a49 0100     		.2byte	0x1
 9988 0a4b 50       		.byte	0x50
 9989 0a4c 09000000 		.4byte	.LVL236-1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 276


 9990 0a50 18000000 		.4byte	.LVL239
 9991 0a54 0100     		.2byte	0x1
 9992 0a56 54       		.byte	0x54
 9993 0a57 18000000 		.4byte	.LVL239
 9994 0a5b 1A000000 		.4byte	.LVL240
 9995 0a5f 0100     		.2byte	0x1
 9996 0a61 50       		.byte	0x50
 9997 0a62 1A000000 		.4byte	.LVL240
 9998 0a66 22000000 		.4byte	.LVL242
 9999 0a6a 0100     		.2byte	0x1
 10000 0a6c 54       		.byte	0x54
 10001 0a6d 22000000 		.4byte	.LVL242
 10002 0a71 24000000 		.4byte	.LFE37
 10003 0a75 0400     		.2byte	0x4
 10004 0a77 F3       		.byte	0xf3
 10005 0a78 01       		.uleb128 0x1
 10006 0a79 50       		.byte	0x50
 10007 0a7a 9F       		.byte	0x9f
 10008 0a7b 00000000 		.4byte	0
 10009 0a7f 00000000 		.4byte	0
 10010              	.LLST71:
 10011 0a83 04000000 		.4byte	.LVL235
 10012 0a87 16000000 		.4byte	.LVL238
 10013 0a8b 0200     		.2byte	0x2
 10014 0a8d 30       		.byte	0x30
 10015 0a8e 9F       		.byte	0x9f
 10016 0a8f 16000000 		.4byte	.LVL238
 10017 0a93 18000000 		.4byte	.LVL239
 10018 0a97 0100     		.2byte	0x1
 10019 0a99 50       		.byte	0x50
 10020 0a9a 18000000 		.4byte	.LVL239
 10021 0a9e 1A000000 		.4byte	.LVL240
 10022 0aa2 0200     		.2byte	0x2
 10023 0aa4 30       		.byte	0x30
 10024 0aa5 9F       		.byte	0x9f
 10025 0aa6 1A000000 		.4byte	.LVL240
 10026 0aaa 21000000 		.4byte	.LVL241-1
 10027 0aae 0100     		.2byte	0x1
 10028 0ab0 50       		.byte	0x50
 10029 0ab1 00000000 		.4byte	0
 10030 0ab5 00000000 		.4byte	0
 10031              	.LLST72:
 10032 0ab9 1E000000 		.4byte	.LVL243
 10033 0abd 36000000 		.4byte	.LVL244
 10034 0ac1 0100     		.2byte	0x1
 10035 0ac3 53       		.byte	0x53
 10036 0ac4 00000000 		.4byte	0
 10037 0ac8 00000000 		.4byte	0
 10038              	.LLST73:
 10039 0acc 1E000000 		.4byte	.LVL243
 10040 0ad0 A0000000 		.4byte	.LVL249
 10041 0ad4 0600     		.2byte	0x6
 10042 0ad6 9E       		.byte	0x9e
 10043 0ad7 04       		.uleb128 0x4
 10044 0ad8 A5A5A5A5 		.4byte	0xa5a5a5a5
 10045 0adc 00000000 		.4byte	0
 10046 0ae0 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 277


 10047              	.LLST74:
 10048 0ae4 4A000000 		.4byte	.LVL246
 10049 0ae8 A0000000 		.4byte	.LVL249
 10050 0aec 0100     		.2byte	0x1
 10051 0aee 53       		.byte	0x53
 10052 0aef 00000000 		.4byte	0
 10053 0af3 00000000 		.4byte	0
 10054              	.LLST75:
 10055 0af7 5E000000 		.4byte	.LVL248
 10056 0afb A0000000 		.4byte	.LVL249
 10057 0aff 0B00     		.2byte	0xb
 10058 0b01 73       		.byte	0x73
 10059 0b02 00       		.sleb128 0
 10060 0b03 44       		.byte	0x44
 10061 0b04 1E       		.byte	0x1e
 10062 0b05 03       		.byte	0x3
 10063 0b06 30000000 		.4byte	pxReadyTasksLists
 10064 0b0a 22       		.byte	0x22
 10065 0b0b 9F       		.byte	0x9f
 10066 0b0c 00000000 		.4byte	0
 10067 0b10 00000000 		.4byte	0
 10068              	.LLST76:
 10069 0b14 00000000 		.4byte	.LVL250
 10070 0b18 07000000 		.4byte	.LVL251-1
 10071 0b1c 0100     		.2byte	0x1
 10072 0b1e 50       		.byte	0x50
 10073 0b1f 07000000 		.4byte	.LVL251-1
 10074 0b23 10000000 		.4byte	.LVL252
 10075 0b27 0100     		.2byte	0x1
 10076 0b29 54       		.byte	0x54
 10077 0b2a 00000000 		.4byte	0
 10078 0b2e 00000000 		.4byte	0
 10079              	.LLST77:
 10080 0b32 10000000 		.4byte	.LVL252
 10081 0b36 82000000 		.4byte	.LVL262
 10082 0b3a 0100     		.2byte	0x1
 10083 0b3c 54       		.byte	0x54
 10084 0b3d 82000000 		.4byte	.LVL262
 10085 0b41 82000000 		.4byte	.LVL263
 10086 0b45 0300     		.2byte	0x3
 10087 0b47 75       		.byte	0x75
 10088 0b48 7C       		.sleb128 -4
 10089 0b49 9F       		.byte	0x9f
 10090 0b4a 00000000 		.4byte	0
 10091 0b4e 00000000 		.4byte	0
 10092              	.LLST78:
 10093 0b52 00000000 		.4byte	.LVL264
 10094 0b56 0D000000 		.4byte	.LVL266-1
 10095 0b5a 0100     		.2byte	0x1
 10096 0b5c 50       		.byte	0x50
 10097 0b5d 0D000000 		.4byte	.LVL266-1
 10098 0b61 1C000000 		.4byte	.LFE56
 10099 0b65 0400     		.2byte	0x4
 10100 0b67 F3       		.byte	0xf3
 10101 0b68 01       		.uleb128 0x1
 10102 0b69 50       		.byte	0x50
 10103 0b6a 9F       		.byte	0x9f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 278


 10104 0b6b 00000000 		.4byte	0
 10105 0b6f 00000000 		.4byte	0
 10106              	.LLST79:
 10107 0b73 00000000 		.4byte	.LVL264
 10108 0b77 08000000 		.4byte	.LVL265
 10109 0b7b 0100     		.2byte	0x1
 10110 0b7d 51       		.byte	0x51
 10111 0b7e 08000000 		.4byte	.LVL265
 10112 0b82 16000000 		.4byte	.LVL268
 10113 0b86 0100     		.2byte	0x1
 10114 0b88 54       		.byte	0x54
 10115 0b89 16000000 		.4byte	.LVL268
 10116 0b8d 1C000000 		.4byte	.LFE56
 10117 0b91 0400     		.2byte	0x4
 10118 0b93 F3       		.byte	0xf3
 10119 0b94 01       		.uleb128 0x1
 10120 0b95 51       		.byte	0x51
 10121 0b96 9F       		.byte	0x9f
 10122 0b97 00000000 		.4byte	0
 10123 0b9b 00000000 		.4byte	0
 10124              	.LLST80:
 10125 0b9f 00000000 		.4byte	.LVL269
 10126 0ba3 17000000 		.4byte	.LVL272-1
 10127 0ba7 0100     		.2byte	0x1
 10128 0ba9 50       		.byte	0x50
 10129 0baa 17000000 		.4byte	.LVL272-1
 10130 0bae 28000000 		.4byte	.LFE57
 10131 0bb2 0400     		.2byte	0x4
 10132 0bb4 F3       		.byte	0xf3
 10133 0bb5 01       		.uleb128 0x1
 10134 0bb6 50       		.byte	0x50
 10135 0bb7 9F       		.byte	0x9f
 10136 0bb8 00000000 		.4byte	0
 10137 0bbc 00000000 		.4byte	0
 10138              	.LLST81:
 10139 0bc0 00000000 		.4byte	.LVL269
 10140 0bc4 0E000000 		.4byte	.LVL271
 10141 0bc8 0100     		.2byte	0x1
 10142 0bca 51       		.byte	0x51
 10143 0bcb 0E000000 		.4byte	.LVL271
 10144 0bcf 28000000 		.4byte	.LFE57
 10145 0bd3 0400     		.2byte	0x4
 10146 0bd5 F3       		.byte	0xf3
 10147 0bd6 01       		.uleb128 0x1
 10148 0bd7 51       		.byte	0x51
 10149 0bd8 9F       		.byte	0x9f
 10150 0bd9 00000000 		.4byte	0
 10151 0bdd 00000000 		.4byte	0
 10152              	.LLST82:
 10153 0be1 00000000 		.4byte	.LVL269
 10154 0be5 08000000 		.4byte	.LVL270
 10155 0be9 0100     		.2byte	0x1
 10156 0beb 52       		.byte	0x52
 10157 0bec 08000000 		.4byte	.LVL270
 10158 0bf0 20000000 		.4byte	.LVL274
 10159 0bf4 0100     		.2byte	0x1
 10160 0bf6 54       		.byte	0x54
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 279


 10161 0bf7 20000000 		.4byte	.LVL274
 10162 0bfb 28000000 		.4byte	.LFE57
 10163 0bff 0400     		.2byte	0x4
 10164 0c01 F3       		.byte	0xf3
 10165 0c02 01       		.uleb128 0x1
 10166 0c03 52       		.byte	0x52
 10167 0c04 9F       		.byte	0x9f
 10168 0c05 00000000 		.4byte	0
 10169 0c09 00000000 		.4byte	0
 10170              	.LLST83:
 10171 0c0d 00000000 		.4byte	.LVL275
 10172 0c11 0C000000 		.4byte	.LVL277
 10173 0c15 0100     		.2byte	0x1
 10174 0c17 50       		.byte	0x50
 10175 0c18 0C000000 		.4byte	.LVL277
 10176 0c1c 74000000 		.4byte	.LFE58
 10177 0c20 0400     		.2byte	0x4
 10178 0c22 F3       		.byte	0xf3
 10179 0c23 01       		.uleb128 0x1
 10180 0c24 50       		.byte	0x50
 10181 0c25 9F       		.byte	0x9f
 10182 0c26 00000000 		.4byte	0
 10183 0c2a 00000000 		.4byte	0
 10184              	.LLST84:
 10185 0c2e 06000000 		.4byte	.LVL276
 10186 0c32 64000000 		.4byte	.LVL285
 10187 0c36 0100     		.2byte	0x1
 10188 0c38 54       		.byte	0x54
 10189 0c39 00000000 		.4byte	0
 10190 0c3d 00000000 		.4byte	0
 10191              	.LLST85:
 10192 0c41 58000000 		.4byte	.LVL282
 10193 0c45 62000000 		.4byte	.LVL283
 10194 0c49 0200     		.2byte	0x2
 10195 0c4b 31       		.byte	0x31
 10196 0c4c 9F       		.byte	0x9f
 10197 0c4d 64000000 		.4byte	.LVL284
 10198 0c51 74000000 		.4byte	.LFE58
 10199 0c55 0100     		.2byte	0x1
 10200 0c57 50       		.byte	0x50
 10201 0c58 00000000 		.4byte	0
 10202 0c5c 00000000 		.4byte	0
 10203              	.LLST86:
 10204 0c60 00000000 		.4byte	.LVL286
 10205 0c64 0F000000 		.4byte	.LVL289-1
 10206 0c68 0100     		.2byte	0x1
 10207 0c6a 50       		.byte	0x50
 10208 0c6b 0F000000 		.4byte	.LVL289-1
 10209 0c6f 58000000 		.4byte	.LFE59
 10210 0c73 0400     		.2byte	0x4
 10211 0c75 F3       		.byte	0xf3
 10212 0c76 01       		.uleb128 0x1
 10213 0c77 50       		.byte	0x50
 10214 0c78 9F       		.byte	0x9f
 10215 0c79 00000000 		.4byte	0
 10216 0c7d 00000000 		.4byte	0
 10217              	.LLST87:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 280


 10218 0c81 00000000 		.4byte	.LVL286
 10219 0c85 08000000 		.4byte	.LVL287
 10220 0c89 0100     		.2byte	0x1
 10221 0c8b 51       		.byte	0x51
 10222 0c8c 08000000 		.4byte	.LVL287
 10223 0c90 58000000 		.4byte	.LFE59
 10224 0c94 0400     		.2byte	0x4
 10225 0c96 F3       		.byte	0xf3
 10226 0c97 01       		.uleb128 0x1
 10227 0c98 51       		.byte	0x51
 10228 0c99 9F       		.byte	0x9f
 10229 0c9a 00000000 		.4byte	0
 10230 0c9e 00000000 		.4byte	0
 10231              	.LLST88:
 10232 0ca2 0C000000 		.4byte	.LVL288
 10233 0ca6 4A000000 		.4byte	.LVL292
 10234 0caa 0100     		.2byte	0x1
 10235 0cac 55       		.byte	0x55
 10236 0cad 00000000 		.4byte	0
 10237 0cb1 00000000 		.4byte	0
 10238              	.LLST89:
 10239 0cb5 00000000 		.4byte	.LVL293
 10240 0cb9 07000000 		.4byte	.LVL294-1
 10241 0cbd 0100     		.2byte	0x1
 10242 0cbf 50       		.byte	0x50
 10243 0cc0 07000000 		.4byte	.LVL294-1
 10244 0cc4 16000000 		.4byte	.LVL296
 10245 0cc8 0100     		.2byte	0x1
 10246 0cca 54       		.byte	0x54
 10247 0ccb 16000000 		.4byte	.LVL296
 10248 0ccf 1C000000 		.4byte	.LFE60
 10249 0cd3 0400     		.2byte	0x4
 10250 0cd5 F3       		.byte	0xf3
 10251 0cd6 01       		.uleb128 0x1
 10252 0cd7 50       		.byte	0x50
 10253 0cd8 9F       		.byte	0x9f
 10254 0cd9 00000000 		.4byte	0
 10255 0cdd 00000000 		.4byte	0
 10256              	.LLST90:
 10257 0ce1 00000000 		.4byte	.LVL298
 10258 0ce5 09000000 		.4byte	.LVL299-1
 10259 0ce9 0100     		.2byte	0x1
 10260 0ceb 50       		.byte	0x50
 10261 0cec 09000000 		.4byte	.LVL299-1
 10262 0cf0 36000000 		.4byte	.LVL304
 10263 0cf4 0100     		.2byte	0x1
 10264 0cf6 54       		.byte	0x54
 10265 0cf7 36000000 		.4byte	.LVL304
 10266 0cfb 38000000 		.4byte	.LVL305
 10267 0cff 0400     		.2byte	0x4
 10268 0d01 F3       		.byte	0xf3
 10269 0d02 01       		.uleb128 0x1
 10270 0d03 50       		.byte	0x50
 10271 0d04 9F       		.byte	0x9f
 10272 0d05 38000000 		.4byte	.LVL305
 10273 0d09 3E000000 		.4byte	.LVL307
 10274 0d0d 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 281


 10275 0d0f 54       		.byte	0x54
 10276 0d10 3E000000 		.4byte	.LVL307
 10277 0d14 40000000 		.4byte	.LVL308
 10278 0d18 0400     		.2byte	0x4
 10279 0d1a F3       		.byte	0xf3
 10280 0d1b 01       		.uleb128 0x1
 10281 0d1c 50       		.byte	0x50
 10282 0d1d 9F       		.byte	0x9f
 10283 0d1e 40000000 		.4byte	.LVL308
 10284 0d22 42000000 		.4byte	.LVL309
 10285 0d26 0100     		.2byte	0x1
 10286 0d28 54       		.byte	0x54
 10287 0d29 42000000 		.4byte	.LVL309
 10288 0d2d 44000000 		.4byte	.LVL310
 10289 0d31 0400     		.2byte	0x4
 10290 0d33 F3       		.byte	0xf3
 10291 0d34 01       		.uleb128 0x1
 10292 0d35 50       		.byte	0x50
 10293 0d36 9F       		.byte	0x9f
 10294 0d37 44000000 		.4byte	.LVL310
 10295 0d3b 46000000 		.4byte	.LVL311
 10296 0d3f 0100     		.2byte	0x1
 10297 0d41 54       		.byte	0x54
 10298 0d42 46000000 		.4byte	.LVL311
 10299 0d46 54000000 		.4byte	.LFE62
 10300 0d4a 0400     		.2byte	0x4
 10301 0d4c F3       		.byte	0xf3
 10302 0d4d 01       		.uleb128 0x1
 10303 0d4e 50       		.byte	0x50
 10304 0d4f 9F       		.byte	0x9f
 10305 0d50 00000000 		.4byte	0
 10306 0d54 00000000 		.4byte	0
 10307              	.LLST91:
 10308 0d58 00000000 		.4byte	.LVL298
 10309 0d5c 09000000 		.4byte	.LVL299-1
 10310 0d60 0100     		.2byte	0x1
 10311 0d62 51       		.byte	0x51
 10312 0d63 09000000 		.4byte	.LVL299-1
 10313 0d67 4C000000 		.4byte	.LVL314
 10314 0d6b 0100     		.2byte	0x1
 10315 0d6d 55       		.byte	0x55
 10316 0d6e 4C000000 		.4byte	.LVL314
 10317 0d72 54000000 		.4byte	.LFE62
 10318 0d76 0400     		.2byte	0x4
 10319 0d78 F3       		.byte	0xf3
 10320 0d79 01       		.uleb128 0x1
 10321 0d7a 51       		.byte	0x51
 10322 0d7b 9F       		.byte	0x9f
 10323 0d7c 00000000 		.4byte	0
 10324 0d80 00000000 		.4byte	0
 10325              	.LLST92:
 10326 0d84 34000000 		.4byte	.LVL303
 10327 0d88 38000000 		.4byte	.LVL305
 10328 0d8c 0200     		.2byte	0x2
 10329 0d8e 30       		.byte	0x30
 10330 0d8f 9F       		.byte	0x9f
 10331 0d90 3C000000 		.4byte	.LVL306
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 282


 10332 0d94 40000000 		.4byte	.LVL308
 10333 0d98 0200     		.2byte	0x2
 10334 0d9a 31       		.byte	0x31
 10335 0d9b 9F       		.byte	0x9f
 10336 0d9c 46000000 		.4byte	.LVL311
 10337 0da0 4C000000 		.4byte	.LVL313
 10338 0da4 0100     		.2byte	0x1
 10339 0da6 54       		.byte	0x54
 10340 0da7 4C000000 		.4byte	.LVL313
 10341 0dab 54000000 		.4byte	.LFE62
 10342 0daf 0100     		.2byte	0x1
 10343 0db1 50       		.byte	0x50
 10344 0db2 00000000 		.4byte	0
 10345 0db6 00000000 		.4byte	0
 10346              	.LLST93:
 10347 0dba 0E000000 		.4byte	.LVL300
 10348 0dbe 33000000 		.4byte	.LVL303-1
 10349 0dc2 0100     		.2byte	0x1
 10350 0dc4 51       		.byte	0x51
 10351 0dc5 38000000 		.4byte	.LVL305
 10352 0dc9 46000000 		.4byte	.LVL311
 10353 0dcd 0100     		.2byte	0x1
 10354 0dcf 51       		.byte	0x51
 10355 0dd0 00000000 		.4byte	0
 10356 0dd4 00000000 		.4byte	0
 10357              	.LLST94:
 10358 0dd8 12000000 		.4byte	.LVL301
 10359 0ddc 30000000 		.4byte	.LVL302
 10360 0de0 0100     		.2byte	0x1
 10361 0de2 50       		.byte	0x50
 10362 0de3 30000000 		.4byte	.LVL302
 10363 0de7 33000000 		.4byte	.LVL303-1
 10364 0deb 0600     		.2byte	0x6
 10365 0ded 71       		.byte	0x71
 10366 0dee 00       		.sleb128 0
 10367 0def 72       		.byte	0x72
 10368 0df0 00       		.sleb128 0
 10369 0df1 1C       		.byte	0x1c
 10370 0df2 9F       		.byte	0x9f
 10371 0df3 38000000 		.4byte	.LVL305
 10372 0df7 46000000 		.4byte	.LVL311
 10373 0dfb 0100     		.2byte	0x1
 10374 0dfd 50       		.byte	0x50
 10375 0dfe 00000000 		.4byte	0
 10376 0e02 00000000 		.4byte	0
 10377              	.LLST95:
 10378 0e06 00000000 		.4byte	.LVL315
 10379 0e0a 0C000000 		.4byte	.LVL316
 10380 0e0e 0100     		.2byte	0x1
 10381 0e10 50       		.byte	0x50
 10382 0e11 00000000 		.4byte	0
 10383 0e15 00000000 		.4byte	0
 10384              	.LLST96:
 10385 0e19 00000000 		.4byte	.LVL315
 10386 0e1d 0E000000 		.4byte	.LVL317
 10387 0e21 0100     		.2byte	0x1
 10388 0e23 51       		.byte	0x51
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 283


 10389 0e24 0E000000 		.4byte	.LVL317
 10390 0e28 10000000 		.4byte	.LVL318
 10391 0e2c 0300     		.2byte	0x3
 10392 0e2e 71       		.byte	0x71
 10393 0e2f 6E       		.sleb128 -18
 10394 0e30 9F       		.byte	0x9f
 10395 0e31 10000000 		.4byte	.LVL318
 10396 0e35 1C000000 		.4byte	.LFE65
 10397 0e39 0400     		.2byte	0x4
 10398 0e3b F3       		.byte	0xf3
 10399 0e3c 01       		.uleb128 0x1
 10400 0e3d 51       		.byte	0x51
 10401 0e3e 9F       		.byte	0x9f
 10402 0e3f 00000000 		.4byte	0
 10403 0e43 00000000 		.4byte	0
 10404              	.LLST97:
 10405 0e47 0C000000 		.4byte	.LVL316
 10406 0e4b 12000000 		.4byte	.LVL319
 10407 0e4f 0100     		.2byte	0x1
 10408 0e51 50       		.byte	0x50
 10409 0e52 00000000 		.4byte	0
 10410 0e56 00000000 		.4byte	0
 10411              	.LLST98:
 10412 0e5a 00000000 		.4byte	.LVL320
 10413 0e5e 0C000000 		.4byte	.LVL321
 10414 0e62 0100     		.2byte	0x1
 10415 0e64 50       		.byte	0x50
 10416 0e65 16000000 		.4byte	.LVL326
 10417 0e69 18000000 		.4byte	.LVL327
 10418 0e6d 0100     		.2byte	0x1
 10419 0e6f 50       		.byte	0x50
 10420 0e70 00000000 		.4byte	0
 10421 0e74 00000000 		.4byte	0
 10422              	.LLST99:
 10423 0e78 00000000 		.4byte	.LVL320
 10424 0e7c 0E000000 		.4byte	.LVL322
 10425 0e80 0100     		.2byte	0x1
 10426 0e82 51       		.byte	0x51
 10427 0e83 0E000000 		.4byte	.LVL322
 10428 0e87 10000000 		.4byte	.LVL323
 10429 0e8b 0300     		.2byte	0x3
 10430 0e8d 71       		.byte	0x71
 10431 0e8e 6E       		.sleb128 -18
 10432 0e8f 9F       		.byte	0x9f
 10433 0e90 10000000 		.4byte	.LVL323
 10434 0e94 16000000 		.4byte	.LVL326
 10435 0e98 0400     		.2byte	0x4
 10436 0e9a F3       		.byte	0xf3
 10437 0e9b 01       		.uleb128 0x1
 10438 0e9c 51       		.byte	0x51
 10439 0e9d 9F       		.byte	0x9f
 10440 0e9e 16000000 		.4byte	.LVL326
 10441 0ea2 18000000 		.4byte	.LVL327
 10442 0ea6 0100     		.2byte	0x1
 10443 0ea8 51       		.byte	0x51
 10444 0ea9 18000000 		.4byte	.LVL327
 10445 0ead 20000000 		.4byte	.LFE66
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 284


 10446 0eb1 0400     		.2byte	0x4
 10447 0eb3 F3       		.byte	0xf3
 10448 0eb4 01       		.uleb128 0x1
 10449 0eb5 51       		.byte	0x51
 10450 0eb6 9F       		.byte	0x9f
 10451 0eb7 00000000 		.4byte	0
 10452 0ebb 00000000 		.4byte	0
 10453              	.LLST100:
 10454 0ebf 00000000 		.4byte	.LVL320
 10455 0ec3 14000000 		.4byte	.LVL325
 10456 0ec7 0200     		.2byte	0x2
 10457 0ec9 30       		.byte	0x30
 10458 0eca 9F       		.byte	0x9f
 10459 0ecb 14000000 		.4byte	.LVL325
 10460 0ecf 16000000 		.4byte	.LVL326
 10461 0ed3 0100     		.2byte	0x1
 10462 0ed5 50       		.byte	0x50
 10463 0ed6 16000000 		.4byte	.LVL326
 10464 0eda 18000000 		.4byte	.LVL327
 10465 0ede 0200     		.2byte	0x2
 10466 0ee0 30       		.byte	0x30
 10467 0ee1 9F       		.byte	0x9f
 10468 0ee2 18000000 		.4byte	.LVL327
 10469 0ee6 20000000 		.4byte	.LFE66
 10470 0eea 0100     		.2byte	0x1
 10471 0eec 50       		.byte	0x50
 10472 0eed 00000000 		.4byte	0
 10473 0ef1 00000000 		.4byte	0
 10474              	.LLST101:
 10475 0ef5 0C000000 		.4byte	.LVL321
 10476 0ef9 12000000 		.4byte	.LVL324
 10477 0efd 0100     		.2byte	0x1
 10478 0eff 50       		.byte	0x50
 10479 0f00 00000000 		.4byte	0
 10480 0f04 00000000 		.4byte	0
 10481              	.LLST102:
 10482 0f08 00000000 		.4byte	.LVL328
 10483 0f0c 0A000000 		.4byte	.LVL329
 10484 0f10 0100     		.2byte	0x1
 10485 0f12 50       		.byte	0x50
 10486 0f13 00000000 		.4byte	0
 10487 0f17 00000000 		.4byte	0
 10488              	.LLST103:
 10489 0f1b 0A000000 		.4byte	.LVL329
 10490 0f1f 0C000000 		.4byte	.LVL330
 10491 0f23 0100     		.2byte	0x1
 10492 0f25 50       		.byte	0x50
 10493 0f26 00000000 		.4byte	0
 10494 0f2a 00000000 		.4byte	0
 10495              	.LLST104:
 10496 0f2e 0C000000 		.4byte	.LVL330
 10497 0f32 0F000000 		.4byte	.LVL331-1
 10498 0f36 0100     		.2byte	0x1
 10499 0f38 50       		.byte	0x50
 10500 0f39 00000000 		.4byte	0
 10501 0f3d 00000000 		.4byte	0
 10502              	.LLST105:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 285


 10503 0f41 00000000 		.4byte	.LVL334
 10504 0f45 44000000 		.4byte	.LVL336
 10505 0f49 0100     		.2byte	0x1
 10506 0f4b 50       		.byte	0x50
 10507 0f4c 44000000 		.4byte	.LVL336
 10508 0f50 70000000 		.4byte	.LVL339
 10509 0f54 0100     		.2byte	0x1
 10510 0f56 54       		.byte	0x54
 10511 0f57 70000000 		.4byte	.LVL339
 10512 0f5b 7A000000 		.4byte	.LVL340
 10513 0f5f 0100     		.2byte	0x1
 10514 0f61 50       		.byte	0x50
 10515 0f62 7A000000 		.4byte	.LVL340
 10516 0f66 7C000000 		.4byte	.LVL341
 10517 0f6a 0100     		.2byte	0x1
 10518 0f6c 54       		.byte	0x54
 10519 0f6d 7C000000 		.4byte	.LVL341
 10520 0f71 8A000000 		.4byte	.LVL342
 10521 0f75 0100     		.2byte	0x1
 10522 0f77 50       		.byte	0x50
 10523 0f78 8A000000 		.4byte	.LVL342
 10524 0f7c 8C000000 		.4byte	.LVL343
 10525 0f80 0100     		.2byte	0x1
 10526 0f82 54       		.byte	0x54
 10527 0f83 8C000000 		.4byte	.LVL343
 10528 0f87 8E000000 		.4byte	.LVL344
 10529 0f8b 0100     		.2byte	0x1
 10530 0f8d 50       		.byte	0x50
 10531 0f8e 8E000000 		.4byte	.LVL344
 10532 0f92 90000000 		.4byte	.LVL345
 10533 0f96 0100     		.2byte	0x1
 10534 0f98 54       		.byte	0x54
 10535 0f99 90000000 		.4byte	.LVL345
 10536 0f9d 92000000 		.4byte	.LVL346
 10537 0fa1 0100     		.2byte	0x1
 10538 0fa3 50       		.byte	0x50
 10539 0fa4 92000000 		.4byte	.LVL346
 10540 0fa8 92000000 		.4byte	.LVL347
 10541 0fac 0100     		.2byte	0x1
 10542 0fae 54       		.byte	0x54
 10543 0faf 92000000 		.4byte	.LVL347
 10544 0fb3 9C000000 		.4byte	.LFE75
 10545 0fb7 0400     		.2byte	0x4
 10546 0fb9 F3       		.byte	0xf3
 10547 0fba 01       		.uleb128 0x1
 10548 0fbb 50       		.byte	0x50
 10549 0fbc 9F       		.byte	0x9f
 10550 0fbd 00000000 		.4byte	0
 10551 0fc1 00000000 		.4byte	0
 10552              	.LLST106:
 10553 0fc5 04000000 		.4byte	.LVL335
 10554 0fc9 44000000 		.4byte	.LVL336
 10555 0fcd 0100     		.2byte	0x1
 10556 0fcf 50       		.byte	0x50
 10557 0fd0 44000000 		.4byte	.LVL336
 10558 0fd4 70000000 		.4byte	.LVL339
 10559 0fd8 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 286


 10560 0fda 54       		.byte	0x54
 10561 0fdb 70000000 		.4byte	.LVL339
 10562 0fdf 7A000000 		.4byte	.LVL340
 10563 0fe3 0100     		.2byte	0x1
 10564 0fe5 50       		.byte	0x50
 10565 0fe6 7A000000 		.4byte	.LVL340
 10566 0fea 7C000000 		.4byte	.LVL341
 10567 0fee 0100     		.2byte	0x1
 10568 0ff0 54       		.byte	0x54
 10569 0ff1 7C000000 		.4byte	.LVL341
 10570 0ff5 8A000000 		.4byte	.LVL342
 10571 0ff9 0100     		.2byte	0x1
 10572 0ffb 50       		.byte	0x50
 10573 0ffc 8A000000 		.4byte	.LVL342
 10574 1000 8C000000 		.4byte	.LVL343
 10575 1004 0100     		.2byte	0x1
 10576 1006 54       		.byte	0x54
 10577 1007 8C000000 		.4byte	.LVL343
 10578 100b 8E000000 		.4byte	.LVL344
 10579 100f 0100     		.2byte	0x1
 10580 1011 50       		.byte	0x50
 10581 1012 8E000000 		.4byte	.LVL344
 10582 1016 90000000 		.4byte	.LVL345
 10583 101a 0100     		.2byte	0x1
 10584 101c 54       		.byte	0x54
 10585 101d 90000000 		.4byte	.LVL345
 10586 1021 92000000 		.4byte	.LVL346
 10587 1025 0100     		.2byte	0x1
 10588 1027 50       		.byte	0x50
 10589 1028 92000000 		.4byte	.LVL346
 10590 102c 92000000 		.4byte	.LVL347
 10591 1030 0100     		.2byte	0x1
 10592 1032 54       		.byte	0x54
 10593 1033 92000000 		.4byte	.LVL347
 10594 1037 9C000000 		.4byte	.LFE75
 10595 103b 0400     		.2byte	0x4
 10596 103d F3       		.byte	0xf3
 10597 103e 01       		.uleb128 0x1
 10598 103f 50       		.byte	0x50
 10599 1040 9F       		.byte	0x9f
 10600 1041 00000000 		.4byte	0
 10601 1045 00000000 		.4byte	0
 10602              	.LLST107:
 10603 1049 04000000 		.4byte	.LVL335
 10604 104d 92000000 		.4byte	.LVL346
 10605 1051 0200     		.2byte	0x2
 10606 1053 30       		.byte	0x30
 10607 1054 9F       		.byte	0x9f
 10608 1055 92000000 		.4byte	.LVL346
 10609 1059 9C000000 		.4byte	.LFE75
 10610 105d 0100     		.2byte	0x1
 10611 105f 50       		.byte	0x50
 10612 1060 00000000 		.4byte	0
 10613 1064 00000000 		.4byte	0
 10614              	.LLST108:
 10615 1068 00000000 		.4byte	.LVL348
 10616 106c 1C000000 		.4byte	.LVL350
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 287


 10617 1070 0100     		.2byte	0x1
 10618 1072 50       		.byte	0x50
 10619 1073 1C000000 		.4byte	.LVL350
 10620 1077 4C000000 		.4byte	.LVL353
 10621 107b 0100     		.2byte	0x1
 10622 107d 54       		.byte	0x54
 10623 107e 4C000000 		.4byte	.LVL353
 10624 1082 4E000000 		.4byte	.LVL354
 10625 1086 0100     		.2byte	0x1
 10626 1088 50       		.byte	0x50
 10627 1089 4E000000 		.4byte	.LVL354
 10628 108d 50000000 		.4byte	.LVL355
 10629 1091 0100     		.2byte	0x1
 10630 1093 54       		.byte	0x54
 10631 1094 50000000 		.4byte	.LVL355
 10632 1098 52000000 		.4byte	.LVL356
 10633 109c 0100     		.2byte	0x1
 10634 109e 50       		.byte	0x50
 10635 109f 52000000 		.4byte	.LVL356
 10636 10a3 54000000 		.4byte	.LVL357
 10637 10a7 0100     		.2byte	0x1
 10638 10a9 54       		.byte	0x54
 10639 10aa 54000000 		.4byte	.LVL357
 10640 10ae 56000000 		.4byte	.LVL358
 10641 10b2 0100     		.2byte	0x1
 10642 10b4 50       		.byte	0x50
 10643 10b5 56000000 		.4byte	.LVL358
 10644 10b9 56000000 		.4byte	.LVL359
 10645 10bd 0100     		.2byte	0x1
 10646 10bf 54       		.byte	0x54
 10647 10c0 56000000 		.4byte	.LVL359
 10648 10c4 60000000 		.4byte	.LFE76
 10649 10c8 0400     		.2byte	0x4
 10650 10ca F3       		.byte	0xf3
 10651 10cb 01       		.uleb128 0x1
 10652 10cc 50       		.byte	0x50
 10653 10cd 9F       		.byte	0x9f
 10654 10ce 00000000 		.4byte	0
 10655 10d2 00000000 		.4byte	0
 10656              	.LLST109:
 10657 10d6 04000000 		.4byte	.LVL349
 10658 10da 1C000000 		.4byte	.LVL350
 10659 10de 0100     		.2byte	0x1
 10660 10e0 50       		.byte	0x50
 10661 10e1 1C000000 		.4byte	.LVL350
 10662 10e5 4C000000 		.4byte	.LVL353
 10663 10e9 0100     		.2byte	0x1
 10664 10eb 54       		.byte	0x54
 10665 10ec 4C000000 		.4byte	.LVL353
 10666 10f0 4E000000 		.4byte	.LVL354
 10667 10f4 0100     		.2byte	0x1
 10668 10f6 50       		.byte	0x50
 10669 10f7 4E000000 		.4byte	.LVL354
 10670 10fb 50000000 		.4byte	.LVL355
 10671 10ff 0100     		.2byte	0x1
 10672 1101 54       		.byte	0x54
 10673 1102 50000000 		.4byte	.LVL355
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 288


 10674 1106 52000000 		.4byte	.LVL356
 10675 110a 0100     		.2byte	0x1
 10676 110c 50       		.byte	0x50
 10677 110d 52000000 		.4byte	.LVL356
 10678 1111 54000000 		.4byte	.LVL357
 10679 1115 0100     		.2byte	0x1
 10680 1117 54       		.byte	0x54
 10681 1118 54000000 		.4byte	.LVL357
 10682 111c 56000000 		.4byte	.LVL358
 10683 1120 0100     		.2byte	0x1
 10684 1122 50       		.byte	0x50
 10685 1123 56000000 		.4byte	.LVL358
 10686 1127 56000000 		.4byte	.LVL359
 10687 112b 0100     		.2byte	0x1
 10688 112d 54       		.byte	0x54
 10689 112e 56000000 		.4byte	.LVL359
 10690 1132 60000000 		.4byte	.LFE76
 10691 1136 0400     		.2byte	0x4
 10692 1138 F3       		.byte	0xf3
 10693 1139 01       		.uleb128 0x1
 10694 113a 50       		.byte	0x50
 10695 113b 9F       		.byte	0x9f
 10696 113c 00000000 		.4byte	0
 10697 1140 00000000 		.4byte	0
 10698              	.LLST110:
 10699 1144 04000000 		.4byte	.LVL349
 10700 1148 48000000 		.4byte	.LVL352
 10701 114c 0200     		.2byte	0x2
 10702 114e 30       		.byte	0x30
 10703 114f 9F       		.byte	0x9f
 10704 1150 48000000 		.4byte	.LVL352
 10705 1154 4C000000 		.4byte	.LVL353
 10706 1158 0200     		.2byte	0x2
 10707 115a 31       		.byte	0x31
 10708 115b 9F       		.byte	0x9f
 10709 115c 4C000000 		.4byte	.LVL353
 10710 1160 56000000 		.4byte	.LVL358
 10711 1164 0200     		.2byte	0x2
 10712 1166 30       		.byte	0x30
 10713 1167 9F       		.byte	0x9f
 10714 1168 56000000 		.4byte	.LVL358
 10715 116c 60000000 		.4byte	.LFE76
 10716 1170 0100     		.2byte	0x1
 10717 1172 50       		.byte	0x50
 10718 1173 00000000 		.4byte	0
 10719 1177 00000000 		.4byte	0
 10720              	.LLST111:
 10721 117b 00000000 		.4byte	.LVL360
 10722 117f 48000000 		.4byte	.LVL367
 10723 1183 0100     		.2byte	0x1
 10724 1185 50       		.byte	0x50
 10725 1186 48000000 		.4byte	.LVL367
 10726 118a 6C000000 		.4byte	.LVL370
 10727 118e 0100     		.2byte	0x1
 10728 1190 54       		.byte	0x54
 10729 1191 6C000000 		.4byte	.LVL370
 10730 1195 78000000 		.4byte	.LFE77
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 289


 10731 1199 0400     		.2byte	0x4
 10732 119b F3       		.byte	0xf3
 10733 119c 01       		.uleb128 0x1
 10734 119d 50       		.byte	0x50
 10735 119e 9F       		.byte	0x9f
 10736 119f 00000000 		.4byte	0
 10737 11a3 00000000 		.4byte	0
 10738              	.LLST112:
 10739 11a7 00000000 		.4byte	.LVL360
 10740 11ab 16000000 		.4byte	.LVL363
 10741 11af 0100     		.2byte	0x1
 10742 11b1 51       		.byte	0x51
 10743 11b2 16000000 		.4byte	.LVL363
 10744 11b6 78000000 		.4byte	.LFE77
 10745 11ba 0400     		.2byte	0x4
 10746 11bc F3       		.byte	0xf3
 10747 11bd 01       		.uleb128 0x1
 10748 11be 51       		.byte	0x51
 10749 11bf 9F       		.byte	0x9f
 10750 11c0 00000000 		.4byte	0
 10751 11c4 00000000 		.4byte	0
 10752              	.LLST113:
 10753 11c8 04000000 		.4byte	.LVL361
 10754 11cc 48000000 		.4byte	.LVL367
 10755 11d0 0100     		.2byte	0x1
 10756 11d2 50       		.byte	0x50
 10757 11d3 48000000 		.4byte	.LVL367
 10758 11d7 6C000000 		.4byte	.LVL370
 10759 11db 0100     		.2byte	0x1
 10760 11dd 54       		.byte	0x54
 10761 11de 6C000000 		.4byte	.LVL370
 10762 11e2 78000000 		.4byte	.LFE77
 10763 11e6 0400     		.2byte	0x4
 10764 11e8 F3       		.byte	0xf3
 10765 11e9 01       		.uleb128 0x1
 10766 11ea 50       		.byte	0x50
 10767 11eb 9F       		.byte	0x9f
 10768 11ec 00000000 		.4byte	0
 10769 11f0 00000000 		.4byte	0
 10770              	.LLST114:
 10771 11f4 1A000000 		.4byte	.LVL364
 10772 11f8 2C000000 		.4byte	.LVL366
 10773 11fc 0100     		.2byte	0x1
 10774 11fe 52       		.byte	0x52
 10775 11ff 00000000 		.4byte	0
 10776 1203 00000000 		.4byte	0
 10777              	.LLST115:
 10778 1207 0E000000 		.4byte	.LVL362
 10779 120b 26000000 		.4byte	.LVL365
 10780 120f 0100     		.2byte	0x1
 10781 1211 53       		.byte	0x53
 10782 1212 26000000 		.4byte	.LVL365
 10783 1216 48000000 		.4byte	.LVL367
 10784 121a 0200     		.2byte	0x2
 10785 121c 70       		.byte	0x70
 10786 121d 2C       		.sleb128 44
 10787 121e 48000000 		.4byte	.LVL367
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 290


 10788 1222 4B000000 		.4byte	.LVL368-1
 10789 1226 0200     		.2byte	0x2
 10790 1228 74       		.byte	0x74
 10791 1229 2C       		.sleb128 44
 10792 122a 00000000 		.4byte	0
 10793 122e 00000000 		.4byte	0
 10794              	.LLST116:
 10795 1232 00000000 		.4byte	.LVL372
 10796 1236 09000000 		.4byte	.LVL373-1
 10797 123a 0100     		.2byte	0x1
 10798 123c 50       		.byte	0x50
 10799 123d 09000000 		.4byte	.LVL373-1
 10800 1241 64000000 		.4byte	.LVL381
 10801 1245 0100     		.2byte	0x1
 10802 1247 55       		.byte	0x55
 10803 1248 64000000 		.4byte	.LVL381
 10804 124c 6C000000 		.4byte	.LFE80
 10805 1250 0400     		.2byte	0x4
 10806 1252 F3       		.byte	0xf3
 10807 1253 01       		.uleb128 0x1
 10808 1254 50       		.byte	0x50
 10809 1255 9F       		.byte	0x9f
 10810 1256 00000000 		.4byte	0
 10811 125a 00000000 		.4byte	0
 10812              	.LLST117:
 10813 125e 00000000 		.4byte	.LVL372
 10814 1262 09000000 		.4byte	.LVL373-1
 10815 1266 0100     		.2byte	0x1
 10816 1268 51       		.byte	0x51
 10817 1269 09000000 		.4byte	.LVL373-1
 10818 126d 3A000000 		.4byte	.LVL378
 10819 1271 0100     		.2byte	0x1
 10820 1273 54       		.byte	0x54
 10821 1274 3A000000 		.4byte	.LVL378
 10822 1278 6C000000 		.4byte	.LFE80
 10823 127c 0400     		.2byte	0x4
 10824 127e F3       		.byte	0xf3
 10825 127f 01       		.uleb128 0x1
 10826 1280 51       		.byte	0x51
 10827 1281 9F       		.byte	0x9f
 10828 1282 00000000 		.4byte	0
 10829 1286 00000000 		.4byte	0
 10830              	.LLST118:
 10831 128a 3A000000 		.4byte	.LVL378
 10832 128e 64000000 		.4byte	.LVL380
 10833 1292 0100     		.2byte	0x1
 10834 1294 54       		.byte	0x54
 10835 1295 64000000 		.4byte	.LVL380
 10836 1299 6C000000 		.4byte	.LFE80
 10837 129d 0100     		.2byte	0x1
 10838 129f 50       		.byte	0x50
 10839 12a0 00000000 		.4byte	0
 10840 12a4 00000000 		.4byte	0
 10841              	.LLST119:
 10842 12a8 00000000 		.4byte	.LVL382
 10843 12ac 0D000000 		.4byte	.LVL383-1
 10844 12b0 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 291


 10845 12b2 50       		.byte	0x50
 10846 12b3 0D000000 		.4byte	.LVL383-1
 10847 12b7 7A000000 		.4byte	.LVL395
 10848 12bb 0100     		.2byte	0x1
 10849 12bd 56       		.byte	0x56
 10850 12be 7A000000 		.4byte	.LVL395
 10851 12c2 80000000 		.4byte	.LFE81
 10852 12c6 0400     		.2byte	0x4
 10853 12c8 F3       		.byte	0xf3
 10854 12c9 01       		.uleb128 0x1
 10855 12ca 50       		.byte	0x50
 10856 12cb 9F       		.byte	0x9f
 10857 12cc 00000000 		.4byte	0
 10858 12d0 00000000 		.4byte	0
 10859              	.LLST120:
 10860 12d4 00000000 		.4byte	.LVL382
 10861 12d8 0D000000 		.4byte	.LVL383-1
 10862 12dc 0100     		.2byte	0x1
 10863 12de 51       		.byte	0x51
 10864 12df 0D000000 		.4byte	.LVL383-1
 10865 12e3 7A000000 		.4byte	.LVL394
 10866 12e7 0100     		.2byte	0x1
 10867 12e9 55       		.byte	0x55
 10868 12ea 7A000000 		.4byte	.LVL394
 10869 12ee 80000000 		.4byte	.LFE81
 10870 12f2 0400     		.2byte	0x4
 10871 12f4 F3       		.byte	0xf3
 10872 12f5 01       		.uleb128 0x1
 10873 12f6 51       		.byte	0x51
 10874 12f7 9F       		.byte	0x9f
 10875 12f8 00000000 		.4byte	0
 10876 12fc 00000000 		.4byte	0
 10877              	.LLST121:
 10878 1300 00000000 		.4byte	.LVL382
 10879 1304 0D000000 		.4byte	.LVL383-1
 10880 1308 0100     		.2byte	0x1
 10881 130a 52       		.byte	0x52
 10882 130b 0D000000 		.4byte	.LVL383-1
 10883 130f 7A000000 		.4byte	.LVL396
 10884 1313 0100     		.2byte	0x1
 10885 1315 57       		.byte	0x57
 10886 1316 7A000000 		.4byte	.LVL396
 10887 131a 80000000 		.4byte	.LFE81
 10888 131e 0400     		.2byte	0x4
 10889 1320 F3       		.byte	0xf3
 10890 1321 01       		.uleb128 0x1
 10891 1322 52       		.byte	0x52
 10892 1323 9F       		.byte	0x9f
 10893 1324 00000000 		.4byte	0
 10894 1328 00000000 		.4byte	0
 10895              	.LLST122:
 10896 132c 00000000 		.4byte	.LVL382
 10897 1330 0D000000 		.4byte	.LVL383-1
 10898 1334 0100     		.2byte	0x1
 10899 1336 53       		.byte	0x53
 10900 1337 0D000000 		.4byte	.LVL383-1
 10901 133b 66000000 		.4byte	.LVL389
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 292


 10902 133f 0100     		.2byte	0x1
 10903 1341 54       		.byte	0x54
 10904 1342 66000000 		.4byte	.LVL389
 10905 1346 68000000 		.4byte	.LVL390
 10906 134a 0400     		.2byte	0x4
 10907 134c F3       		.byte	0xf3
 10908 134d 01       		.uleb128 0x1
 10909 134e 53       		.byte	0x53
 10910 134f 9F       		.byte	0x9f
 10911 1350 68000000 		.4byte	.LVL390
 10912 1354 6A000000 		.4byte	.LVL391
 10913 1358 0100     		.2byte	0x1
 10914 135a 54       		.byte	0x54
 10915 135b 6A000000 		.4byte	.LVL391
 10916 135f 80000000 		.4byte	.LFE81
 10917 1363 0400     		.2byte	0x4
 10918 1365 F3       		.byte	0xf3
 10919 1366 01       		.uleb128 0x1
 10920 1367 53       		.byte	0x53
 10921 1368 9F       		.byte	0x9f
 10922 1369 00000000 		.4byte	0
 10923 136d 00000000 		.4byte	0
 10924              	.LLST123:
 10925 1371 64000000 		.4byte	.LVL388
 10926 1375 68000000 		.4byte	.LVL390
 10927 1379 0200     		.2byte	0x2
 10928 137b 31       		.byte	0x31
 10929 137c 9F       		.byte	0x9f
 10930 137d 6A000000 		.4byte	.LVL391
 10931 1381 7A000000 		.4byte	.LVL393
 10932 1385 0100     		.2byte	0x1
 10933 1387 54       		.byte	0x54
 10934 1388 7A000000 		.4byte	.LVL393
 10935 138c 80000000 		.4byte	.LFE81
 10936 1390 0100     		.2byte	0x1
 10937 1392 50       		.byte	0x50
 10938 1393 00000000 		.4byte	0
 10939 1397 00000000 		.4byte	0
 10940              	.LLST124:
 10941 139b 00000000 		.4byte	.LVL397
 10942 139f 0D000000 		.4byte	.LVL399-1
 10943 13a3 0100     		.2byte	0x1
 10944 13a5 50       		.byte	0x50
 10945 13a6 0D000000 		.4byte	.LVL399-1
 10946 13aa A2000000 		.4byte	.LVL416
 10947 13ae 0100     		.2byte	0x1
 10948 13b0 54       		.byte	0x54
 10949 13b1 A2000000 		.4byte	.LVL416
 10950 13b5 AC000000 		.4byte	.LFE82
 10951 13b9 0400     		.2byte	0x4
 10952 13bb F3       		.byte	0xf3
 10953 13bc 01       		.uleb128 0x1
 10954 13bd 50       		.byte	0x50
 10955 13be 9F       		.byte	0x9f
 10956 13bf 00000000 		.4byte	0
 10957 13c3 00000000 		.4byte	0
 10958              	.LLST125:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 293


 10959 13c7 00000000 		.4byte	.LVL397
 10960 13cb 0D000000 		.4byte	.LVL399-1
 10961 13cf 0100     		.2byte	0x1
 10962 13d1 51       		.byte	0x51
 10963 13d2 0D000000 		.4byte	.LVL399-1
 10964 13d6 3A000000 		.4byte	.LVL401
 10965 13da 0100     		.2byte	0x1
 10966 13dc 55       		.byte	0x55
 10967 13dd 3A000000 		.4byte	.LVL401
 10968 13e1 40000000 		.4byte	.LVL402
 10969 13e5 0400     		.2byte	0x4
 10970 13e7 F3       		.byte	0xf3
 10971 13e8 01       		.uleb128 0x1
 10972 13e9 51       		.byte	0x51
 10973 13ea 9F       		.byte	0x9f
 10974 13eb 40000000 		.4byte	.LVL402
 10975 13ef 48000000 		.4byte	.LVL403
 10976 13f3 0100     		.2byte	0x1
 10977 13f5 55       		.byte	0x55
 10978 13f6 48000000 		.4byte	.LVL403
 10979 13fa 4A000000 		.4byte	.LVL404
 10980 13fe 0400     		.2byte	0x4
 10981 1400 F3       		.byte	0xf3
 10982 1401 01       		.uleb128 0x1
 10983 1402 51       		.byte	0x51
 10984 1403 9F       		.byte	0x9f
 10985 1404 4A000000 		.4byte	.LVL404
 10986 1408 4E000000 		.4byte	.LVL405
 10987 140c 0100     		.2byte	0x1
 10988 140e 55       		.byte	0x55
 10989 140f 4E000000 		.4byte	.LVL405
 10990 1413 50000000 		.4byte	.LVL406
 10991 1417 0300     		.2byte	0x3
 10992 1419 74       		.byte	0x74
 10993 141a E000     		.sleb128 96
 10994 141c 50000000 		.4byte	.LVL406
 10995 1420 58000000 		.4byte	.LVL407
 10996 1424 0100     		.2byte	0x1
 10997 1426 55       		.byte	0x55
 10998 1427 58000000 		.4byte	.LVL407
 10999 142b 5A000000 		.4byte	.LVL408
 11000 142f 0300     		.2byte	0x3
 11001 1431 74       		.byte	0x74
 11002 1432 E000     		.sleb128 96
 11003 1434 5A000000 		.4byte	.LVL408
 11004 1438 5C000000 		.4byte	.LVL409
 11005 143c 0100     		.2byte	0x1
 11006 143e 55       		.byte	0x55
 11007 143f 5C000000 		.4byte	.LVL409
 11008 1443 5E000000 		.4byte	.LVL410
 11009 1447 0400     		.2byte	0x4
 11010 1449 F3       		.byte	0xf3
 11011 144a 01       		.uleb128 0x1
 11012 144b 51       		.byte	0x51
 11013 144c 9F       		.byte	0x9f
 11014 144d 5E000000 		.4byte	.LVL410
 11015 1451 60000000 		.4byte	.LVL411
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 294


 11016 1455 0100     		.2byte	0x1
 11017 1457 55       		.byte	0x55
 11018 1458 60000000 		.4byte	.LVL411
 11019 145c AC000000 		.4byte	.LFE82
 11020 1460 0400     		.2byte	0x4
 11021 1462 F3       		.byte	0xf3
 11022 1463 01       		.uleb128 0x1
 11023 1464 51       		.byte	0x51
 11024 1465 9F       		.byte	0x9f
 11025 1466 00000000 		.4byte	0
 11026 146a 00000000 		.4byte	0
 11027              	.LLST126:
 11028 146e 00000000 		.4byte	.LVL397
 11029 1472 0D000000 		.4byte	.LVL399-1
 11030 1476 0100     		.2byte	0x1
 11031 1478 52       		.byte	0x52
 11032 1479 0D000000 		.4byte	.LVL399-1
 11033 147d AC000000 		.4byte	.LFE82
 11034 1481 0400     		.2byte	0x4
 11035 1483 F3       		.byte	0xf3
 11036 1484 01       		.uleb128 0x1
 11037 1485 52       		.byte	0x52
 11038 1486 9F       		.byte	0x9f
 11039 1487 00000000 		.4byte	0
 11040 148b 00000000 		.4byte	0
 11041              	.LLST127:
 11042 148f 00000000 		.4byte	.LVL397
 11043 1493 0D000000 		.4byte	.LVL399-1
 11044 1497 0100     		.2byte	0x1
 11045 1499 53       		.byte	0x53
 11046 149a 0D000000 		.4byte	.LVL399-1
 11047 149e A2000000 		.4byte	.LVL418
 11048 14a2 0100     		.2byte	0x1
 11049 14a4 57       		.byte	0x57
 11050 14a5 A2000000 		.4byte	.LVL418
 11051 14a9 AC000000 		.4byte	.LFE82
 11052 14ad 0400     		.2byte	0x4
 11053 14af F3       		.byte	0xf3
 11054 14b0 01       		.uleb128 0x1
 11055 14b1 53       		.byte	0x53
 11056 14b2 9F       		.byte	0x9f
 11057 14b3 00000000 		.4byte	0
 11058 14b7 00000000 		.4byte	0
 11059              	.LLST128:
 11060 14bb 0A000000 		.4byte	.LVL398
 11061 14bf 0D000000 		.4byte	.LVL399-1
 11062 14c3 0100     		.2byte	0x1
 11063 14c5 50       		.byte	0x50
 11064 14c6 0D000000 		.4byte	.LVL399-1
 11065 14ca A2000000 		.4byte	.LVL416
 11066 14ce 0100     		.2byte	0x1
 11067 14d0 54       		.byte	0x54
 11068 14d1 A2000000 		.4byte	.LVL416
 11069 14d5 AC000000 		.4byte	.LFE82
 11070 14d9 0400     		.2byte	0x4
 11071 14db F3       		.byte	0xf3
 11072 14dc 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 295


 11073 14dd 50       		.byte	0x50
 11074 14de 9F       		.byte	0x9f
 11075 14df 00000000 		.4byte	0
 11076 14e3 00000000 		.4byte	0
 11077              	.LLST129:
 11078 14e7 0A000000 		.4byte	.LVL398
 11079 14eb 60000000 		.4byte	.LVL411
 11080 14ef 0200     		.2byte	0x2
 11081 14f1 31       		.byte	0x31
 11082 14f2 9F       		.byte	0x9f
 11083 14f3 60000000 		.4byte	.LVL411
 11084 14f7 A2000000 		.4byte	.LVL417
 11085 14fb 0100     		.2byte	0x1
 11086 14fd 55       		.byte	0x55
 11087 14fe A2000000 		.4byte	.LVL417
 11088 1502 AC000000 		.4byte	.LFE82
 11089 1506 0100     		.2byte	0x1
 11090 1508 50       		.byte	0x50
 11091 1509 00000000 		.4byte	0
 11092 150d 00000000 		.4byte	0
 11093              	.LLST130:
 11094 1511 1C000000 		.4byte	.LVL400
 11095 1515 6B000000 		.4byte	.LVL412-1
 11096 1519 0100     		.2byte	0x1
 11097 151b 53       		.byte	0x53
 11098 151c 00000000 		.4byte	0
 11099 1520 00000000 		.4byte	0
 11100              	.LLST131:
 11101 1524 00000000 		.4byte	.LVL419
 11102 1528 0F000000 		.4byte	.LVL421-1
 11103 152c 0100     		.2byte	0x1
 11104 152e 50       		.byte	0x50
 11105 152f 0F000000 		.4byte	.LVL421-1
 11106 1533 D0000000 		.4byte	.LVL443
 11107 1537 0100     		.2byte	0x1
 11108 1539 54       		.byte	0x54
 11109 153a D0000000 		.4byte	.LVL443
 11110 153e E0000000 		.4byte	.LFE83
 11111 1542 0400     		.2byte	0x4
 11112 1544 F3       		.byte	0xf3
 11113 1545 01       		.uleb128 0x1
 11114 1546 50       		.byte	0x50
 11115 1547 9F       		.byte	0x9f
 11116 1548 00000000 		.4byte	0
 11117 154c 00000000 		.4byte	0
 11118              	.LLST132:
 11119 1550 00000000 		.4byte	.LVL419
 11120 1554 0F000000 		.4byte	.LVL421-1
 11121 1558 0100     		.2byte	0x1
 11122 155a 51       		.byte	0x51
 11123 155b 0F000000 		.4byte	.LVL421-1
 11124 155f 3E000000 		.4byte	.LVL424
 11125 1563 0100     		.2byte	0x1
 11126 1565 56       		.byte	0x56
 11127 1566 3E000000 		.4byte	.LVL424
 11128 156a 44000000 		.4byte	.LVL425
 11129 156e 0400     		.2byte	0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 296


 11130 1570 F3       		.byte	0xf3
 11131 1571 01       		.uleb128 0x1
 11132 1572 51       		.byte	0x51
 11133 1573 9F       		.byte	0x9f
 11134 1574 44000000 		.4byte	.LVL425
 11135 1578 4C000000 		.4byte	.LVL426
 11136 157c 0100     		.2byte	0x1
 11137 157e 56       		.byte	0x56
 11138 157f 4C000000 		.4byte	.LVL426
 11139 1583 4E000000 		.4byte	.LVL427
 11140 1587 0400     		.2byte	0x4
 11141 1589 F3       		.byte	0xf3
 11142 158a 01       		.uleb128 0x1
 11143 158b 51       		.byte	0x51
 11144 158c 9F       		.byte	0x9f
 11145 158d 4E000000 		.4byte	.LVL427
 11146 1591 52000000 		.4byte	.LVL428
 11147 1595 0100     		.2byte	0x1
 11148 1597 56       		.byte	0x56
 11149 1598 52000000 		.4byte	.LVL428
 11150 159c 54000000 		.4byte	.LVL429
 11151 15a0 0300     		.2byte	0x3
 11152 15a2 74       		.byte	0x74
 11153 15a3 E000     		.sleb128 96
 11154 15a5 54000000 		.4byte	.LVL429
 11155 15a9 5C000000 		.4byte	.LVL430
 11156 15ad 0100     		.2byte	0x1
 11157 15af 56       		.byte	0x56
 11158 15b0 5C000000 		.4byte	.LVL430
 11159 15b4 5E000000 		.4byte	.LVL431
 11160 15b8 0300     		.2byte	0x3
 11161 15ba 74       		.byte	0x74
 11162 15bb E000     		.sleb128 96
 11163 15bd 5E000000 		.4byte	.LVL431
 11164 15c1 60000000 		.4byte	.LVL432
 11165 15c5 0100     		.2byte	0x1
 11166 15c7 56       		.byte	0x56
 11167 15c8 60000000 		.4byte	.LVL432
 11168 15cc 62000000 		.4byte	.LVL433
 11169 15d0 0400     		.2byte	0x4
 11170 15d2 F3       		.byte	0xf3
 11171 15d3 01       		.uleb128 0x1
 11172 15d4 51       		.byte	0x51
 11173 15d5 9F       		.byte	0x9f
 11174 15d6 62000000 		.4byte	.LVL433
 11175 15da 64000000 		.4byte	.LVL434
 11176 15de 0100     		.2byte	0x1
 11177 15e0 56       		.byte	0x56
 11178 15e1 64000000 		.4byte	.LVL434
 11179 15e5 E0000000 		.4byte	.LFE83
 11180 15e9 0400     		.2byte	0x4
 11181 15eb F3       		.byte	0xf3
 11182 15ec 01       		.uleb128 0x1
 11183 15ed 51       		.byte	0x51
 11184 15ee 9F       		.byte	0x9f
 11185 15ef 00000000 		.4byte	0
 11186 15f3 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 297


 11187              	.LLST133:
 11188 15f7 00000000 		.4byte	.LVL419
 11189 15fb 0F000000 		.4byte	.LVL421-1
 11190 15ff 0100     		.2byte	0x1
 11191 1601 52       		.byte	0x52
 11192 1602 0F000000 		.4byte	.LVL421-1
 11193 1606 E0000000 		.4byte	.LFE83
 11194 160a 0400     		.2byte	0x4
 11195 160c F3       		.byte	0xf3
 11196 160d 01       		.uleb128 0x1
 11197 160e 52       		.byte	0x52
 11198 160f 9F       		.byte	0x9f
 11199 1610 00000000 		.4byte	0
 11200 1614 00000000 		.4byte	0
 11201              	.LLST134:
 11202 1618 00000000 		.4byte	.LVL419
 11203 161c 0F000000 		.4byte	.LVL421-1
 11204 1620 0100     		.2byte	0x1
 11205 1622 53       		.byte	0x53
 11206 1623 0F000000 		.4byte	.LVL421-1
 11207 1627 D0000000 		.4byte	.LVL444
 11208 162b 0100     		.2byte	0x1
 11209 162d 55       		.byte	0x55
 11210 162e D0000000 		.4byte	.LVL444
 11211 1632 E0000000 		.4byte	.LFE83
 11212 1636 0400     		.2byte	0x4
 11213 1638 F3       		.byte	0xf3
 11214 1639 01       		.uleb128 0x1
 11215 163a 53       		.byte	0x53
 11216 163b 9F       		.byte	0x9f
 11217 163c 00000000 		.4byte	0
 11218 1640 00000000 		.4byte	0
 11219              	.LLST135:
 11220 1644 0C000000 		.4byte	.LVL420
 11221 1648 0F000000 		.4byte	.LVL421-1
 11222 164c 0100     		.2byte	0x1
 11223 164e 50       		.byte	0x50
 11224 164f 0F000000 		.4byte	.LVL421-1
 11225 1653 D0000000 		.4byte	.LVL443
 11226 1657 0100     		.2byte	0x1
 11227 1659 54       		.byte	0x54
 11228 165a D0000000 		.4byte	.LVL443
 11229 165e E0000000 		.4byte	.LFE83
 11230 1662 0400     		.2byte	0x4
 11231 1664 F3       		.byte	0xf3
 11232 1665 01       		.uleb128 0x1
 11233 1666 50       		.byte	0x50
 11234 1667 9F       		.byte	0x9f
 11235 1668 00000000 		.4byte	0
 11236 166c 00000000 		.4byte	0
 11237              	.LLST136:
 11238 1670 20000000 		.4byte	.LVL423
 11239 1674 6A000000 		.4byte	.LVL435
 11240 1678 0100     		.2byte	0x1
 11241 167a 53       		.byte	0x53
 11242 167b 00000000 		.4byte	0
 11243 167f 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 298


 11244              	.LLST137:
 11245 1683 0C000000 		.4byte	.LVL420
 11246 1687 64000000 		.4byte	.LVL434
 11247 168b 0200     		.2byte	0x2
 11248 168d 31       		.byte	0x31
 11249 168e 9F       		.byte	0x9f
 11250 168f 64000000 		.4byte	.LVL434
 11251 1693 D0000000 		.4byte	.LVL445
 11252 1697 0100     		.2byte	0x1
 11253 1699 56       		.byte	0x56
 11254 169a D0000000 		.4byte	.LVL445
 11255 169e E0000000 		.4byte	.LFE83
 11256 16a2 0100     		.2byte	0x1
 11257 16a4 50       		.byte	0x50
 11258 16a5 00000000 		.4byte	0
 11259 16a9 00000000 		.4byte	0
 11260              	.LLST138:
 11261 16ad 12000000 		.4byte	.LVL422
 11262 16b1 74000000 		.4byte	.LVL436
 11263 16b5 0100     		.2byte	0x1
 11264 16b7 50       		.byte	0x50
 11265 16b8 74000000 		.4byte	.LVL436
 11266 16bc 9A000000 		.4byte	.LVL439
 11267 16c0 0200     		.2byte	0x2
 11268 16c2 91       		.byte	0x91
 11269 16c3 64       		.sleb128 -28
 11270 16c4 9A000000 		.4byte	.LVL439
 11271 16c8 A0000000 		.4byte	.LVL440
 11272 16cc 0100     		.2byte	0x1
 11273 16ce 50       		.byte	0x50
 11274 16cf A0000000 		.4byte	.LVL440
 11275 16d3 E0000000 		.4byte	.LFE83
 11276 16d7 0200     		.2byte	0x2
 11277 16d9 91       		.byte	0x91
 11278 16da 64       		.sleb128 -28
 11279 16db 00000000 		.4byte	0
 11280 16df 00000000 		.4byte	0
 11281              	.LLST139:
 11282 16e3 00000000 		.4byte	.LVL446
 11283 16e7 09000000 		.4byte	.LVL448-1
 11284 16eb 0100     		.2byte	0x1
 11285 16ed 50       		.byte	0x50
 11286 16ee 09000000 		.4byte	.LVL448-1
 11287 16f2 7E000000 		.4byte	.LVL458
 11288 16f6 0100     		.2byte	0x1
 11289 16f8 54       		.byte	0x54
 11290 16f9 7E000000 		.4byte	.LVL458
 11291 16fd 8C000000 		.4byte	.LFE84
 11292 1701 0400     		.2byte	0x4
 11293 1703 F3       		.byte	0xf3
 11294 1704 01       		.uleb128 0x1
 11295 1705 50       		.byte	0x50
 11296 1706 9F       		.byte	0x9f
 11297 1707 00000000 		.4byte	0
 11298 170b 00000000 		.4byte	0
 11299              	.LLST140:
 11300 170f 00000000 		.4byte	.LVL446
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 299


 11301 1713 09000000 		.4byte	.LVL448-1
 11302 1717 0100     		.2byte	0x1
 11303 1719 51       		.byte	0x51
 11304 171a 09000000 		.4byte	.LVL448-1
 11305 171e 7E000000 		.4byte	.LVL460
 11306 1722 0100     		.2byte	0x1
 11307 1724 56       		.byte	0x56
 11308 1725 7E000000 		.4byte	.LVL460
 11309 1729 8C000000 		.4byte	.LFE84
 11310 172d 0400     		.2byte	0x4
 11311 172f F3       		.byte	0xf3
 11312 1730 01       		.uleb128 0x1
 11313 1731 51       		.byte	0x51
 11314 1732 9F       		.byte	0x9f
 11315 1733 00000000 		.4byte	0
 11316 1737 00000000 		.4byte	0
 11317              	.LLST141:
 11318 173b 06000000 		.4byte	.LVL447
 11319 173f 09000000 		.4byte	.LVL448-1
 11320 1743 0100     		.2byte	0x1
 11321 1745 50       		.byte	0x50
 11322 1746 09000000 		.4byte	.LVL448-1
 11323 174a 7E000000 		.4byte	.LVL458
 11324 174e 0100     		.2byte	0x1
 11325 1750 54       		.byte	0x54
 11326 1751 7E000000 		.4byte	.LVL458
 11327 1755 8C000000 		.4byte	.LFE84
 11328 1759 0400     		.2byte	0x4
 11329 175b F3       		.byte	0xf3
 11330 175c 01       		.uleb128 0x1
 11331 175d 50       		.byte	0x50
 11332 175e 9F       		.byte	0x9f
 11333 175f 00000000 		.4byte	0
 11334 1763 00000000 		.4byte	0
 11335              	.LLST142:
 11336 1767 10000000 		.4byte	.LVL450
 11337 176b 2D000000 		.4byte	.LVL452-1
 11338 176f 0100     		.2byte	0x1
 11339 1771 52       		.byte	0x52
 11340 1772 50000000 		.4byte	.LVL454
 11341 1776 5B000000 		.4byte	.LVL456-1
 11342 177a 0100     		.2byte	0x1
 11343 177c 52       		.byte	0x52
 11344 177d 00000000 		.4byte	0
 11345 1781 00000000 		.4byte	0
 11346              	.LLST143:
 11347 1785 0C000000 		.4byte	.LVL449
 11348 1789 2A000000 		.4byte	.LVL451
 11349 178d 0100     		.2byte	0x1
 11350 178f 50       		.byte	0x50
 11351 1790 2A000000 		.4byte	.LVL451
 11352 1794 50000000 		.4byte	.LVL454
 11353 1798 0100     		.2byte	0x1
 11354 179a 55       		.byte	0x55
 11355 179b 50000000 		.4byte	.LVL454
 11356 179f 56000000 		.4byte	.LVL455
 11357 17a3 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 300


 11358 17a5 50       		.byte	0x50
 11359 17a6 56000000 		.4byte	.LVL455
 11360 17aa 7E000000 		.4byte	.LVL459
 11361 17ae 0100     		.2byte	0x1
 11362 17b0 55       		.byte	0x55
 11363 17b1 00000000 		.4byte	0
 11364 17b5 00000000 		.4byte	0
 11365              	.LLST144:
 11366 17b9 00000000 		.4byte	.LVL461
 11367 17bd 0A000000 		.4byte	.LVL462
 11368 17c1 0100     		.2byte	0x1
 11369 17c3 50       		.byte	0x50
 11370 17c4 00000000 		.4byte	0
 11371 17c8 00000000 		.4byte	0
 11372              	.LLST145:
 11373 17cc 0A000000 		.4byte	.LVL462
 11374 17d0 1E000000 		.4byte	.LVL465
 11375 17d4 0100     		.2byte	0x1
 11376 17d6 54       		.byte	0x54
 11377 17d7 20000000 		.4byte	.LVL466
 11378 17db 22000000 		.4byte	.LVL467
 11379 17df 0100     		.2byte	0x1
 11380 17e1 54       		.byte	0x54
 11381 17e2 00000000 		.4byte	0
 11382 17e6 00000000 		.4byte	0
 11383              	.LLST146:
 11384 17ea 1C000000 		.4byte	.LVL464
 11385 17ee 20000000 		.4byte	.LVL466
 11386 17f2 0200     		.2byte	0x2
 11387 17f4 31       		.byte	0x31
 11388 17f5 9F       		.byte	0x9f
 11389 17f6 22000000 		.4byte	.LVL467
 11390 17fa 28000000 		.4byte	.LVL469
 11391 17fe 0100     		.2byte	0x1
 11392 1800 54       		.byte	0x54
 11393 1801 28000000 		.4byte	.LVL469
 11394 1805 30000000 		.4byte	.LFE85
 11395 1809 0100     		.2byte	0x1
 11396 180b 50       		.byte	0x50
 11397 180c 00000000 		.4byte	0
 11398 1810 00000000 		.4byte	0
 11399              		.section	.debug_aranges,"",%progbits
 11400 0000 CC010000 		.4byte	0x1cc
 11401 0004 0200     		.2byte	0x2
 11402 0006 00000000 		.4byte	.Ldebug_info0
 11403 000a 04       		.byte	0x4
 11404 000b 00       		.byte	0
 11405 000c 0000     		.2byte	0
 11406 000e 0000     		.2byte	0
 11407 0010 00000000 		.4byte	.LFB43
 11408 0014 3C000000 		.4byte	.LFE43-.LFB43
 11409 0018 00000000 		.4byte	.LFB69
 11410 001c 14000000 		.4byte	.LFE69-.LFB69
 11411 0020 00000000 		.4byte	.LFB72
 11412 0024 30000000 		.4byte	.LFE72-.LFB72
 11413 0028 00000000 		.4byte	.LFB71
 11414 002c 12000000 		.4byte	.LFE71-.LFB71
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 301


 11415 0030 00000000 		.4byte	.LFB33
 11416 0034 AC000000 		.4byte	.LFE33-.LFB33
 11417 0038 00000000 		.4byte	.LFB67
 11418 003c 58000000 		.4byte	.LFE67-.LFB67
 11419 0040 00000000 		.4byte	.LFB34
 11420 0044 8C000000 		.4byte	.LFE34-.LFB34
 11421 0048 00000000 		.4byte	.LFB68
 11422 004c 38000000 		.4byte	.LFE68-.LFB68
 11423 0050 00000000 		.4byte	.LFB64
 11424 0054 08000000 		.4byte	.LFE64-.LFB64
 11425 0058 00000000 		.4byte	.LFB86
 11426 005c 64000000 		.4byte	.LFE86-.LFB86
 11427 0060 00000000 		.4byte	.LFB32
 11428 0064 5E000000 		.4byte	.LFE32-.LFB32
 11429 0068 00000000 		.4byte	.LFB35
 11430 006c 78000000 		.4byte	.LFE35-.LFB35
 11431 0070 00000000 		.4byte	.LFB38
 11432 0074 68000000 		.4byte	.LFE38-.LFB38
 11433 0078 00000000 		.4byte	.LFB39
 11434 007c 20000000 		.4byte	.LFE39-.LFB39
 11435 0080 00000000 		.4byte	.LFB40
 11436 0084 20000000 		.4byte	.LFE40-.LFB40
 11437 0088 00000000 		.4byte	.LFB41
 11438 008c BC000000 		.4byte	.LFE41-.LFB41
 11439 0090 00000000 		.4byte	.LFB44
 11440 0094 64000000 		.4byte	.LFE44-.LFB44
 11441 0098 00000000 		.4byte	.LFB45
 11442 009c 7C000000 		.4byte	.LFE45-.LFB45
 11443 00a0 00000000 		.4byte	.LFB46
 11444 00a4 48000000 		.4byte	.LFE46-.LFB46
 11445 00a8 00000000 		.4byte	.LFB47
 11446 00ac 14000000 		.4byte	.LFE47-.LFB47
 11447 00b0 00000000 		.4byte	.LFB48
 11448 00b4 10000000 		.4byte	.LFE48-.LFB48
 11449 00b8 00000000 		.4byte	.LFB50
 11450 00bc 0C000000 		.4byte	.LFE50-.LFB50
 11451 00c0 00000000 		.4byte	.LFB51
 11452 00c4 0C000000 		.4byte	.LFE51-.LFB51
 11453 00c8 00000000 		.4byte	.LFB52
 11454 00cc 0C000000 		.4byte	.LFE52-.LFB52
 11455 00d0 00000000 		.4byte	.LFB53
 11456 00d4 10000000 		.4byte	.LFE53-.LFB53
 11457 00d8 00000000 		.4byte	.LFB54
 11458 00dc D8000000 		.4byte	.LFE54-.LFB54
 11459 00e0 00000000 		.4byte	.LFB49
 11460 00e4 C8000000 		.4byte	.LFE49-.LFB49
 11461 00e8 00000000 		.4byte	.LFB36
 11462 00ec 5C000000 		.4byte	.LFE36-.LFB36
 11463 00f0 00000000 		.4byte	.LFB37
 11464 00f4 24000000 		.4byte	.LFE37-.LFB37
 11465 00f8 00000000 		.4byte	.LFB55
 11466 00fc B4000000 		.4byte	.LFE55-.LFB55
 11467 0100 00000000 		.4byte	.LFB42
 11468 0104 8C000000 		.4byte	.LFE42-.LFB42
 11469 0108 00000000 		.4byte	.LFB56
 11470 010c 1C000000 		.4byte	.LFE56-.LFB56
 11471 0110 00000000 		.4byte	.LFB57
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 302


 11472 0114 28000000 		.4byte	.LFE57-.LFB57
 11473 0118 00000000 		.4byte	.LFB58
 11474 011c 74000000 		.4byte	.LFE58-.LFB58
 11475 0120 00000000 		.4byte	.LFB59
 11476 0124 58000000 		.4byte	.LFE59-.LFB59
 11477 0128 00000000 		.4byte	.LFB60
 11478 012c 1C000000 		.4byte	.LFE60-.LFB60
 11479 0130 00000000 		.4byte	.LFB61
 11480 0134 10000000 		.4byte	.LFE61-.LFB61
 11481 0138 00000000 		.4byte	.LFB62
 11482 013c 54000000 		.4byte	.LFE62-.LFB62
 11483 0140 00000000 		.4byte	.LFB63
 11484 0144 0C000000 		.4byte	.LFE63-.LFB63
 11485 0148 00000000 		.4byte	.LFB65
 11486 014c 1C000000 		.4byte	.LFE65-.LFB65
 11487 0150 00000000 		.4byte	.LFB66
 11488 0154 20000000 		.4byte	.LFE66-.LFB66
 11489 0158 00000000 		.4byte	.LFB70
 11490 015c 18000000 		.4byte	.LFE70-.LFB70
 11491 0160 00000000 		.4byte	.LFB73
 11492 0164 0C000000 		.4byte	.LFE73-.LFB73
 11493 0168 00000000 		.4byte	.LFB74
 11494 016c 20000000 		.4byte	.LFE74-.LFB74
 11495 0170 00000000 		.4byte	.LFB75
 11496 0174 9C000000 		.4byte	.LFE75-.LFB75
 11497 0178 00000000 		.4byte	.LFB76
 11498 017c 60000000 		.4byte	.LFE76-.LFB76
 11499 0180 00000000 		.4byte	.LFB77
 11500 0184 78000000 		.4byte	.LFE77-.LFB77
 11501 0188 00000000 		.4byte	.LFB78
 11502 018c 18000000 		.4byte	.LFE78-.LFB78
 11503 0190 00000000 		.4byte	.LFB79
 11504 0194 1C000000 		.4byte	.LFE79-.LFB79
 11505 0198 00000000 		.4byte	.LFB80
 11506 019c 6C000000 		.4byte	.LFE80-.LFB80
 11507 01a0 00000000 		.4byte	.LFB81
 11508 01a4 80000000 		.4byte	.LFE81-.LFB81
 11509 01a8 00000000 		.4byte	.LFB82
 11510 01ac AC000000 		.4byte	.LFE82-.LFB82
 11511 01b0 00000000 		.4byte	.LFB83
 11512 01b4 E0000000 		.4byte	.LFE83-.LFB83
 11513 01b8 00000000 		.4byte	.LFB84
 11514 01bc 8C000000 		.4byte	.LFE84-.LFB84
 11515 01c0 00000000 		.4byte	.LFB85
 11516 01c4 30000000 		.4byte	.LFE85-.LFB85
 11517 01c8 00000000 		.4byte	0
 11518 01cc 00000000 		.4byte	0
 11519              		.section	.debug_ranges,"",%progbits
 11520              	.Ldebug_ranges0:
 11521 0000 0A000000 		.4byte	.LBB4
 11522 0004 32000000 		.4byte	.LBE4
 11523 0008 36000000 		.4byte	.LBB6
 11524 000c B2000000 		.4byte	.LBE6
 11525 0010 00000000 		.4byte	0
 11526 0014 00000000 		.4byte	0
 11527 0018 0A000000 		.4byte	.LBB8
 11528 001c 1E000000 		.4byte	.LBE8
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 303


 11529 0020 22000000 		.4byte	.LBB9
 11530 0024 2A000000 		.4byte	.LBE9
 11531 0028 32000000 		.4byte	.LBB10
 11532 002c 4A000000 		.4byte	.LBE10
 11533 0030 00000000 		.4byte	0
 11534 0034 00000000 		.4byte	0
 11535 0038 00000000 		.4byte	.LFB43
 11536 003c 3C000000 		.4byte	.LFE43
 11537 0040 00000000 		.4byte	.LFB69
 11538 0044 14000000 		.4byte	.LFE69
 11539 0048 00000000 		.4byte	.LFB72
 11540 004c 30000000 		.4byte	.LFE72
 11541 0050 00000000 		.4byte	.LFB71
 11542 0054 12000000 		.4byte	.LFE71
 11543 0058 00000000 		.4byte	.LFB33
 11544 005c AC000000 		.4byte	.LFE33
 11545 0060 00000000 		.4byte	.LFB67
 11546 0064 58000000 		.4byte	.LFE67
 11547 0068 00000000 		.4byte	.LFB34
 11548 006c 8C000000 		.4byte	.LFE34
 11549 0070 00000000 		.4byte	.LFB68
 11550 0074 38000000 		.4byte	.LFE68
 11551 0078 00000000 		.4byte	.LFB64
 11552 007c 08000000 		.4byte	.LFE64
 11553 0080 00000000 		.4byte	.LFB86
 11554 0084 64000000 		.4byte	.LFE86
 11555 0088 00000000 		.4byte	.LFB32
 11556 008c 5E000000 		.4byte	.LFE32
 11557 0090 00000000 		.4byte	.LFB35
 11558 0094 78000000 		.4byte	.LFE35
 11559 0098 00000000 		.4byte	.LFB38
 11560 009c 68000000 		.4byte	.LFE38
 11561 00a0 00000000 		.4byte	.LFB39
 11562 00a4 20000000 		.4byte	.LFE39
 11563 00a8 00000000 		.4byte	.LFB40
 11564 00ac 20000000 		.4byte	.LFE40
 11565 00b0 00000000 		.4byte	.LFB41
 11566 00b4 BC000000 		.4byte	.LFE41
 11567 00b8 00000000 		.4byte	.LFB44
 11568 00bc 64000000 		.4byte	.LFE44
 11569 00c0 00000000 		.4byte	.LFB45
 11570 00c4 7C000000 		.4byte	.LFE45
 11571 00c8 00000000 		.4byte	.LFB46
 11572 00cc 48000000 		.4byte	.LFE46
 11573 00d0 00000000 		.4byte	.LFB47
 11574 00d4 14000000 		.4byte	.LFE47
 11575 00d8 00000000 		.4byte	.LFB48
 11576 00dc 10000000 		.4byte	.LFE48
 11577 00e0 00000000 		.4byte	.LFB50
 11578 00e4 0C000000 		.4byte	.LFE50
 11579 00e8 00000000 		.4byte	.LFB51
 11580 00ec 0C000000 		.4byte	.LFE51
 11581 00f0 00000000 		.4byte	.LFB52
 11582 00f4 0C000000 		.4byte	.LFE52
 11583 00f8 00000000 		.4byte	.LFB53
 11584 00fc 10000000 		.4byte	.LFE53
 11585 0100 00000000 		.4byte	.LFB54
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 304


 11586 0104 D8000000 		.4byte	.LFE54
 11587 0108 00000000 		.4byte	.LFB49
 11588 010c C8000000 		.4byte	.LFE49
 11589 0110 00000000 		.4byte	.LFB36
 11590 0114 5C000000 		.4byte	.LFE36
 11591 0118 00000000 		.4byte	.LFB37
 11592 011c 24000000 		.4byte	.LFE37
 11593 0120 00000000 		.4byte	.LFB55
 11594 0124 B4000000 		.4byte	.LFE55
 11595 0128 00000000 		.4byte	.LFB42
 11596 012c 8C000000 		.4byte	.LFE42
 11597 0130 00000000 		.4byte	.LFB56
 11598 0134 1C000000 		.4byte	.LFE56
 11599 0138 00000000 		.4byte	.LFB57
 11600 013c 28000000 		.4byte	.LFE57
 11601 0140 00000000 		.4byte	.LFB58
 11602 0144 74000000 		.4byte	.LFE58
 11603 0148 00000000 		.4byte	.LFB59
 11604 014c 58000000 		.4byte	.LFE59
 11605 0150 00000000 		.4byte	.LFB60
 11606 0154 1C000000 		.4byte	.LFE60
 11607 0158 00000000 		.4byte	.LFB61
 11608 015c 10000000 		.4byte	.LFE61
 11609 0160 00000000 		.4byte	.LFB62
 11610 0164 54000000 		.4byte	.LFE62
 11611 0168 00000000 		.4byte	.LFB63
 11612 016c 0C000000 		.4byte	.LFE63
 11613 0170 00000000 		.4byte	.LFB65
 11614 0174 1C000000 		.4byte	.LFE65
 11615 0178 00000000 		.4byte	.LFB66
 11616 017c 20000000 		.4byte	.LFE66
 11617 0180 00000000 		.4byte	.LFB70
 11618 0184 18000000 		.4byte	.LFE70
 11619 0188 00000000 		.4byte	.LFB73
 11620 018c 0C000000 		.4byte	.LFE73
 11621 0190 00000000 		.4byte	.LFB74
 11622 0194 20000000 		.4byte	.LFE74
 11623 0198 00000000 		.4byte	.LFB75
 11624 019c 9C000000 		.4byte	.LFE75
 11625 01a0 00000000 		.4byte	.LFB76
 11626 01a4 60000000 		.4byte	.LFE76
 11627 01a8 00000000 		.4byte	.LFB77
 11628 01ac 78000000 		.4byte	.LFE77
 11629 01b0 00000000 		.4byte	.LFB78
 11630 01b4 18000000 		.4byte	.LFE78
 11631 01b8 00000000 		.4byte	.LFB79
 11632 01bc 1C000000 		.4byte	.LFE79
 11633 01c0 00000000 		.4byte	.LFB80
 11634 01c4 6C000000 		.4byte	.LFE80
 11635 01c8 00000000 		.4byte	.LFB81
 11636 01cc 80000000 		.4byte	.LFE81
 11637 01d0 00000000 		.4byte	.LFB82
 11638 01d4 AC000000 		.4byte	.LFE82
 11639 01d8 00000000 		.4byte	.LFB83
 11640 01dc E0000000 		.4byte	.LFE83
 11641 01e0 00000000 		.4byte	.LFB84
 11642 01e4 8C000000 		.4byte	.LFE84
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 305


 11643 01e8 00000000 		.4byte	.LFB85
 11644 01ec 30000000 		.4byte	.LFE85
 11645 01f0 00000000 		.4byte	0
 11646 01f4 00000000 		.4byte	0
 11647              		.section	.debug_line,"",%progbits
 11648              	.Ldebug_line0:
 11649 0000 AE0B0000 		.section	.debug_str,"MS",%progbits,1
 11649      0200B602 
 11649      00000201 
 11649      FB0E0D00 
 11649      01010101 
 11650              	.LASF161:
 11651 0000 75785065 		.ascii	"uxPendedCounts\000"
 11651      6E646564 
 11651      436F756E 
 11651      747300
 11652              	.LASF242:
 11653 000f 78596965 		.ascii	"xYieldPending\000"
 11653      6C645065 
 11653      6E64696E 
 11653      6700
 11654              	.LASF4:
 11655 001d 73697A65 		.ascii	"size_t\000"
 11655      5F7400
 11656              	.LASF42:
 11657 0024 4E52465F 		.ascii	"NRF_RX_PW_P4_REG\000"
 11657      52585F50 
 11657      575F5034 
 11657      5F524547 
 11657      00
 11658              	.LASF14:
 11659 0035 73697A65 		.ascii	"sizetype\000"
 11659      74797065 
 11659      00
 11660              	.LASF184:
 11661 003e 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11661      6B496E74 
 11661      65726E61 
 11661      6C536574 
 11661      54696D65 
 11662              	.LASF129:
 11663 005b 75735374 		.ascii	"usStackDepth\000"
 11663      61636B44 
 11663      65707468 
 11663      00
 11664              	.LASF25:
 11665 0068 4E52465F 		.ascii	"NRF_SETUP_RETR_REG\000"
 11665      53455455 
 11665      505F5245 
 11665      54525F52 
 11665      454700
 11666              	.LASF35:
 11667 007b 4E52465F 		.ascii	"NRF_RX_ADDR_P4_REG\000"
 11667      52585F41 
 11667      4444525F 
 11667      50345F52 
 11667      454700
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 306


 11668              	.LASF126:
 11669 008e 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11669      426C6F63 
 11669      6B496E64 
 11669      6566696E 
 11669      6974656C 
 11670              	.LASF153:
 11671 00a4 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11671      6B476574 
 11671      5469636B 
 11671      436F756E 
 11671      7446726F 
 11672              	.LASF88:
 11673 00bd 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11673      72795265 
 11673      67696F6E 
 11673      5F7400
 11674              	.LASF92:
 11675 00cc 78457665 		.ascii	"xEventListItem\000"
 11675      6E744C69 
 11675      73744974 
 11675      656D00
 11676              	.LASF73:
 11677 00db 65546173 		.ascii	"eTaskState\000"
 11677      6B537461 
 11677      746500
 11678              	.LASF80:
 11679 00e6 7854494D 		.ascii	"xTIME_OUT\000"
 11679      455F4F55 
 11679      5400
 11680              	.LASF238:
 11681 00f0 78546963 		.ascii	"xTickCount\000"
 11681      6B436F75 
 11681      6E7400
 11682              	.LASF244:
 11683 00fb 75785461 		.ascii	"uxTaskNumber\000"
 11683      736B4E75 
 11683      6D626572 
 11683      00
 11684              	.LASF113:
 11685 0108 70785461 		.ascii	"pxTaskCode\000"
 11685      736B436F 
 11685      646500
 11686              	.LASF138:
 11687 0113 75785361 		.ascii	"uxSavedInterruptState\000"
 11687      76656449 
 11687      6E746572 
 11687      72757074 
 11687      53746174 
 11688              	.LASF218:
 11689 0129 78546173 		.ascii	"xTaskGenericNotify\000"
 11689      6B47656E 
 11689      65726963 
 11689      4E6F7469 
 11689      667900
 11690              	.LASF49:
 11691 013c 42617365 		.ascii	"BaseType_t\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 307


 11691      54797065 
 11691      5F7400
 11692              	.LASF71:
 11693 0147 6544656C 		.ascii	"eDeleted\000"
 11693      65746564 
 11693      00
 11694              	.LASF94:
 11695 0150 70785374 		.ascii	"pxStack\000"
 11695      61636B00 
 11696              	.LASF145:
 11697 0158 76546173 		.ascii	"vTaskResume\000"
 11697      6B526573 
 11697      756D6500 
 11698              	.LASF53:
 11699 0164 70784E65 		.ascii	"pxNext\000"
 11699      787400
 11700              	.LASF209:
 11701 016b 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11701      736B4765 
 11701      744E756D 
 11701      6265724F 
 11701      66546173 
 11702              	.LASF203:
 11703 0182 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11703      6B507269 
 11703      6F726974 
 11703      79446973 
 11703      696E6865 
 11704              	.LASF265:
 11705 019a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11705      43313120 
 11705      352E342E 
 11705      31203230 
 11705      31363036 
 11706 01cd 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 11706      20726576 
 11706      6973696F 
 11706      6E203233 
 11706      37373135 
 11707 0200 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11707      66756E63 
 11707      74696F6E 
 11707      2D736563 
 11707      74696F6E 
 11708              	.LASF258:
 11709 0228 764C6973 		.ascii	"vListInsert\000"
 11709      74496E73 
 11709      65727400 
 11710              	.LASF174:
 11711 0234 78546173 		.ascii	"xTaskToSuspend\000"
 11711      6B546F53 
 11711      75737065 
 11711      6E6400
 11712              	.LASF107:
 11713 0243 78546173 		.ascii	"xTask\000"
 11713      6B00
 11714              	.LASF136:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 308


 11715 0249 75785265 		.ascii	"uxReturn\000"
 11715      7475726E 
 11715      00
 11716              	.LASF266:
 11717 0252 2E2E5C46 		.ascii	"..\\FreeRTOS\\tasks.c\000"
 11717      72656552 
 11717      544F535C 
 11717      7461736B 
 11717      732E6300 
 11718              	.LASF118:
 11719 0266 70784E65 		.ascii	"pxNewTCB\000"
 11719      77544342 
 11719      00
 11720              	.LASF194:
 11721 026f 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 11721      736B4765 
 11721      74546872 
 11721      6561644C 
 11721      6F63616C 
 11722              	.LASF5:
 11723 0292 5F5F7569 		.ascii	"__uint8_t\000"
 11723      6E74385F 
 11723      7400
 11724              	.LASF96:
 11725 029c 75784261 		.ascii	"uxBasePriority\000"
 11725      73655072 
 11725      696F7269 
 11725      747900
 11726              	.LASF101:
 11727 02ab 74736B54 		.ascii	"tskTCB\000"
 11727      434200
 11728              	.LASF37:
 11729 02b2 4E52465F 		.ascii	"NRF_TX_ADDR_REG\000"
 11729      54585F41 
 11729      4444525F 
 11729      52454700 
 11730              	.LASF142:
 11731 02c2 75784375 		.ascii	"uxCurrentBasePriority\000"
 11731      7272656E 
 11731      74426173 
 11731      65507269 
 11731      6F726974 
 11732              	.LASF10:
 11733 02d8 6C6F6E67 		.ascii	"long int\000"
 11733      20696E74 
 11733      00
 11734              	.LASF268:
 11735 02e1 70784375 		.ascii	"pxCurrentTCB\000"
 11735      7272656E 
 11735      74544342 
 11735      00
 11736              	.LASF61:
 11737 02ee 784C4953 		.ascii	"xLIST\000"
 11737      5400
 11738              	.LASF235:
 11739 02f4 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11739      6C657465 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 309


 11739      64546173 
 11739      6B735761 
 11739      6974696E 
 11740              	.LASF151:
 11741 0311 78546173 		.ascii	"xTaskGetTickCount\000"
 11741      6B476574 
 11741      5469636B 
 11741      436F756E 
 11741      7400
 11742              	.LASF41:
 11743 0323 4E52465F 		.ascii	"NRF_RX_PW_P3_REG\000"
 11743      52585F50 
 11743      575F5033 
 11743      5F524547 
 11743      00
 11744              	.LASF149:
 11745 0334 76546173 		.ascii	"vTaskStartScheduler\000"
 11745      6B537461 
 11745      72745363 
 11745      68656475 
 11745      6C657200 
 11746              	.LASF75:
 11747 0348 65536574 		.ascii	"eSetBits\000"
 11747      42697473 
 11747      00
 11748              	.LASF121:
 11749 0351 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11749      64644E65 
 11749      77546173 
 11749      6B546F52 
 11749      65616479 
 11750              	.LASF34:
 11751 036a 4E52465F 		.ascii	"NRF_RX_ADDR_P3_REG\000"
 11751      52585F41 
 11751      4444525F 
 11751      50335F52 
 11751      454700
 11752              	.LASF186:
 11753 037d 70785469 		.ascii	"pxTicksToWait\000"
 11753      636B7354 
 11753      6F576169 
 11753      7400
 11754              	.LASF114:
 11755 038b 70634E61 		.ascii	"pcName\000"
 11755      6D6500
 11756              	.LASF23:
 11757 0392 4E52465F 		.ascii	"NRF_EN_RXADDR_REG\000"
 11757      454E5F52 
 11757      58414444 
 11757      525F5245 
 11757      4700
 11758              	.LASF252:
 11759 03a4 764C6973 		.ascii	"vListInitialise\000"
 11759      74496E69 
 11759      7469616C 
 11759      69736500 
 11760              	.LASF30:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 310


 11761 03b4 4E52465F 		.ascii	"NRF_RPD_REG\000"
 11761      5250445F 
 11761      52454700 
 11762              	.LASF254:
 11763 03c0 764C6973 		.ascii	"vListInsertEnd\000"
 11763      74496E73 
 11763      65727445 
 11763      6E6400
 11764              	.LASF259:
 11765 03cf 7076506F 		.ascii	"pvPortMalloc\000"
 11765      72744D61 
 11765      6C6C6F63 
 11765      00
 11766              	.LASF236:
 11767 03dc 78537573 		.ascii	"xSuspendedTaskList\000"
 11767      70656E64 
 11767      65645461 
 11767      736B4C69 
 11767      737400
 11768              	.LASF212:
 11769 03ef 78436C65 		.ascii	"xClearCountOnExit\000"
 11769      6172436F 
 11769      756E744F 
 11769      6E457869 
 11769      7400
 11770              	.LASF3:
 11771 0401 7369676E 		.ascii	"signed char\000"
 11771      65642063 
 11771      68617200 
 11772              	.LASF70:
 11773 040d 65537573 		.ascii	"eSuspended\000"
 11773      70656E64 
 11773      656400
 11774              	.LASF16:
 11775 0418 75696E74 		.ascii	"uint8_t\000"
 11775      385F7400 
 11776              	.LASF223:
 11777 0420 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11777      6967696E 
 11777      616C4E6F 
 11777      74696679 
 11777      53746174 
 11778              	.LASF267:
 11779 0436 433A5C55 		.ascii	"C:\\Users\\Xwx47\\Documents\\Creator\\RNET\\v01.cyd"
 11779      73657273 
 11779      5C587778 
 11779      34375C44 
 11779      6F63756D 
 11780 0463 736E00   		.ascii	"sn\000"
 11781              	.LASF206:
 11782 0466 75785072 		.ascii	"uxPriorityToUse\000"
 11782      696F7269 
 11782      7479546F 
 11782      55736500 
 11783              	.LASF217:
 11784 0476 70756C4E 		.ascii	"pulNotificationValue\000"
 11784      6F746966 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 311


 11784      69636174 
 11784      696F6E56 
 11784      616C7565 
 11785              	.LASF6:
 11786 048b 756E7369 		.ascii	"unsigned char\000"
 11786      676E6564 
 11786      20636861 
 11786      7200
 11787              	.LASF243:
 11788 0499 784E756D 		.ascii	"xNumOfOverflows\000"
 11788      4F664F76 
 11788      6572666C 
 11788      6F777300 
 11789              	.LASF103:
 11790 04a9 78526574 		.ascii	"xReturn\000"
 11790      75726E00 
 11791              	.LASF60:
 11792 04b1 4D696E69 		.ascii	"MiniListItem_t\000"
 11792      4C697374 
 11792      4974656D 
 11792      5F7400
 11793              	.LASF110:
 11794 04c0 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11794      65736574 
 11794      4E657874 
 11794      5461736B 
 11794      556E626C 
 11795              	.LASF112:
 11796 04dc 70727649 		.ascii	"prvInitialiseNewTask\000"
 11796      6E697469 
 11796      616C6973 
 11796      654E6577 
 11796      5461736B 
 11797              	.LASF207:
 11798 04f1 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11798      6C794F6E 
 11798      654D7574 
 11798      65784865 
 11798      6C6400
 11799              	.LASF82:
 11800 0504 7854696D 		.ascii	"xTimeOnEntering\000"
 11800      654F6E45 
 11800      6E746572 
 11800      696E6700 
 11801              	.LASF241:
 11802 0514 75785065 		.ascii	"uxPendedTicks\000"
 11802      6E646564 
 11802      5469636B 
 11802      7300
 11803              	.LASF177:
 11804 0522 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11804      6B506C61 
 11804      63654F6E 
 11804      556E6F72 
 11804      64657265 
 11805              	.LASF222:
 11806 0541 70756C50 		.ascii	"pulPreviousNotificationValue\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 312


 11806      72657669 
 11806      6F75734E 
 11806      6F746966 
 11806      69636174 
 11807              	.LASF63:
 11808 055e 7078496E 		.ascii	"pxIndex\000"
 11808      64657800 
 11809              	.LASF90:
 11810 0566 7078546F 		.ascii	"pxTopOfStack\000"
 11810      704F6653 
 11810      7461636B 
 11810      00
 11811              	.LASF240:
 11812 0573 78536368 		.ascii	"xSchedulerRunning\000"
 11812      6564756C 
 11812      65725275 
 11812      6E6E696E 
 11812      6700
 11813              	.LASF105:
 11814 0585 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11814      61736B49 
 11814      73546173 
 11814      6B537573 
 11814      70656E64 
 11815              	.LASF15:
 11816 059c 63686172 		.ascii	"char\000"
 11816      00
 11817              	.LASF264:
 11818 05a1 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 11818      6C696361 
 11818      74696F6E 
 11818      53746163 
 11818      6B4F7665 
 11819              	.LASF83:
 11820 05bf 54696D65 		.ascii	"TimeOut_t\000"
 11820      4F75745F 
 11820      7400
 11821              	.LASF59:
 11822 05c9 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11822      495F4C49 
 11822      53545F49 
 11822      54454D00 
 11823              	.LASF8:
 11824 05d9 5F5F7569 		.ascii	"__uint16_t\000"
 11824      6E743136 
 11824      5F7400
 11825              	.LASF78:
 11826 05e4 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11826      56616C75 
 11826      65576974 
 11826      686F7574 
 11826      4F766572 
 11827              	.LASF251:
 11828 05fe 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11828      7274496E 
 11828      69746961 
 11828      6C697365 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 313


 11828      53746163 
 11829              	.LASF139:
 11830 0614 76546173 		.ascii	"vTaskDelete\000"
 11830      6B44656C 
 11830      65746500 
 11831              	.LASF109:
 11832 0620 756C436F 		.ascii	"ulCount\000"
 11832      756E7400 
 11833              	.LASF208:
 11834 0628 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11834      736B5265 
 11834      73657445 
 11834      76656E74 
 11834      4974656D 
 11835              	.LASF147:
 11836 0642 78546173 		.ascii	"xTaskResumeFromISR\000"
 11836      6B526573 
 11836      756D6546 
 11836      726F6D49 
 11836      535200
 11837              	.LASF247:
 11838 0655 75785363 		.ascii	"uxSchedulerSuspended\000"
 11838      68656475 
 11838      6C657253 
 11838      75737065 
 11838      6E646564 
 11839              	.LASF169:
 11840 066a 70756C53 		.ascii	"pulStack\000"
 11840      7461636B 
 11840      00
 11841              	.LASF44:
 11842 0673 4E52465F 		.ascii	"NRF_FIFO_STATUS_REG\000"
 11842      4649464F 
 11842      5F535441 
 11842      5455535F 
 11842      52454700 
 11843              	.LASF40:
 11844 0687 4E52465F 		.ascii	"NRF_RX_PW_P2_REG\000"
 11844      52585F50 
 11844      575F5032 
 11844      5F524547 
 11844      00
 11845              	.LASF245:
 11846 0698 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11846      74546173 
 11846      6B556E62 
 11846      6C6F636B 
 11846      54696D65 
 11847              	.LASF233:
 11848 06ad 7850656E 		.ascii	"xPendingReadyList\000"
 11848      64696E67 
 11848      52656164 
 11848      794C6973 
 11848      7400
 11849              	.LASF33:
 11850 06bf 4E52465F 		.ascii	"NRF_RX_ADDR_P2_REG\000"
 11850      52585F41 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 314


 11850      4444525F 
 11850      50325F52 
 11850      454700
 11851              	.LASF99:
 11852 06d2 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11852      74696669 
 11852      65645661 
 11852      6C756500 
 11853              	.LASF170:
 11854 06e2 756C4368 		.ascii	"ulCheckValue\000"
 11854      65636B56 
 11854      616C7565 
 11854      00
 11855              	.LASF168:
 11856 06ef 76546173 		.ascii	"vTaskSwitchContext\000"
 11856      6B537769 
 11856      74636843 
 11856      6F6E7465 
 11856      787400
 11857              	.LASF197:
 11858 0702 70756345 		.ascii	"pucEndOfStack\000"
 11858      6E644F66 
 11858      53746163 
 11858      6B00
 11859              	.LASF172:
 11860 0710 7078436F 		.ascii	"pxConstList\000"
 11860      6E73744C 
 11860      69737400 
 11861              	.LASF117:
 11862 071c 70784372 		.ascii	"pxCreatedTask\000"
 11862      65617465 
 11862      64546173 
 11862      6B00
 11863              	.LASF210:
 11864 072a 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11864      736B496E 
 11864      6372656D 
 11864      656E744D 
 11864      75746578 
 11865              	.LASF146:
 11866 0748 78546173 		.ascii	"xTaskToResume\000"
 11866      6B546F52 
 11866      6573756D 
 11866      6500
 11867              	.LASF134:
 11868 0756 70785374 		.ascii	"pxStateList\000"
 11868      6174654C 
 11868      69737400 
 11869              	.LASF152:
 11870 0762 78546963 		.ascii	"xTicks\000"
 11870      6B7300
 11871              	.LASF85:
 11872 0769 70764261 		.ascii	"pvBaseAddress\000"
 11872      73654164 
 11872      64726573 
 11872      7300
 11873              	.LASF237:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 315


 11874 0777 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11874      7272656E 
 11874      744E756D 
 11874      6265724F 
 11874      66546173 
 11875              	.LASF140:
 11876 078e 76546173 		.ascii	"vTaskPrioritySet\000"
 11876      6B507269 
 11876      6F726974 
 11876      79536574 
 11876      00
 11877              	.LASF46:
 11878 079f 4E52465F 		.ascii	"NRF_FEATURE_REG\000"
 11878      46454154 
 11878      5552455F 
 11878      52454700 
 11879              	.LASF81:
 11880 07af 784F7665 		.ascii	"xOverflowCount\000"
 11880      72666C6F 
 11880      77436F75 
 11880      6E7400
 11881              	.LASF183:
 11882 07be 70785469 		.ascii	"pxTimeOut\000"
 11882      6D654F75 
 11882      7400
 11883              	.LASF163:
 11884 07c8 70785072 		.ascii	"pxPreviousWakeTime\000"
 11884      6576696F 
 11884      75735761 
 11884      6B655469 
 11884      6D6500
 11885              	.LASF68:
 11886 07db 65526561 		.ascii	"eReady\000"
 11886      647900
 11887              	.LASF176:
 11888 07e2 70784576 		.ascii	"pxEventList\000"
 11888      656E744C 
 11888      69737400 
 11889              	.LASF12:
 11890 07ee 6C6F6E67 		.ascii	"long unsigned int\000"
 11890      20756E73 
 11890      69676E65 
 11890      6420696E 
 11890      7400
 11891              	.LASF189:
 11892 0800 76546173 		.ascii	"vTaskMissedYield\000"
 11892      6B4D6973 
 11892      73656459 
 11892      69656C64 
 11892      00
 11893              	.LASF262:
 11894 0811 78506F72 		.ascii	"xPortStartScheduler\000"
 11894      74537461 
 11894      72745363 
 11894      68656475 
 11894      6C657200 
 11895              	.LASF246:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 316


 11896 0825 7849646C 		.ascii	"xIdleTaskHandle\000"
 11896      65546173 
 11896      6B48616E 
 11896      646C6500 
 11897              	.LASF182:
 11898 0835 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11898      6B536574 
 11898      54696D65 
 11898      4F757453 
 11898      74617465 
 11899              	.LASF154:
 11900 084a 70635461 		.ascii	"pcTaskGetName\000"
 11900      736B4765 
 11900      744E616D 
 11900      6500
 11901              	.LASF143:
 11902 0858 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11902      696F7269 
 11902      74795573 
 11902      65644F6E 
 11902      456E7472 
 11903              	.LASF84:
 11904 086e 784D454D 		.ascii	"xMEMORY_REGION\000"
 11904      4F52595F 
 11904      52454749 
 11904      4F4E00
 11905              	.LASF185:
 11906 087d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11906      6B436865 
 11906      636B466F 
 11906      7254696D 
 11906      654F7574 
 11907              	.LASF167:
 11908 0892 78546963 		.ascii	"xTicksToDelay\000"
 11908      6B73546F 
 11908      44656C61 
 11908      7900
 11909              	.LASF201:
 11910 08a0 70784D75 		.ascii	"pxMutexHolder\000"
 11910      74657848 
 11910      6F6C6465 
 11910      7200
 11911              	.LASF115:
 11912 08ae 756C5374 		.ascii	"ulStackDepth\000"
 11912      61636B44 
 11912      65707468 
 11912      00
 11913              	.LASF32:
 11914 08bb 4E52465F 		.ascii	"NRF_RX_ADDR_P1_REG\000"
 11914      52585F41 
 11914      4444525F 
 11914      50315F52 
 11914      454700
 11915              	.LASF175:
 11916 08ce 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11916      6B506C61 
 11916      63654F6E 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 317


 11916      4576656E 
 11916      744C6973 
 11917              	.LASF39:
 11918 08e4 4E52465F 		.ascii	"NRF_RX_PW_P1_REG\000"
 11918      52585F50 
 11918      575F5031 
 11918      5F524547 
 11918      00
 11919              	.LASF123:
 11920 08f5 70727649 		.ascii	"prvIdleTask\000"
 11920      646C6554 
 11920      61736B00 
 11921              	.LASF56:
 11922 0901 7076436F 		.ascii	"pvContainer\000"
 11922      6E746169 
 11922      6E657200 
 11923              	.LASF11:
 11924 090d 5F5F7569 		.ascii	"__uint32_t\000"
 11924      6E743332 
 11924      5F7400
 11925              	.LASF148:
 11926 0918 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11926      76656449 
 11926      6E746572 
 11926      72757074 
 11926      53746174 
 11927              	.LASF1:
 11928 092f 6C6F6E67 		.ascii	"long long int\000"
 11928      206C6F6E 
 11928      6720696E 
 11928      7400
 11929              	.LASF144:
 11930 093d 78596965 		.ascii	"xYieldRequired\000"
 11930      6C645265 
 11930      71756972 
 11930      656400
 11931              	.LASF195:
 11932 094c 70765265 		.ascii	"pvReturn\000"
 11932      7475726E 
 11932      00
 11933              	.LASF256:
 11934 0955 76506F72 		.ascii	"vPortYield\000"
 11934      74596965 
 11934      6C6400
 11935              	.LASF20:
 11936 0960 646F7562 		.ascii	"double\000"
 11936      6C6500
 11937              	.LASF181:
 11938 0967 70784576 		.ascii	"pxEventListItem\000"
 11938      656E744C 
 11938      69737449 
 11938      74656D00 
 11939              	.LASF58:
 11940 0977 784C4953 		.ascii	"xLIST_ITEM\000"
 11940      545F4954 
 11940      454D00
 11941              	.LASF200:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 318


 11942 0982 78546173 		.ascii	"xTaskPriorityInherit\000"
 11942      6B507269 
 11942      6F726974 
 11942      79496E68 
 11942      65726974 
 11943              	.LASF86:
 11944 0997 756C4C65 		.ascii	"ulLengthInBytes\000"
 11944      6E677468 
 11944      496E4279 
 11944      74657300 
 11945              	.LASF213:
 11946 09a7 756C5265 		.ascii	"ulReturn\000"
 11946      7475726E 
 11946      00
 11947              	.LASF228:
 11948 09b0 70785265 		.ascii	"pxReadyTasksLists\000"
 11948      61647954 
 11948      61736B73 
 11948      4C697374 
 11948      7300
 11949              	.LASF19:
 11950 09c2 666C6F61 		.ascii	"float\000"
 11950      7400
 11951              	.LASF67:
 11952 09c8 6552756E 		.ascii	"eRunning\000"
 11952      6E696E67 
 11952      00
 11953              	.LASF47:
 11954 09d1 5461736B 		.ascii	"TaskFunction_t\000"
 11954      46756E63 
 11954      74696F6E 
 11954      5F7400
 11955              	.LASF127:
 11956 09e0 7854696D 		.ascii	"xTimeToWake\000"
 11956      65546F57 
 11956      616B6500 
 11957              	.LASF0:
 11958 09ec 756E7369 		.ascii	"unsigned int\000"
 11958      676E6564 
 11958      20696E74 
 11958      00
 11959              	.LASF28:
 11960 09f9 4E52465F 		.ascii	"NRF_STATUS_REG\000"
 11960      53544154 
 11960      55535F52 
 11960      454700
 11961              	.LASF261:
 11962 0a08 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 11962      6172496E 
 11962      74657272 
 11962      7570744D 
 11962      61736B46 
 11963              	.LASF24:
 11964 0a23 4E52465F 		.ascii	"NRF_SETUP_AW_REG\000"
 11964      53455455 
 11964      505F4157 
 11964      5F524547 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 319


 11964      00
 11965              	.LASF111:
 11966 0a34 70727644 		.ascii	"prvDeleteTCB\000"
 11966      656C6574 
 11966      65544342 
 11966      00
 11967              	.LASF193:
 11968 0a41 70765661 		.ascii	"pvValue\000"
 11968      6C756500 
 11969              	.LASF62:
 11970 0a49 75784E75 		.ascii	"uxNumberOfItems\000"
 11970      6D626572 
 11970      4F664974 
 11970      656D7300 
 11971              	.LASF188:
 11972 0a59 76546173 		.ascii	"vTaskSuspendAll\000"
 11972      6B537573 
 11972      70656E64 
 11972      416C6C00 
 11973              	.LASF106:
 11974 0a69 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11974      61736B43 
 11974      6865636B 
 11974      46726565 
 11974      53746163 
 11975              	.LASF179:
 11976 0a84 7078556E 		.ascii	"pxUnblockedTCB\000"
 11976      626C6F63 
 11976      6B656454 
 11976      434200
 11977              	.LASF26:
 11978 0a93 4E52465F 		.ascii	"NRF_RF_CH_REG\000"
 11978      52465F43 
 11978      485F5245 
 11978      4700
 11979              	.LASF97:
 11980 0aa1 75784D75 		.ascii	"uxMutexesHeld\000"
 11980      74657865 
 11980      7348656C 
 11980      6400
 11981              	.LASF196:
 11982 0aaf 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11982      736B4765 
 11982      74537461 
 11982      636B4869 
 11982      67685761 
 11983              	.LASF66:
 11984 0acb 5461736B 		.ascii	"TaskHandle_t\000"
 11984      48616E64 
 11984      6C655F74 
 11984      00
 11985              	.LASF65:
 11986 0ad8 4C697374 		.ascii	"List_t\000"
 11986      5F7400
 11987              	.LASF125:
 11988 0adf 78546963 		.ascii	"xTicksToWait\000"
 11988      6B73546F 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 320


 11988      57616974 
 11988      00
 11989              	.LASF159:
 11990 0aec 78546173 		.ascii	"xTaskResumeAll\000"
 11990      6B526573 
 11990      756D6541 
 11990      6C6C00
 11991              	.LASF131:
 11992 0afb 78546173 		.ascii	"xTaskCreate\000"
 11992      6B437265 
 11992      61746500 
 11993              	.LASF178:
 11994 0b07 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11994      6B52656D 
 11994      6F766546 
 11994      726F6D45 
 11994      76656E74 
 11995              	.LASF216:
 11996 0b20 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11996      7473546F 
 11996      436C6561 
 11996      724F6E45 
 11996      78697400 
 11997              	.LASF64:
 11998 0b34 784C6973 		.ascii	"xListEnd\000"
 11998      74456E64 
 11998      00
 11999              	.LASF128:
 12000 0b3d 78436F6E 		.ascii	"xConstTickCount\000"
 12000      73745469 
 12000      636B436F 
 12000      756E7400 
 12001              	.LASF69:
 12002 0b4d 65426C6F 		.ascii	"eBlocked\000"
 12002      636B6564 
 12002      00
 12003              	.LASF192:
 12004 0b56 78496E64 		.ascii	"xIndex\000"
 12004      657800
 12005              	.LASF38:
 12006 0b5d 4E52465F 		.ascii	"NRF_RX_PW_P0_REG\000"
 12006      52585F50 
 12006      575F5030 
 12006      5F524547 
 12006      00
 12007              	.LASF250:
 12008 0b6e 764C6973 		.ascii	"vListInitialiseItem\000"
 12008      74496E69 
 12008      7469616C 
 12008      69736549 
 12008      74656D00 
 12009              	.LASF135:
 12010 0b82 75785461 		.ascii	"uxTaskPriorityGet\000"
 12010      736B5072 
 12010      696F7269 
 12010      74794765 
 12010      7400
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 321


 12011              	.LASF165:
 12012 0b94 7853686F 		.ascii	"xShouldDelay\000"
 12012      756C6444 
 12012      656C6179 
 12012      00
 12013              	.LASF2:
 12014 0ba1 6C6F6E67 		.ascii	"long double\000"
 12014      20646F75 
 12014      626C6500 
 12015              	.LASF31:
 12016 0bad 4E52465F 		.ascii	"NRF_RX_ADDR_P0_REG\000"
 12016      52585F41 
 12016      4444525F 
 12016      50305F52 
 12016      454700
 12017              	.LASF76:
 12018 0bc0 65496E63 		.ascii	"eIncrement\000"
 12018      72656D65 
 12018      6E7400
 12019              	.LASF173:
 12020 0bcb 76546173 		.ascii	"vTaskSuspend\000"
 12020      6B537573 
 12020      70656E64 
 12020      00
 12021              	.LASF77:
 12022 0bd8 65536574 		.ascii	"eSetValueWithOverwrite\000"
 12022      56616C75 
 12022      65576974 
 12022      684F7665 
 12022      72777269 
 12023              	.LASF22:
 12024 0bef 4E52465F 		.ascii	"NRF_EN_AA_REG\000"
 12024      454E5F41 
 12024      415F5245 
 12024      4700
 12025              	.LASF55:
 12026 0bfd 70764F77 		.ascii	"pvOwner\000"
 12026      6E657200 
 12027              	.LASF95:
 12028 0c05 70635461 		.ascii	"pcTaskName\000"
 12028      736B4E61 
 12028      6D6500
 12029              	.LASF89:
 12030 0c10 74736B54 		.ascii	"tskTaskControlBlock\000"
 12030      61736B43 
 12030      6F6E7472 
 12030      6F6C426C 
 12030      6F636B00 
 12031              	.LASF164:
 12032 0c24 7854696D 		.ascii	"xTimeIncrement\000"
 12032      65496E63 
 12032      72656D65 
 12032      6E7400
 12033              	.LASF221:
 12034 0c33 65416374 		.ascii	"eAction\000"
 12034      696F6E00 
 12035              	.LASF166:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 322


 12036 0c3b 76546173 		.ascii	"vTaskDelay\000"
 12036      6B44656C 
 12036      617900
 12037              	.LASF91:
 12038 0c46 78537461 		.ascii	"xStateListItem\000"
 12038      74654C69 
 12038      73744974 
 12038      656D00
 12039              	.LASF171:
 12040 0c55 7578546F 		.ascii	"uxTopPriority\000"
 12040      70507269 
 12040      6F726974 
 12040      7900
 12041              	.LASF204:
 12042 0c63 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 12042      6B507269 
 12042      6F726974 
 12042      79446973 
 12042      696E6865 
 12043              	.LASF13:
 12044 0c87 6C6F6E67 		.ascii	"long long unsigned int\000"
 12044      206C6F6E 
 12044      6720756E 
 12044      7369676E 
 12044      65642069 
 12045              	.LASF253:
 12046 0c9e 76506F72 		.ascii	"vPortEnterCritical\000"
 12046      74456E74 
 12046      65724372 
 12046      69746963 
 12046      616C00
 12047              	.LASF220:
 12048 0cb1 756C5661 		.ascii	"ulValue\000"
 12048      6C756500 
 12049              	.LASF17:
 12050 0cb9 75696E74 		.ascii	"uint16_t\000"
 12050      31365F74 
 12050      00
 12051              	.LASF29:
 12052 0cc2 4E52465F 		.ascii	"NRF_OBSERVE_TX_REG\000"
 12052      4F425345 
 12052      5256455F 
 12052      54585F52 
 12052      454700
 12053              	.LASF199:
 12054 0cd5 78546173 		.ascii	"xTaskGetSchedulerState\000"
 12054      6B476574 
 12054      53636865 
 12054      64756C65 
 12054      72537461 
 12055              	.LASF190:
 12056 0cec 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 12056      6B536574 
 12056      54687265 
 12056      61644C6F 
 12056      63616C53 
 12057              	.LASF156:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 323


 12058 0d0e 78546173 		.ascii	"xTaskIncrementTick\000"
 12058      6B496E63 
 12058      72656D65 
 12058      6E745469 
 12058      636B00
 12059              	.LASF124:
 12060 0d21 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 12060      64644375 
 12060      7272656E 
 12060      74546173 
 12060      6B546F44 
 12061              	.LASF50:
 12062 0d40 55426173 		.ascii	"UBaseType_t\000"
 12062      65547970 
 12062      655F7400 
 12063              	.LASF54:
 12064 0d4c 70785072 		.ascii	"pxPrevious\000"
 12064      6576696F 
 12064      757300
 12065              	.LASF98:
 12066 0d57 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 12066      72656164 
 12066      4C6F6361 
 12066      6C53746F 
 12066      72616765 
 12067              	.LASF162:
 12068 0d74 76546173 		.ascii	"vTaskDelayUntil\000"
 12068      6B44656C 
 12068      6179556E 
 12068      74696C00 
 12069              	.LASF150:
 12070 0d84 76546173 		.ascii	"vTaskEndScheduler\000"
 12070      6B456E64 
 12070      53636865 
 12070      64756C65 
 12070      7200
 12071              	.LASF51:
 12072 0d96 5469636B 		.ascii	"TickType_t\000"
 12072      54797065 
 12072      5F7400
 12073              	.LASF122:
 12074 0da1 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 12074      6865636B 
 12074      5461736B 
 12074      73576169 
 12074      74696E67 
 12075              	.LASF132:
 12076 0dc1 65546173 		.ascii	"eTaskGetState\000"
 12076      6B476574 
 12076      53746174 
 12076      6500
 12077              	.LASF100:
 12078 0dcf 75634E6F 		.ascii	"ucNotifyState\000"
 12078      74696679 
 12078      53746174 
 12078      6500
 12079              	.LASF249:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 324


 12080 0ddd 6D656D73 		.ascii	"memset\000"
 12080      657400
 12081              	.LASF21:
 12082 0de4 4E52465F 		.ascii	"NRF_CONFIG_REG\000"
 12082      434F4E46 
 12082      49475F52 
 12082      454700
 12083              	.LASF157:
 12084 0df3 78537769 		.ascii	"xSwitchRequired\000"
 12084      74636852 
 12084      65717569 
 12084      72656400 
 12085              	.LASF227:
 12086 0e03 78546173 		.ascii	"xTaskNotifyStateClear\000"
 12086      6B4E6F74 
 12086      69667953 
 12086      74617465 
 12086      436C6561 
 12087              	.LASF239:
 12088 0e19 7578546F 		.ascii	"uxTopReadyPriority\000"
 12088      70526561 
 12088      64795072 
 12088      696F7269 
 12088      747900
 12089              	.LASF160:
 12090 0e2c 78416C72 		.ascii	"xAlreadyYielded\000"
 12090      65616479 
 12090      5969656C 
 12090      64656400 
 12091              	.LASF72:
 12092 0e3c 65496E76 		.ascii	"eInvalid\000"
 12092      616C6964 
 12092      00
 12093              	.LASF260:
 12094 0e45 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 12094      74496E74 
 12094      65727275 
 12094      70744D61 
 12094      736B4672 
 12095              	.LASF158:
 12096 0e5f 70785465 		.ascii	"pxTemp\000"
 12096      6D7000
 12097              	.LASF202:
 12098 0e66 70784D75 		.ascii	"pxMutexHolderTCB\000"
 12098      74657848 
 12098      6F6C6465 
 12098      72544342 
 12098      00
 12099              	.LASF224:
 12100 0e77 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 12100      6B47656E 
 12100      65726963 
 12100      4E6F7469 
 12100      66794672 
 12101              	.LASF108:
 12102 0e91 70756353 		.ascii	"pucStackByte\000"
 12102      7461636B 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 325


 12102      42797465 
 12102      00
 12103              	.LASF205:
 12104 0e9e 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 12104      67686573 
 12104      74507269 
 12104      6F726974 
 12104      79576169 
 12105              	.LASF198:
 12106 0ebb 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 12106      6B476574 
 12106      43757272 
 12106      656E7454 
 12106      61736B48 
 12107              	.LASF257:
 12108 0ed5 75784C69 		.ascii	"uxListRemove\000"
 12108      73745265 
 12108      6D6F7665 
 12108      00
 12109              	.LASF231:
 12110 0ee2 70784465 		.ascii	"pxDelayedTaskList\000"
 12110      6C617965 
 12110      64546173 
 12110      6B4C6973 
 12110      7400
 12111              	.LASF225:
 12112 0ef4 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 12112      67686572 
 12112      5072696F 
 12112      72697479 
 12112      5461736B 
 12113              	.LASF232:
 12114 0f0e 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 12114      6572666C 
 12114      6F774465 
 12114      6C617965 
 12114      64546173 
 12115              	.LASF7:
 12116 0f28 73686F72 		.ascii	"short int\000"
 12116      7420696E 
 12116      7400
 12117              	.LASF187:
 12118 0f32 78456C61 		.ascii	"xElapsedTime\000"
 12118      70736564 
 12118      54696D65 
 12118      00
 12119              	.LASF141:
 12120 0f3f 75784E65 		.ascii	"uxNewPriority\000"
 12120      77507269 
 12120      6F726974 
 12120      7900
 12121              	.LASF27:
 12122 0f4d 4E52465F 		.ascii	"NRF_RF_SETUP_REG\000"
 12122      52465F53 
 12122      45545550 
 12122      5F524547 
 12122      00
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 326


 12123              	.LASF155:
 12124 0f5e 78546173 		.ascii	"xTaskToQuery\000"
 12124      6B546F51 
 12124      75657279 
 12124      00
 12125              	.LASF234:
 12126 0f6b 78546173 		.ascii	"xTasksWaitingTermination\000"
 12126      6B735761 
 12126      6974696E 
 12126      67546572 
 12126      6D696E61 
 12127              	.LASF43:
 12128 0f84 4E52465F 		.ascii	"NRF_RX_PW_P5_REG\000"
 12128      52585F50 
 12128      575F5035 
 12128      5F524547 
 12128      00
 12129              	.LASF57:
 12130 0f95 4C697374 		.ascii	"ListItem_t\000"
 12130      4974656D 
 12130      5F7400
 12131              	.LASF180:
 12132 0fa0 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 12132      6B52656D 
 12132      6F766546 
 12132      726F6D55 
 12132      6E6F7264 
 12133              	.LASF36:
 12134 0fc2 4E52465F 		.ascii	"NRF_RX_ADDR_P5_REG\000"
 12134      52585F41 
 12134      4444525F 
 12134      50355F52 
 12134      454700
 12135              	.LASF102:
 12136 0fd5 5443425F 		.ascii	"TCB_t\000"
 12136      7400
 12137              	.LASF116:
 12138 0fdb 70765061 		.ascii	"pvParameters\000"
 12138      72616D65 
 12138      74657273 
 12138      00
 12139              	.LASF137:
 12140 0fe8 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 12140      736B5072 
 12140      696F7269 
 12140      74794765 
 12140      7446726F 
 12141              	.LASF18:
 12142 1001 75696E74 		.ascii	"uint32_t\000"
 12142      33325F74 
 12142      00
 12143              	.LASF219:
 12144 100a 78546173 		.ascii	"xTaskToNotify\000"
 12144      6B546F4E 
 12144      6F746966 
 12144      7900
 12145              	.LASF119:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 327


 12146 1018 78526567 		.ascii	"xRegions\000"
 12146      696F6E73 
 12146      00
 12147              	.LASF79:
 12148 1021 654E6F74 		.ascii	"eNotifyAction\000"
 12148      69667941 
 12148      6374696F 
 12148      6E00
 12149              	.LASF215:
 12150 102f 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 12150      7473546F 
 12150      436C6561 
 12150      724F6E45 
 12150      6E747279 
 12151              	.LASF48:
 12152 1044 53746163 		.ascii	"StackType_t\000"
 12152      6B547970 
 12152      655F7400 
 12153              	.LASF130:
 12154 1050 78546173 		.ascii	"xTaskToDelete\000"
 12154      6B546F44 
 12154      656C6574 
 12154      6500
 12155              	.LASF9:
 12156 105e 73686F72 		.ascii	"short unsigned int\000"
 12156      7420756E 
 12156      7369676E 
 12156      65642069 
 12156      6E7400
 12157              	.LASF263:
 12158 1071 76506F72 		.ascii	"vPortEndScheduler\000"
 12158      74456E64 
 12158      53636865 
 12158      64756C65 
 12158      7200
 12159              	.LASF120:
 12160 1083 70727649 		.ascii	"prvInitialiseTaskLists\000"
 12160      6E697469 
 12160      616C6973 
 12160      65546173 
 12160      6B4C6973 
 12161              	.LASF255:
 12162 109a 76506F72 		.ascii	"vPortExitCritical\000"
 12162      74457869 
 12162      74437269 
 12162      74696361 
 12162      6C00
 12163              	.LASF229:
 12164 10ac 7844656C 		.ascii	"xDelayedTaskList1\000"
 12164      61796564 
 12164      5461736B 
 12164      4C697374 
 12164      3100
 12165              	.LASF230:
 12166 10be 7844656C 		.ascii	"xDelayedTaskList2\000"
 12166      61796564 
 12166      5461736B 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccy5M8vq.s 			page 328


 12166      4C697374 
 12166      3200
 12167              	.LASF248:
 12168 10d0 76506F72 		.ascii	"vPortFree\000"
 12168      74467265 
 12168      6500
 12169              	.LASF74:
 12170 10da 654E6F41 		.ascii	"eNoAction\000"
 12170      6374696F 
 12170      6E00
 12171              	.LASF226:
 12172 10e4 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 12172      6B4E6F74 
 12172      69667947 
 12172      69766546 
 12172      726F6D49 
 12173              	.LASF87:
 12174 10fb 756C5061 		.ascii	"ulParameters\000"
 12174      72616D65 
 12174      74657273 
 12174      00
 12175              	.LASF133:
 12176 1108 65526574 		.ascii	"eReturn\000"
 12176      75726E00 
 12177              	.LASF211:
 12178 1110 756C5461 		.ascii	"ulTaskNotifyTake\000"
 12178      736B4E6F 
 12178      74696679 
 12178      54616B65 
 12178      00
 12179              	.LASF45:
 12180 1121 4E52465F 		.ascii	"NRF_DYNPD_REG\000"
 12180      44594E50 
 12180      445F5245 
 12180      4700
 12181              	.LASF191:
 12182 112f 78546173 		.ascii	"xTaskToSet\000"
 12182      6B546F53 
 12182      657400
 12183              	.LASF214:
 12184 113a 78546173 		.ascii	"xTaskNotifyWait\000"
 12184      6B4E6F74 
 12184      69667957 
 12184      61697400 
 12185              	.LASF52:
 12186 114a 78497465 		.ascii	"xItemValue\000"
 12186      6D56616C 
 12186      756500
 12187              	.LASF104:
 12188 1155 70785443 		.ascii	"pxTCB\000"
 12188      4200
 12189              	.LASF93:
 12190 115b 75785072 		.ascii	"uxPriority\000"
 12190      696F7269 
 12190      747900
 12191              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
